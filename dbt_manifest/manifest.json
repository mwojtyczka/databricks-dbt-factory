{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.7", "generated_at": "2024-12-05T10:40:23.020787Z", "invocation_id": "be8bef49-22d5-4874-a77e-e6132c4a7458", "env": {}, "project_name": "dbt_demo", "project_id": "f005e70093f1ddd3daa6316f5ec6f69e", "user_id": "b802ff80-7d9c-4428-8a39-5f56cf164bf8", "send_anonymous_usage_stats": true, "adapter_type": "databricks"}, "nodes": {"model.dbt_demo.diamonds_list_colors": {"database": "dbt_demo", "schema": "dbt_dev", "name": "diamonds_list_colors", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model1/diamonds_list_colors.sql", "original_file_path": "src/models/sql_model1/diamonds_list_colors.sql", "unique_id": "model.dbt_demo.diamonds_list_colors", "fqn": ["dbt_demo", "sql_model1", "diamonds_list_colors"], "alias": "diamonds_list_colors", "checksum": {"name": "sha256", "checksum": "fb8e076fbc40ae30c2441fbc660922d1d3428cf1557cc8f400dbd69caa78c266"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "created_at": 1733395224.294606, "relation_name": "`dbt_demo`.`dbt_dev`.`diamonds_list_colors`", "raw_code": "-- create a view\nselect distinct color\nfrom {{ ref('diamonds_four_cs') }}\nsort by color asc", "language": "sql", "refs": [{"name": "diamonds_four_cs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.diamonds_four_cs"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/diamonds_list_colors.sql", "compiled": true, "compiled_code": "-- create a view\nselect distinct color\nfrom `dbt_demo`.`dbt_dev`.`diamonds_four_cs`\nsort by color asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.diamonds_prices": {"database": "dbt_demo", "schema": "dbt_dev", "name": "diamonds_prices", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model1/diamonds_prices.sql", "original_file_path": "src/models/sql_model1/diamonds_prices.sql", "unique_id": "model.dbt_demo.diamonds_prices", "fqn": ["dbt_demo", "sql_model1", "diamonds_prices"], "alias": "diamonds_prices", "checksum": {"name": "sha256", "checksum": "809b1318095c2871ab3e9d98af3cc11233e1fbb791e19682fbb38070074e53d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "created_at": 1733395224.3079948, "relation_name": "`dbt_demo`.`dbt_dev`.`diamonds_prices`", "raw_code": "-- create a view\nselect\n    account_id,\n    workspace_id,\n    usage_date,\n    sum(usage_quantity) as quantity,\n    sum({{ cents_to_dollars('usage_quantity') }}) as amount_usd\nfrom system.billing.usage\ngroup by account_id, workspace_id, usage_date", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_demo.cents_to_dollars"], "nodes": []}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/diamonds_prices.sql", "compiled": true, "compiled_code": "-- create a view\nselect\n    account_id,\n    workspace_id,\n    usage_date,\n    sum(usage_quantity) as quantity,\n    sum(\n    (usage_quantity / 100)::numeric(16, 2)\n) as amount_usd\nfrom system.billing.usage\ngroup by account_id, workspace_id, usage_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.diamonds_four_cs": {"database": "dbt_demo", "schema": "dbt_dev", "name": "diamonds_four_cs", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model1/diamonds_four_cs.sql", "original_file_path": "src/models/sql_model1/diamonds_four_cs.sql", "unique_id": "model.dbt_demo.diamonds_four_cs", "fqn": ["dbt_demo", "sql_model1", "diamonds_four_cs"], "alias": "diamonds_four_cs", "checksum": {"name": "sha256", "checksum": "85a0d2493625371fdfbd2d8261dcc22335301c88e08791638ad760e6cb7dd614"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "materialized": "table", "file_format": "delta"}, "created_at": 1733395224.316122, "relation_name": "`dbt_demo`.`dbt_dev`.`diamonds_four_cs`", "raw_code": "-- create a table\n-- https://docs.getdbt.com/reference/resource-configs/databricks-configs\n{{ config(\n  materialized='table',\n  file_format='delta'\n) }}\nselect\n    carat,\n    cut,\n    color,\n    clarity\n-- get table specification from schema.yml\nfrom {{ source('raw', 'diamonds') }} -- equivalent of: from hive_metastore.default.diamonds", "language": "sql", "refs": [], "sources": [["raw", "diamonds"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_demo.raw.diamonds"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/diamonds_four_cs.sql", "compiled": true, "compiled_code": "-- create a table\n-- https://docs.getdbt.com/reference/resource-configs/databricks-configs\n\nselect\n    carat,\n    cut,\n    color,\n    clarity\n-- get table specification from schema.yml\nfrom `hive_metastore`.`default`.`diamonds` -- equivalent of: from hive_metastore.default.diamonds", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.zzz_game_details": {"database": "dbt_demo", "schema": "dbt_dev", "name": "zzz_game_details", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model1/zzz_game_details.sql", "original_file_path": "src/models/sql_model1/zzz_game_details.sql", "unique_id": "model.dbt_demo.zzz_game_details", "fqn": ["dbt_demo", "sql_model1", "zzz_game_details"], "alias": "zzz_game_details", "checksum": {"name": "sha256", "checksum": "07a0ddce4e171f5838f27124b3574a77cbab23fac66bba7a1b8f87f6bfbd653f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "file_format": "delta"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home": {"name": "home", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor": {"name": "visitor", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_score": {"name": "home_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_score": {"name": "visitor_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winner": {"name": "winner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_demo://src/models/sql_model1/schemas.yml", "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "materialized": "table", "file_format": "delta"}, "created_at": 1733395224.843837, "relation_name": "`dbt_demo`.`dbt_dev`.`zzz_game_details`", "raw_code": "-- Create a table that provides full details for each game, including\n-- the game ID, the home and visiting teams' city names and scores,\n-- the game winner's city name, and the game date.\n{{ config(\n  materialized='table',\n  file_format='delta'\n) }}\n-- Step 4 of 4: Replace the visitor team IDs with their city names.\nselect\n    game_id,\n    home,\n    t.team_city as visitor,\n    home_score,\n    visitor_score,\n    -- Step 3 of 4: Display the city name for each game's winner.\n    game_date as date,\n    case\n        when\n            home_score > visitor_score\n            then\n                home\n        when\n            visitor_score > home_score\n            then\n                t.team_city\n    end as winner\nfrom (\n    -- Step 2 of 4: Replace the home team IDs with their actual city names.\n    select\n        game_id,\n        t.team_city as home,\n        home_score,\n        visitor_team_id,\n        visitor_score,\n        game_date\n    from (\n    -- Step 1 of 4: Combine data from various tables (for example, game and team IDs, scores, dates).\n        select\n            g.game_id,\n            go.home_team_id,\n            gs.home_team_score as home_score,\n            go.visitor_team_id,\n            gs.visitor_team_score as visitor_score,\n            g.game_date\n        from\n            marcin_demo.dbt.{{ target.name }}_zzz_games as g,\n            marcin_demo.dbt.zzz_game_opponents as go,\n            marcin_demo.dbt.zzz_game_scores as gs\n        where\n            g.game_id = go.game_id\n            and g.game_id = gs.game_id\n    ) as all_ids,\n        marcin_demo.dbt.zzz_teams as t\n    where\n        all_ids.home_team_id = t.team_id\n) as visitor_ids,\n    marcin_demo.dbt.zzz_teams as t\nwhere\n    visitor_ids.visitor_team_id = t.team_id\norder by game_date desc", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/zzz_game_details.sql", "compiled": true, "compiled_code": "-- Create a table that provides full details for each game, including\n-- the game ID, the home and visiting teams' city names and scores,\n-- the game winner's city name, and the game date.\n\n-- Step 4 of 4: Replace the visitor team IDs with their city names.\nselect\n    game_id,\n    home,\n    t.team_city as visitor,\n    home_score,\n    visitor_score,\n    -- Step 3 of 4: Display the city name for each game's winner.\n    game_date as date,\n    case\n        when\n            home_score > visitor_score\n            then\n                home\n        when\n            visitor_score > home_score\n            then\n                t.team_city\n    end as winner\nfrom (\n    -- Step 2 of 4: Replace the home team IDs with their actual city names.\n    select\n        game_id,\n        t.team_city as home,\n        home_score,\n        visitor_team_id,\n        visitor_score,\n        game_date\n    from (\n    -- Step 1 of 4: Combine data from various tables (for example, game and team IDs, scores, dates).\n        select\n            g.game_id,\n            go.home_team_id,\n            gs.home_team_score as home_score,\n            go.visitor_team_id,\n            gs.visitor_team_score as visitor_score,\n            g.game_date\n        from\n            marcin_demo.dbt.dev_zzz_games as g,\n            marcin_demo.dbt.zzz_game_opponents as go,\n            marcin_demo.dbt.zzz_game_scores as gs\n        where\n            g.game_id = go.game_id\n            and g.game_id = gs.game_id\n    ) as all_ids,\n        marcin_demo.dbt.zzz_teams as t\n    where\n        all_ids.home_team_id = t.team_id\n) as visitor_ids,\n    marcin_demo.dbt.zzz_teams as t\nwhere\n    visitor_ids.visitor_team_id = t.team_id\norder by game_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.zzz_win_loss_records": {"database": "dbt_demo", "schema": "dbt_dev", "name": "zzz_win_loss_records", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model1/zzz_win_loss_records.sql", "original_file_path": "src/models/sql_model1/zzz_win_loss_records.sql", "unique_id": "model.dbt_demo.zzz_win_loss_records", "fqn": ["dbt_demo", "sql_model1", "zzz_win_loss_records"], "alias": "zzz_win_loss_records", "checksum": {"name": "sha256", "checksum": "86103ba3fcd72418c07e8f40b249375ee35d7ca4f2d2754f506e7c13a97e0998"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_demo://src/models/sql_model1/schemas.yml", "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "materialized": "materialized_view"}, "created_at": 1733395224.8447208, "relation_name": "`dbt_demo`.`dbt_dev`.`zzz_win_loss_records`", "raw_code": "-- Create a view that summarizes the season's win and loss records by team.\n-- https://docs.getdbt.com/docs/build/materializations\n{{\n    config(\n        materialized='materialized_view'\n    )\n}}\n-- By default, materialized views are not refreshed on a schedule on Databricks in this materialization.\n-- To set up scheduling, you can use a post-hook to alter the MV with a cron schedule that will run in Databricks Workflows:\n--post_hook = 'ALTER MATERIALIZED VIEW {{ this }} ADD SCHEDULE CRON \"0 0 0 * * ? *\" AT TIME ZONE \"America/Los_Angeles\";'\n\n-- Step 2 of 2: Calculate the number of wins and losses for each team.\nselect\n    winner as team,\n    count(winner) as wins,\n    -- Each team played in 4 games.\n    (4 - count(winner)) as losses\nfrom (\n    -- Step 1 of 2: Determine the winner and loser for each game.\n    select\n        game_id,\n        winner,\n        case\n            when\n                home = winner\n                then\n                    visitor\n            else\n                home\n        end as loser\n    from {{ ref('zzz_game_details') }}\n)\ngroup by winner\norder by wins desc", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/zzz_win_loss_records.sql", "compiled": true, "compiled_code": "-- Create a view that summarizes the season's win and loss records by team.\n-- https://docs.getdbt.com/docs/build/materializations\n\n-- By default, materialized views are not refreshed on a schedule on Databricks in this materialization.\n-- To set up scheduling, you can use a post-hook to alter the MV with a cron schedule that will run in Databricks Workflows:\n--post_hook = 'ALTER MATERIALIZED VIEW `dbt_demo`.`dbt_dev`.`zzz_win_loss_records` ADD SCHEDULE CRON \"0 0 0 * * ? *\" AT TIME ZONE \"America/Los_Angeles\";'\n\n-- Step 2 of 2: Calculate the number of wins and losses for each team.\nselect\n    winner as team,\n    count(winner) as wins,\n    -- Each team played in 4 games.\n    (4 - count(winner)) as losses\nfrom (\n    -- Step 1 of 2: Determine the winner and loser for each game.\n    select\n        game_id,\n        winner,\n        case\n            when\n                home = winner\n                then\n                    visitor\n            else\n                home\n        end as loser\n    from `dbt_demo`.`dbt_dev`.`zzz_game_details`\n)\ngroup by winner\norder by wins desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.second_dbt_model": {"database": "dbt_demo", "schema": "dbt_dev", "name": "second_dbt_model", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model2/second_dbt_model.sql", "original_file_path": "src/models/sql_model2/second_dbt_model.sql", "unique_id": "model.dbt_demo.second_dbt_model", "fqn": ["dbt_demo", "sql_model2", "second_dbt_model"], "alias": "second_dbt_model", "checksum": {"name": "sha256", "checksum": "226c0e1d47e6f9bee7430c7acffadc0d239fa185558a2de703c5f0ab0b01d218"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "amount_usd": {"name": "amount_usd", "description": "The primary key for this table", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_demo://src/models/sql_model2/schemas.yml", "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "contract": {"enforced": true}}, "created_at": 1733395225.0142112, "relation_name": "`dbt_demo`.`dbt_dev`.`second_dbt_model`", "raw_code": "-- Use the `ref` function to select from other models\n\nselect\n    *, {{ cents_to_dollars('id') }} as amount_usd\nfrom {{ ref('first_dbt_model') }}\nwhere id = 1", "language": "sql", "refs": [{"name": "first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_demo.cents_to_dollars"], "nodes": ["model.dbt_demo.first_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/second_dbt_model.sql", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect\n    *, \n    (id / 100)::numeric(16, 2)\n as amount_usd\nfrom `dbt_demo`.`dbt_dev`.`first_dbt_model`\nwhere id = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "d4b533efdb37067787094e25d1860ddcc473cb5cf92ebe2c358011ff2866658f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.first_dbt_model": {"database": "dbt_demo", "schema": "dbt_dev", "name": "first_dbt_model", "resource_type": "model", "package_name": "dbt_demo", "path": "sql_model2/first_dbt_model.sql", "original_file_path": "src/models/sql_model2/first_dbt_model.sql", "unique_id": "model.dbt_demo.first_dbt_model", "fqn": ["dbt_demo", "sql_model2", "first_dbt_model"], "alias": "first_dbt_model", "checksum": {"name": "sha256", "checksum": "91d9a8b1e5c899463e52c50492b7b3c7df99fa6635c868f9165ca83e5f3b13f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_demo://src/models/sql_model2/schemas.yml", "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "contract": {"enforced": true}, "materialized": "table"}, "created_at": 1733395225.0129678, "relation_name": "`dbt_demo`.`dbt_dev`.`first_dbt_model`", "raw_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select 2 as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/first_dbt_model.sql", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select 2 as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "a31b0e38eb3a9f0c0ed2f45bd615732c39e48b7f698f50a36748a687fd6d7289"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_demo.my_python_model": {"database": "dbt_demo", "schema": "dbt_dev", "name": "my_python_model", "resource_type": "model", "package_name": "dbt_demo", "path": "python_model1/my_python_model.py", "original_file_path": "src/models/python_model1/my_python_model.py", "unique_id": "model.dbt_demo.my_python_model", "fqn": ["dbt_demo", "python_model1", "my_python_model"], "alias": "my_python_model", "checksum": {"name": "sha256", "checksum": "4e8afc30079943fa0413ff3d060b19cab5655a7fc2b4532a61ce208a053e8158"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["python"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}}, "tags": ["python"], "description": "My transformation written in Python", "columns": {"carat": {"name": "carat", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_demo://src/models/python_model1/config.yml", "build_path": null, "unrendered_config": {"submission_method": "job_cluster", "job_cluster_config": {"spark_version": "13.3.x-scala2.12", "node_type_id": "i3.xlarge", "data_security_mode": "SINGLE_USER", "num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]", "spark.databricks.cluster.profile": "singleNode"}, "custom_tags": {"ResourceClass": "SingleNode"}}, "materialized": "table", "tags": ["python"]}, "created_at": 1733395225.010676, "relation_name": "`dbt_demo`.`dbt_dev`.`my_python_model`", "raw_code": "# https://docs.getdbt.com/docs/build/python-models\ndef model(dbt, session):\n\n    diamonds_df = dbt.ref(\"diamonds_four_cs\")  # you can reference models from different folders\n    final_df = diamonds_df.select(\"carat\", \"cut\").filter(\"carat is not NULL\")\n    # diamonds_df = session.sql(\"select carat, cut from diamonds_four_cs where carat is not NULL\")\n\n    return final_df", "language": "python", "refs": [{"name": "diamonds_four_cs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.dbt_demo.diamonds_four_cs"]}, "compiled_path": "target/compiled/dbt_demo/src/models/python_model1/my_python_model.py", "compiled": true, "compiled_code": "# https://docs.getdbt.com/docs/build/python-models\ndef model(dbt, session):\n\n    diamonds_df = dbt.ref(\"diamonds_four_cs\")  # you can reference models from different folders\n    final_df = diamonds_df.select(\"carat\", \"cut\").filter(\"carat is not NULL\")\n    # diamonds_df = session.sql(\"select carat, cut from diamonds_four_cs where carat is not NULL\")\n\n    return final_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"diamonds_four_cs\": \"`dbt_demo`.`dbt_dev`.`diamonds_four_cs`\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"dbt_demo\"\n    schema = \"dbt_dev\"\n    identifier = \"my_python_model\"\n    \n    def __repr__(self):\n        return '`dbt_demo`.`dbt_dev`.`my_python_model`'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# how to execute python model in notebook\n# dbt = dbtObj(spark.table)\n# df = model(dbt, spark)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.dbt_demo.zzz_game_details_check_scores": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "zzz_game_details_check_scores", "resource_type": "test", "package_name": "dbt_demo", "path": "data_tests/zzz_game_details_check_scores.sql", "original_file_path": "tests/data_tests/zzz_game_details_check_scores.sql", "unique_id": "test.dbt_demo.zzz_game_details_check_scores", "fqn": ["dbt_demo", "data_tests", "zzz_game_details_check_scores"], "alias": "zzz_game_details_check_scores", "checksum": {"name": "sha256", "checksum": "49cca9739f2738a4609833d267ade1a137756523f0659ec02f0bd31adb3c5789"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.3667781, "relation_name": null, "raw_code": "-- This sport allows no negative scores or tie games.\n-- For this test to pass, this query must return no results.\n\nselect home_score, visitor_score\nfrom {{ ref('zzz_game_details') }}\nwhere home_score < 0\nor visitor_score < 0\nor home_score = visitor_score", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/tests/data_tests/zzz_game_details_check_scores.sql", "compiled": true, "compiled_code": "-- This sport allows no negative scores or tie games.\n-- For this test to pass, this query must return no results.\n\nselect home_score, visitor_score\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere home_score < 0\nor visitor_score < 0\nor home_score = visitor_score", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_demo.zzz_game_details_check_dates": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "zzz_game_details_check_dates", "resource_type": "test", "package_name": "dbt_demo", "path": "data_tests/zzz_game_details_check_dates.sql", "original_file_path": "tests/data_tests/zzz_game_details_check_dates.sql", "unique_id": "test.dbt_demo.zzz_game_details_check_dates", "fqn": ["dbt_demo", "data_tests", "zzz_game_details_check_dates"], "alias": "zzz_game_details_check_dates", "checksum": {"name": "sha256", "checksum": "ac2ae3e40e5b734327e8a60a8c944e535c472314feee78d9320da1f7ed515918"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.372742, "relation_name": null, "raw_code": "-- This season's games happened between 2020-12-12 and 2021-02-06.\n-- For this test to pass, this query must return no results.\n\nselect date\nfrom {{ ref('zzz_game_details') }}\nwhere date < '2020-12-12'\nor date > '2021-02-06'", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/tests/data_tests/zzz_game_details_check_dates.sql", "compiled": true, "compiled_code": "-- This season's games happened between 2020-12-12 and 2021-02-06.\n-- For this test to pass, this query must return no results.\n\nselect date\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere date < '2020-12-12'\nor date > '2021-02-06'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_demo.zzz_win_loss_records_check_records": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "zzz_win_loss_records_check_records", "resource_type": "test", "package_name": "dbt_demo", "path": "data_tests/zzz_win_loss_records_check_records.sql", "original_file_path": "tests/data_tests/zzz_win_loss_records_check_records.sql", "unique_id": "test.dbt_demo.zzz_win_loss_records_check_records", "fqn": ["dbt_demo", "data_tests", "zzz_win_loss_records_check_records"], "alias": "zzz_win_loss_records_check_records", "checksum": {"name": "sha256", "checksum": "8840acce153171ad015abfe10626d1220cc9533e98c859a2b483f0d25d2e4903"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.3755362, "relation_name": null, "raw_code": "-- Each team participated in 4 games this season.\n-- For this test to pass, this query must return no results.\n\nselect wins, losses\nfrom {{ ref('zzz_win_loss_records') }}\nwhere wins < 0 or wins > 4\nor losses < 0 or losses > 4\nor (wins + losses) > 4", "language": "sql", "refs": [{"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/tests/data_tests/zzz_win_loss_records_check_records.sql", "compiled": true, "compiled_code": "-- Each team participated in 4 games this season.\n-- For this test to pass, this query must return no results.\n\nselect wins, losses\nfrom `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\nwhere wins < 0 or wins > 4\nor losses < 0 or losses > 4\nor (wins + losses) > 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_demo.my_python_model_test": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "my_python_model_test", "resource_type": "test", "package_name": "dbt_demo", "path": "data_tests/my_python_model_test.sql", "original_file_path": "tests/data_tests/my_python_model_test.sql", "unique_id": "test.dbt_demo.my_python_model_test", "fqn": ["dbt_demo", "data_tests", "my_python_model_test"], "alias": "my_python_model_test", "checksum": {"name": "sha256", "checksum": "15480c61e32be6865804dbc0327e0b1a651d0d69acaf8c63f3d7d4a1e65f1f5a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.377751, "relation_name": null, "raw_code": "-- This season's games happened between 2020-12-12 and 2021-02-06.\n-- For this test to pass, this query must return no results.\n\nselect carat\nfrom {{ ref('my_python_model') }}\nwhere carat < 0", "language": "sql", "refs": [{"name": "my_python_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.my_python_model"]}, "compiled_path": "target/compiled/dbt_demo/tests/data_tests/my_python_model_test.sql", "compiled": true, "compiled_code": "-- This season's games happened between 2020-12-12 and 2021-02-06.\n-- For this test to pass, this query must return no results.\n\nselect carat\nfrom `dbt_demo`.`dbt_dev`.`my_python_model`\nwhere carat < 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_demo.diamonds_list_colors_test": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "diamonds_list_colors_test", "resource_type": "test", "package_name": "dbt_demo", "path": "data_tests/diamonds_list_colors_test.sql", "original_file_path": "tests/data_tests/diamonds_list_colors_test.sql", "unique_id": "test.dbt_demo.diamonds_list_colors_test", "fqn": ["dbt_demo", "data_tests", "diamonds_list_colors_test"], "alias": "diamonds_list_colors_test", "checksum": {"name": "sha256", "checksum": "4a4d3ee2fa6aad9a7fc4b248111aa6432b67374e217793fbf29d92c2504f13be"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.379853, "relation_name": null, "raw_code": "SELECT color, COUNT(*)\nFROM {{ ref('diamonds_list_colors') }}\nGROUP BY color\nHAVING COUNT(*) > 1", "language": "sql", "refs": [{"name": "diamonds_list_colors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_demo.diamonds_list_colors"]}, "compiled_path": "target/compiled/dbt_demo/tests/data_tests/diamonds_list_colors_test.sql", "compiled": true, "compiled_code": "SELECT color, COUNT(*)\nFROM `dbt_demo`.`dbt_dev`.`diamonds_list_colors`\nGROUP BY color\nHAVING COUNT(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "model.dbt_project_evaluator.stg_columns": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_columns.sql", "original_file_path": "models/staging/graph/stg_columns.sql", "unique_id": "model.dbt_project_evaluator.stg_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_columns"], "alias": "stg_columns", "checksum": {"name": "sha256", "checksum": "c8f3f73b537d183c2b66a143cf4a5bd6f7e0628c091e82b9938183c1d6c8ab71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395224.413203, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_columns`", "raw_code": "with\n\nfinal as (\n\n    {{ dbt_utils.union_relations([\n        ref('base_node_columns'),\n        ref('base_source_columns')\n    ])}}\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_node_columns", "package": null, "version": null}, {"name": "base_source_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_columns.sql", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`base_node_columns`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`base_node_columns`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`base_source_columns`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`base_source_columns`\n\n            \n        )\n\n        \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_nodes": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_nodes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_nodes.sql", "original_file_path": "models/staging/graph/stg_nodes.sql", "unique_id": "model.dbt_project_evaluator.stg_nodes", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_nodes"], "alias": "stg_nodes", "checksum": {"name": "sha256", "checksum": "f6c648e7063654b3ef2a7bffe1905ca7eab0f88aeea4a2a35c4c8ec496ed9f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes') }}"]}, "created_at": 1733395224.425784, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_nodes`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as materialized,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as on_schema_change,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as model_group,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as access,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as latest_version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as deprecation_date,\n    cast(True as {{ dbt.type_boolean() }}) as is_contract_enforced,\n    cast(0 as {{ dbt.type_int() }}) as total_defined_columns,\n    cast(0 as {{ dbt.type_int() }}) as total_described_columns,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as column_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as hard_coded_references,\n    cast(null as {{ dbt.type_int() }}) as number_lines,\n    cast(null as {{ dbt.type_float() }}) as sql_complexity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as macro_dependencies,\n    cast(True as {{ dbt.type_boolean() }}) as is_generic_test,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_nodes.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as string) as unique_id,\n    cast(null as string) as name,\n    cast(null as string) as resource_type,\n    cast(null as string) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as string) as materialized,\n    cast(null as string) as on_schema_change,\n    cast(null as string) as model_group,\n    cast(null as string) as access,\n    cast(null as string) as latest_version,\n    cast(null as string) as version,\n    cast(null as string) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as string) as database,\n    cast(null as string) as schema,\n    cast(null as string) as package_name,\n    cast(null as string) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as string) as column_name,\n    cast(null as string) as meta,\n    cast(null as string) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as string) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_exposure_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposure_relationships.sql", "original_file_path": "models/staging/graph/stg_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposure_relationships"], "alias": "stg_exposure_relationships", "checksum": {"name": "sha256", "checksum": "80d348798f7b7c4a00990729922ccdd248ff8f8b29ee3dbffdd6589315d3930f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395224.451488, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_exposure_relationships`", "raw_code": "with \n\n_base_exposure_relationships as (\n    select * from {{ ref('base_exposure_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_exposure_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_exposure_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposure_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`base_exposure_relationships`\n),\n\nfinal as (\n    select \n        md5(cast(concat(coalesce(cast(resource_id as string), ''), '-', coalesce(cast(direct_parent_id as string), '')) as string)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_node_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_node_relationships.sql", "original_file_path": "models/staging/graph/stg_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_node_relationships"], "alias": "stg_node_relationships", "checksum": {"name": "sha256", "checksum": "3b1dff9088982b74dc0917adbd9567d164e56b85c9fec26adfc961be2b22ac63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395224.5082839, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_node_relationships`", "raw_code": "with \n\n_base_node_relationships as (\n    select * from {{ ref('base_node_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_node_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_node_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_node_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`base_node_relationships`\n),\n\nfinal as (\n    select \n        md5(cast(concat(coalesce(cast(resource_id as string), ''), '-', coalesce(cast(direct_parent_id as string), '')) as string)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_sources": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_sources.sql", "original_file_path": "models/staging/graph/stg_sources.sql", "unique_id": "model.dbt_project_evaluator.stg_sources", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_sources"], "alias": "stg_sources", "checksum": {"name": "sha256", "checksum": "e005d460c2569d1719c451e6ae70acada6d2052b776a4be9447f6b6f88d9e34f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='sources') }}"]}, "created_at": 1733395224.511821, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_sources`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as source_name,\n    cast(True as {{ dbt.type_boolean() }}) as is_source_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loaded_at_field,\n    cast(True as {{ dbt.type_boolean() }}) as is_freshness_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loader,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as identifier,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }})  as meta,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_sources.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as string) as unique_id,\n    cast(null as string) as name,\n    cast(null as string) as file_path,\n    cast(null as string) as alias,\n    cast(null as string) as resource_type,\n    cast(null as string) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as string) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as string) as database,\n    cast(null as string) as schema,\n    cast(null as string) as package_name,\n    cast(null as string) as loader,\n    cast(null as string) as identifier,\n    cast(null as string)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_exposures": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_exposures", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposures.sql", "original_file_path": "models/staging/graph/stg_exposures.sql", "unique_id": "model.dbt_project_evaluator.stg_exposures", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposures"], "alias": "stg_exposures", "checksum": {"name": "sha256", "checksum": "131e195d8fd57db002d4e3b1d407220d82d1df8d358fd54fbdcaab6fb94672b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='exposures') }}"]}, "created_at": 1733395224.524876, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_exposures`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as exposure_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as maturity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as url,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_email,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposures.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as string ) as unique_id,\n    cast(null as string ) as name,\n    cast(null as string ) as resource_type,\n    cast(null as string ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as string ) as exposure_type,\n    cast(null as string ) as maturity,\n    cast(null as string ) as package_name,\n    cast(null as string ) as url,\n    cast(null as string ) as owner_name,\n    cast(null as string ) as owner_email,\n    cast(null as string ) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_metric_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metric_relationships.sql", "original_file_path": "models/staging/graph/stg_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metric_relationships"], "alias": "stg_metric_relationships", "checksum": {"name": "sha256", "checksum": "0351601c92dd9b5b4b0a4fac69e491f2c6fd568cf38aeb1040947d6b3ecbb9ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395224.5340009, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_metric_relationships`", "raw_code": "with \n\n_base_metric_relationships as (\n    select * from {{ ref('base_metric_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metric_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`base_metric_relationships`\n),\n\nfinal as (\n    select \n        md5(cast(concat(coalesce(cast(resource_id as string), ''), '-', coalesce(cast(direct_parent_id as string), '')) as string)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_metrics": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_metrics", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metrics.sql", "original_file_path": "models/staging/graph/stg_metrics.sql", "unique_id": "model.dbt_project_evaluator.stg_metrics", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metrics"], "alias": "stg_metrics", "checksum": {"name": "sha256", "checksum": "a071f6a6763991eae8bca6c3d5c41377ad648b130bfca432e58c79f3a8d321c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='metrics') }}"]}, "created_at": 1733395224.537184, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_metrics`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as label,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_filter,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure_alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as numerator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as denominator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as expr,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_window,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as grain_to_date,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metrics.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as string) as unique_id,\n    cast(null as string) as name,\n    cast(null as string) as resource_type,\n    cast(null as string) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as string) as metric_type,\n    cast(null as string) as label,\n    cast(null as string) as package_name,\n    cast(null as string) as metric_filter,\n    cast(null as string) as metric_measure,\n    cast(null as string) as metric_measure_alias,\n    cast(null as string) as numerator,\n    cast(null as string) as denominator,\n    cast(null as string) as expr,\n    cast(null as string) as metric_window,\n    cast(null as string) as grain_to_date,\n    cast(null as string) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_node_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "base_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_relationships.sql", "original_file_path": "models/staging/graph/base/base_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_relationships"], "alias": "base_node_relationships", "checksum": {"name": "sha256", "checksum": "024d38b5f84cbec88ceaabd20102a562016ba5a515052f31def3b22c2442abba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}"]}, "created_at": 1733395224.548029, "relation_name": "`dbt_demo`.`dbt_dev`.`base_node_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as string) as resource_id,\n    cast(null as string) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_source_columns": {"database": "dbt_demo", "schema": "dbt_dev", "name": "base_source_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_source_columns.sql", "original_file_path": "models/staging/graph/base/base_source_columns.sql", "unique_id": "model.dbt_project_evaluator.base_source_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_source_columns"], "alias": "base_source_columns", "checksum": {"name": "sha256", "checksum": "16f0d47e877e31c3599cf7587977283d35473209ccea7f2eea5ab2287d576463"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}"]}, "created_at": 1733395224.556949, "relation_name": "`dbt_demo`.`dbt_dev`.`base_source_columns`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_source_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as string) as node_unique_id,\n    cast(null as string) as name,\n    cast(null as string) as description,\n    cast(null as string) as data_type,\n    cast(null as string) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as string) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_node_columns": {"database": "dbt_demo", "schema": "dbt_dev", "name": "base_node_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_columns.sql", "original_file_path": "models/staging/graph/base/base_node_columns.sql", "unique_id": "model.dbt_project_evaluator.base_node_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_columns"], "alias": "base_node_columns", "checksum": {"name": "sha256", "checksum": "069c7d09a5775daef4dd347a11aa091623a17a8416cd72c0516ee9575430f1ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}"]}, "created_at": 1733395224.566968, "relation_name": "`dbt_demo`.`dbt_dev`.`base_node_columns`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as {{ dbt.type_boolean() }}) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as string) as node_unique_id,\n    cast(null as string) as name,\n    cast(null as string) as description,\n    cast(null as string) as data_type,\n    cast(null as string) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as string) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_exposure_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "base_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_exposure_relationships.sql", "original_file_path": "models/staging/graph/base/base_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_exposure_relationships"], "alias": "base_exposure_relationships", "checksum": {"name": "sha256", "checksum": "1e2094a8baab6b2fef788c0967f4210e79cb69071ab3ecb4a0a631f2f9b5707b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}"]}, "created_at": 1733395224.5730891, "relation_name": "`dbt_demo`.`dbt_dev`.`base_exposure_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_exposure_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as string) as resource_id,\n    cast(null as string) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_metric_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "base_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_metric_relationships.sql", "original_file_path": "models/staging/graph/base/base_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_metric_relationships"], "alias": "base_metric_relationships", "checksum": {"name": "sha256", "checksum": "fb76ef32293d63bd176c83859f97de76efa56a07835d70188e06010e6c3cd203"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}"]}, "created_at": 1733395224.5779572, "relation_name": "`dbt_demo`.`dbt_dev`.`base_metric_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_metric_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as string) as resource_id,\n    cast(null as string) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_naming_convention_folders": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_naming_convention_folders", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_folders.sql", "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_folders"], "alias": "stg_naming_convention_folders", "checksum": {"name": "sha256", "checksum": "269b827916875eb1bdc24c13fd0c33735c86aea2cbb2a978bc3668e5c8cb516f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1733395224.582602, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_naming_convention_folders`", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_folder = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_folder) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_folder), \"''\") }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_folders.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_naming_convention_prefixes": {"database": "dbt_demo", "schema": "dbt_dev", "name": "stg_naming_convention_prefixes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_prefixes.sql", "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_prefixes"], "alias": "stg_naming_convention_prefixes", "checksum": {"name": "sha256", "checksum": "2dccea5430120d7f403c4f57d02227545db604d23925f41b474236a4094d8c04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1733395224.592818, "relation_name": "`dbt_demo`.`dbt_dev`.`stg_naming_convention_prefixes`", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_model_type) , \"''\") }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace", "macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_prefixes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(concat(coalesce(cast(model_type as string), ''), '-', coalesce(cast(prefix_value as string), '')) as string)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_models": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_undocumented_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_models.sql", "original_file_path": "models/marts/documentation/fct_undocumented_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_models"], "alias": "fct_undocumented_models", "checksum": {"name": "sha256", "checksum": "c8667f2c44681081d01b644a1cec9f8a0d5d62c1f89d132b5e9fa3e8cace2554"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all models that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.034715, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_undocumented_models`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_models.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_documentation_coverage": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_documentation_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_documentation_coverage.sql", "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_documentation_coverage"], "alias": "fct_documentation_coverage", "checksum": {"name": "sha256", "checksum": "2cc61de2fb401924a201b80837ae9a008f8e0b4b337b8774b9cdc04221f3b734"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n", "columns": {"documentation_coverage_pct": {"name": "documentation_coverage_pct", "description": "the number of models in the project with a description divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.03444, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_documentation_coverage`", "raw_code": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(is_described_model) as {{ dbt.type_int() }}) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_described_\" ~ model_type ~ \"_model) * 100\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_documentation_coverage.sql", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        current_timestamp() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_sources": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_undocumented_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_sources.sql", "original_file_path": "models/marts/documentation/fct_undocumented_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_sources"], "alias": "fct_undocumented_sources", "checksum": {"name": "sha256", "checksum": "ca85ce862cbe9416515290c5f7e0b4732394c94caad12a0e6d7e0262ca6410be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all sources that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.0351849, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_undocumented_sources`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_sources.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_source_tables": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_undocumented_source_tables", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_source_tables.sql", "original_file_path": "models/marts/documentation/fct_undocumented_source_tables.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_source_tables"], "alias": "fct_undocumented_source_tables", "checksum": {"name": "sha256", "checksum": "ccbde566a67506d88bd664fe2bab505f2736ab003510e6280772b02cc7e20394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all source tables that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.034956, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_undocumented_source_tables`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_source_tables.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_direct_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "int_direct_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_direct_relationships.sql", "original_file_path": "models/marts/core/int_direct_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_direct_relationships"], "alias": "int_direct_relationships", "checksum": {"name": "sha256", "checksum": "0c693c72ac6c64259cf842524c04c639becfd5937353f5d5aaa7dd6031bc6f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}"}, "created_at": 1733395224.6171331, "relation_name": "`dbt_demo`.`dbt_dev`.`int_direct_relationships`", "raw_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_node_relationships", "package": null, "version": null}, {"name": "stg_exposure_relationships", "package": null, "version": null}, {"name": "stg_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_node_relationships", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_direct_relationships.sql", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from `dbt_demo`.`dbt_dev`.`stg_node_relationships`\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from `dbt_demo`.`dbt_dev`.`stg_exposure_relationships`\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from `dbt_demo`.`dbt_dev`.`stg_metric_relationships`\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(concat(coalesce(cast(resource_id as string), ''), '-', coalesce(cast(direct_parent_id as string), '')) as string)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_all_dag_relationships": {"database": "dbt_demo", "schema": "dbt_dev", "name": "int_all_dag_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_dag_relationships.sql", "original_file_path": "models/marts/core/int_all_dag_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_dag_relationships"], "alias": "int_all_dag_relationships", "checksum": {"name": "sha256", "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks', 'clickhouse'] else 'view' }}"}, "created_at": 1733395224.620925, "relation_name": "`dbt_demo`.`dbt_dev`.`int_all_dag_relationships`", "raw_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance", "language": "sql", "refs": [{"name": "int_direct_relationships", "package": null, "version": null}, {"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.recursive_dag"], "nodes": ["model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_dag_relationships.sql", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n\n\n\nwith direct_relationships as (\n    select\n        *\n    from `dbt_demo`.`dbt_dev`.`int_direct_relationships`\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        array( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n\n\n, cte_1 as (\n    select\n        cte_0.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_0.distance+1 as distance,\n        concat(cte_0.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_0.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_0.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_0\n            on cte_0.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_2 as (\n    select\n        cte_1.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_1.distance+1 as distance,\n        concat(cte_1.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_1.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_1.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_1\n            on cte_1.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_3 as (\n    select\n        cte_2.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_2.distance+1 as distance,\n        concat(cte_2.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_2.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_2.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_2\n            on cte_2.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_4 as (\n    select\n        cte_3.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_3.distance+1 as distance,\n        concat(cte_3.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_3.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_3.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_3\n            on cte_3.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_5 as (\n    select\n        cte_4.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_4.distance+1 as distance,\n        concat(cte_4.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_4.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_4.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_4\n            on cte_4.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_6 as (\n    select\n        cte_5.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_5.distance+1 as distance,\n        concat(cte_5.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_5.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_5.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_5\n            on cte_5.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_7 as (\n    select\n        cte_6.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_6.distance+1 as distance,\n        concat(cte_6.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_6.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_6.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_6\n            on cte_6.child_id = direct_relationships.direct_parent_id\n)\n\n\n, cte_8 as (\n    select\n        cte_7.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_7.distance+1 as distance,\n        concat(cte_7.path, array( direct_relationships.resource_name )) as path,\n        case\n            when\n                cte_7.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_7.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_7\n            on cte_7.child_id = direct_relationships.direct_parent_id\n)\n\n\n, all_relationships_unioned as (\n    \n    select * from cte_0\n    union all\n    \n    select * from cte_1\n    union all\n    \n    select * from cte_2\n    union all\n    \n    select * from cte_3\n    union all\n    \n    select * from cte_4\n    union all\n    \n    select * from cte_5\n    union all\n    \n    select * from cte_6\n    union all\n    \n    select * from cte_7\n    union all\n    \n    select * from cte_8\n    \n    \n)\n\n, resource_info as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        cast(all_relationships_unioned.distance as integer) as distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_all_graph_resources": {"database": "dbt_demo", "schema": "dbt_dev", "name": "int_all_graph_resources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_graph_resources.sql", "original_file_path": "models/marts/core/int_all_graph_resources.sql", "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_graph_resources"], "alias": "int_all_graph_resources", "checksum": {"name": "sha256", "checksum": "a80c8d9fa1b406dbb66865cd042d90b2677c20717f0cfc9e7c132a1ff97899fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395224.634202, "relation_name": "`dbt_demo`.`dbt_dev`.`int_all_graph_resources`", "raw_code": "-- one row for each resource in the graph\n\n{# flatten the sets of permissable primary key test sets to one level for later iteration #}\n{%- set test_macro_list = [] %}\n{%- for test_set in var('primary_key_test_macros') -%}\n      {%- for test in test_set %}\n        {%- do test_macro_list.append(test) -%}\n      {%- endfor %}\n{%- endfor -%}\n{%- do test_macro_list.append(\"dbt.test_unique\") -%}\n{%- set test_macro_set = set_strict(test_macro_list) -%}\n\n{%- set quoted_directory_pattern = wrap_string_with_quotes(get_directory_pattern()) %}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt.concat(['source_name',\"'.'\",'name']) }}\n            when coalesce(version, '') != '' then {{ dbt.concat(['name',\"'.v'\",'version']) }} \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ get_dbtreplace_directory_pattern() }} as directory_path,\n        regexp_replace(file_path,'.*{{ get_regexp_directory_pattern() }}','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        {% for test in test_macro_set %}\n        unioned_with_calc.macro_dependencies like '%macro.{{ test }}%' and unioned_with_calc.resource_type = 'test' as is_{{ test.split('.')[1] }},  \n        {% endfor %}\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "language": "sql", "refs": [{"name": "stg_nodes", "package": null, "version": null}, {"name": "stg_exposures", "package": null, "version": null}, {"name": "stg_metrics", "package": null, "version": null}, {"name": "stg_sources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_utils.union_relations", "macro.dbt.concat", "macro.dbt.split_part", "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro.dbt.position"], "nodes": ["model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_sources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_naming_convention_folders"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_graph_resources.sql", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`stg_nodes`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`stg_nodes`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`stg_exposures`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`stg_exposures`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`stg_metrics`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`stg_metrics`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt_demo`.`dbt_dev`.`stg_sources`' as string) as _dbt_source_relation,\n\n                \n\n            from `dbt_demo`.`dbt_dev`.`stg_sources`\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from `dbt_demo`.`dbt_dev`.`stg_naming_convention_prefixes`\n), \n\nnaming_convention_folders as (\n    select * from `dbt_demo`.`dbt_dev`.`stg_naming_convention_folders`\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  concat(source_name, '.', name)\n            when coalesce(version, '') != '' then concat(name, '.v', version) \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n        split(\n            name,\n            \n\n        -- escape if starts with a special character\n        case when regexp_extract('_', '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', '_')\n            else '_' end\n\n    \n            )[(0)]\n\n        ||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        concat(\n  \n    '/'\n  \n, naming_convention_folders.folder_name_value, \n  \n    '/'\n  \n) in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        concat(\n  \n    '/'\n  \n, naming_convention_folders.folder_name_value, \n  \n    '/'\n  \n) in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_multiple_sources_joined": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_multiple_sources_joined", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_multiple_sources_joined.sql", "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql", "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_multiple_sources_joined"], "alias": "fct_multiple_sources_joined", "checksum": {"name": "sha256", "checksum": "83eb58c45643770dc386ca0180ec384ff959fced06a692d39edb11670d6a59d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each instance where a model references more than one source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.047502, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_multiple_sources_joined`", "raw_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt.listagg(\n            measure='parent', \n            delimiter_text=\"', '\", \n            order_by_clause='order by parent' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_multiple_sources_joined.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n         array_join( collect_list(parent) , ', ')  as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_root_models": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_root_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_root_models.sql", "original_file_path": "models/marts/dag/fct_root_models.sql", "unique_id": "model.dbt_project_evaluator.fct_root_models", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_root_models"], "alias": "fct_root_models", "checksum": {"name": "sha256", "checksum": "dcb918a48c00b83c29289a874867c20f5b1d6dbf162cb2d1cc35922a34e8d89b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each model with 0 direct parents.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.047907, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_root_models`", "raw_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_root_models.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_fanout": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_model_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_model_fanout.sql", "original_file_path": "models/marts/dag/fct_model_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_model_fanout"], "alias": "fct_model_fanout", "checksum": {"name": "sha256", "checksum": "617945b46280b6270d8f5f0cd39cd82ca2024b09a850e197f348b6b576df177f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.047297, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_model_fanout`", "raw_code": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        {{ dbt.listagg(\n            measure = 'child', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout_agg\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_model_fanout.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n         array_join( collect_list(child) , ', ')  as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_unused_sources": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_unused_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_unused_sources.sql", "original_file_path": "models/marts/dag/fct_unused_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_unused_sources"], "alias": "fct_unused_sources", "checksum": {"name": "sha256", "checksum": "88929ec8435e38da76fe33265736b8599deca039cb881c0e3e1c1bc9416047df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each source with 0 children.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.0487292, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_unused_sources`", "raw_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_unused_sources.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_duplicate_sources": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_duplicate_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_duplicate_sources.sql", "original_file_path": "models/marts/dag/fct_duplicate_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_duplicate_sources"], "alias": "fct_duplicate_sources", "checksum": {"name": "sha256", "checksum": "eef33cda125cf6de675c136a274c52dc87afd8e0175e85c887349a11d9a872e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each source database location with more than one node in your dbt project.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.0468538, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_duplicate_sources`", "raw_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then {{ dbt.concat([\"schema\", \"'.'\", \"identifier\"]) }} \n            else {{ dbt.concat([\"database\", \"'.'\", \"schema\", \"'.'\", \"identifier\"]) }} \n        end as source_db_location \n    from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        {{ dbt.listagg(\n            measure = 'resource_name', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by resource_name' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.concat", "macro.dbt.listagg"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_duplicate_sources.sql", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then concat(schema, '.', identifier) \n            else concat(database, '.', schema, '.', identifier) \n        end as source_db_location \n    from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n         array_join( collect_list(resource_name) , ', ')  as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_source_fanout": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_source_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_source_fanout.sql", "original_file_path": "models/marts/dag/fct_source_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_source_fanout"], "alias": "fct_source_fanout", "checksum": {"name": "sha256", "checksum": "14d519f1f662fce3c381f4605765d18e1543ba1dfd157e304b74c0cb59a918b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.048109, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_source_fanout`", "raw_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt.listagg(\n            measure='child', \n            delimiter_text=\"', '\", \n            order_by_clause='order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_source_fanout.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n         array_join( collect_list(child) , ', ')  as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_direct_join_to_source": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_direct_join_to_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_direct_join_to_source.sql", "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql", "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_direct_join_to_source"], "alias": "fct_direct_join_to_source", "checksum": {"name": "sha256", "checksum": "41902b1a35281f5f48189c1e3a1f0beb3ecb5512f426bb46e1b7a201b7b59264"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.04598, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_direct_join_to_source`", "raw_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_direct_join_to_source.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_staging_dependent_on_staging", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_staging.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_staging"], "alias": "fct_staging_dependent_on_staging", "checksum": {"name": "sha256", "checksum": "3ec2cb7f884acdde9d1753cc3924ea1ee40540b92cb88524b5fe99f40e7707d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.048529, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_staging_dependent_on_staging`", "raw_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_staging.sql", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_too_many_joins": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_too_many_joins", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_too_many_joins.sql", "original_file_path": "models/marts/dag/fct_too_many_joins.sql", "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_too_many_joins"], "alias": "fct_too_many_joins", "checksum": {"name": "sha256", "checksum": "268794bb478818da56cc20dbc2ac8376471088640e89fbeee8869ce7aaaa7c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This returns models referencing more than 7 or more dependencies. Per dbt best practices, models should be designed in a way that depend on fewer than 7 joins.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.0493178, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_too_many_joins`", "raw_code": "with all_dag_relationships as (\n    select\n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as {{ dbt.type_int() }}) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= {{ var('too_many_joins_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_too_many_joins.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_staging_dependent_on_marts_or_intermediate", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_marts_or_intermediate"], "alias": "fct_staging_dependent_on_marts_or_intermediate", "checksum": {"name": "sha256", "checksum": "c8d013ff07426f83d621211293096386fdc508365316947e94bdea3708c786e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.0483148, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_staging_dependent_on_marts_or_intermediate`", "raw_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_marts_or_intermediate_dependent_on_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_marts_or_intermediate_dependent_on_source"], "alias": "fct_marts_or_intermediate_dependent_on_source", "checksum": {"name": "sha256", "checksum": "22b5ae735f394581929a7a1e5c7eaa3adfb844b135cd9da9f1cd645b8365a48b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.047081, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_marts_or_intermediate_dependent_on_source`", "raw_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_hard_coded_references": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_hard_coded_references", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_hard_coded_references.sql", "original_file_path": "models/marts/dag/fct_hard_coded_references.sql", "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_hard_coded_references"], "alias": "fct_hard_coded_references", "checksum": {"name": "sha256", "checksum": "75f6517e5ebea4adde2bfd5973fb6dd14df7b5843bc1d6453ed51b160d729e8a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each model that has hard coded references.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.049124, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_hard_coded_references`", "raw_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_hard_coded_references.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_rejoining_of_upstream_concepts", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql", "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_rejoining_of_upstream_concepts"], "alias": "fct_rejoining_of_upstream_concepts", "checksum": {"name": "sha256", "checksum": "d6ad27a1391ac57dba3dac57a29aa65b71d9210ee8b97ba45f9148bb234c9216"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct children (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1733395225.0477052, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_rejoining_of_upstream_concepts`", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_missing_primary_key_tests": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_missing_primary_key_tests", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_missing_primary_key_tests.sql", "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql", "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_missing_primary_key_tests"], "alias": "fct_missing_primary_key_tests", "checksum": {"name": "sha256", "checksum": "cdee51203c863278be6de20d74ca22fab3afd2c888402a5f06b167fd47670459"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "this model has one record for every model without unique and not null tests configured on a single column", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.074065, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_missing_primary_key_tests`", "raw_code": "with\n\ntests as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type in\n    (\n        {% for resource_type in var('enforced_primary_key_node_types') %}'{{ resource_type }}'{% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_missing_primary_key_tests.sql", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from `dbt_demo`.`dbt_dev`.`int_model_test_summary`\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_sources_without_freshness": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_sources_without_freshness", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_sources_without_freshness.sql", "original_file_path": "models/marts/tests/fct_sources_without_freshness.sql", "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_sources_without_freshness"], "alias": "fct_sources_without_freshness", "checksum": {"name": "sha256", "checksum": "124b06dbe86fbaa01ffa291a31950af254badef381a6df23832653fd5ca396d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each source that does not have a source freshness defined, either as a warn or an error", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.074275, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_sources_without_freshness`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_sources_without_freshness.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_test_coverage": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_test_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_test_coverage.sql", "original_file_path": "models/marts/tests/fct_test_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_test_coverage"], "alias": "fct_test_coverage", "checksum": {"name": "sha256", "checksum": "544e9cd5833992cdf8f17e2f2e9b951ea1304bef25e5bddfbb74a5c96ba063c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "this model shows a few key metrics related to how well tested your dbt project is.", "columns": {"test_to_model_ratio": {"name": "test_to_model_ratio", "description": "the total number of tests in the project divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_coverage_pct": {"name": "test_coverage_pct", "description": "the number of models in the project with at least one test configured divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.073836, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_test_coverage`", "raw_code": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as {{ dbt.type_boolean() }}) as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(number_of_tests_on_model) as {{ dbt.type_int() }}) as total_tests,\n        sum(cast(is_tested_model as {{ dbt.type_int() }})) as tested_models,\n        round(sum(cast(is_tested_model as {{ dbt.type_int() }})) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_tested_\" ~ model_type ~ \"_model) * 100.0\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_test_coverage.sql", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from `dbt_demo`.`dbt_dev`.`int_model_test_summary`\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        current_timestamp() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_model_test_summary": {"database": "dbt_demo", "schema": "dbt_dev", "name": "int_model_test_summary", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/intermediate/int_model_test_summary.sql", "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql", "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "fqn": ["dbt_project_evaluator", "marts", "tests", "intermediate", "int_model_test_summary"], "alias": "int_model_test_summary", "checksum": {"name": "sha256", "checksum": "8991efb264e8aa37512a3d1509ab8b54bfe6dadf6191a954b6e9ac75af574103"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395224.707211, "relation_name": "`dbt_demo`.`dbt_dev`.`int_model_test_summary`", "raw_code": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,\n        {%- for test_set in var('primary_key_test_macros') %}\n            {%- set outer_loop = loop -%}\n        count(distinct case when \n                {%- for test in test_set %} \n                all_graph_resources.is_{{ test.split('.')[1] }} {%- if not loop.last %} or {% endif %} \n                {%- endfor %}\n            then relationships.resource_id else null end\n        ) as primary_key_method_{{ outer_loop.index }}_count,\n        {%- endfor %}\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from {{ ref('base_node_columns') }}\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    {%- for test_set in var('primary_key_test_macros') %}\n                        {%- set compare_value = test_set | length %}\n                    primary_key_method_{{ loop.index }}_count >= {{ compare_value}}\n                        or\n                    {%- endfor %}\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as {{ dbt.type_boolean() }}) as is_primary_key_tested,\n        cast(sum(tests_count) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(sum(constraints_count) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as {{ dbt.type_boolean()}}) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "base_node_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_int"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.base_node_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/intermediate/int_model_test_summary.sql", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n),\n\nrelationships as (\n    select * from `dbt_demo`.`dbt_dev`.`int_direct_relationships`\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from `dbt_demo`.`dbt_dev`.`base_node_columns`\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_public_models": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_undocumented_public_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_undocumented_public_models.sql", "original_file_path": "models/marts/governance/fct_undocumented_public_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_undocumented_public_models"], "alias": "fct_undocumented_public_models", "checksum": {"name": "sha256", "checksum": "ee476e5f468028cb08f6d0f29adc42829534800da3b524adc2f87c04bd76cef5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have both a model level description, and a description for each of the columns in the model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.080631, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_undocumented_public_models`", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_undocumented_public_models.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_exposures_dependent_on_private_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_exposures_dependent_on_private_models.sql", "original_file_path": "models/marts/governance/fct_exposures_dependent_on_private_models.sql", "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_exposures_dependent_on_private_models"], "alias": "fct_exposures_dependent_on_private_models", "checksum": {"name": "sha256", "checksum": "b08d3667b3752cd9b0dd8981ec7e55af29c109e2d590c65ab84b77cb213d5a38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each direct relationship between a parent resource and a downstream exposure where the parent resource is not a public model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.080849, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_exposures_dependent_on_private_models`", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_exposures_dependent_on_private_models.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_public_models_without_contract": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_public_models_without_contract", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_public_models_without_contract.sql", "original_file_path": "models/marts/governance/fct_public_models_without_contract.sql", "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_public_models_without_contract"], "alias": "fct_public_models_without_contract", "checksum": {"name": "sha256", "checksum": "76f602dad9bd99ea230d3ecfe7de6503d1d5b0e20ddd1b9f0609d2bfe34244c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have an enforced contract", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.0804029, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_public_models_without_contract`", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_public_models_without_contract.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_exposure_parents_materializations": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_exposure_parents_materializations", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_exposure_parents_materializations.sql", "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql", "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_exposure_parents_materializations"], "alias": "fct_exposure_parents_materializations", "checksum": {"name": "sha256", "checksum": "5e3c973f43ea703994fa8cfc427ec015dd5f23441d4592ef023e2174c241c658"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.048927, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_exposure_parents_materializations`", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_exposure_parents_materializations.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_chained_views_dependencies": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_chained_views_dependencies", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_chained_views_dependencies.sql", "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql", "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_chained_views_dependencies"], "alias": "fct_chained_views_dependencies", "checksum": {"name": "sha256", "checksum": "aef70a6fecdec6f947f788d52b889e9a7e5e2067e87769c94c30c56d956f2af9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.0861561, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_chained_views_dependencies`", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > {{ var('chained_views_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}\n\norder by distance desc", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_chained_views_dependencies.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_source_directories": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_source_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_source_directories.sql", "original_file_path": "models/marts/structure/fct_source_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_source_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_source_directories"], "alias": "fct_source_directories", "checksum": {"name": "sha256", "checksum": "6f8a1d0d64c5cc3b0a40eef7ab06c914651e74da6c2e52b151e9ade07aee03ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.088717, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_source_directories`", "raw_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n{% set directory_pattern = get_directory_pattern() %}\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models{{ directory_pattern  }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || source_name || '{{ directory_pattern }}' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_source_directories.sql", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_test_directories": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_test_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_test_directories.sql", "original_file_path": "models/marts/structure/fct_test_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_test_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_test_directories"], "alias": "fct_test_directories", "checksum": {"name": "sha256", "checksum": "036ab595e5844a2e326b03b6f0341dd10f37dbc6250f99397cf0fc30cdcf44d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.088924, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_test_directories`", "raw_code": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_test_directories.sql", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from `dbt_demo`.`dbt_dev`.`int_direct_relationships`\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_naming_conventions": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_model_naming_conventions", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_naming_conventions.sql", "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql", "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_naming_conventions"], "alias": "fct_model_naming_conventions", "checksum": {"name": "sha256", "checksum": "93b7e8f66021579d9cc67fdd8690de9110e2f03144e42ed2e0dd686e005250c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a model does NOT have the appropriate prefix.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.0885062, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_model_naming_conventions`", "raw_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt.listagg(\n            measure='prefix_value', \n            delimiter_text=\"', '\", \n            order_by_clause='order by prefix_value' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_naming_conventions.sql", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from `dbt_demo`.`dbt_dev`.`stg_naming_convention_prefixes`\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n         array_join( collect_list(prefix_value) , ', ')  as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_directories": {"database": "dbt_demo", "schema": "dbt_dev", "name": "fct_model_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_directories.sql", "original_file_path": "models/marts/structure/fct_model_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_model_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_directories"], "alias": "fct_model_directories", "checksum": {"name": "sha256", "checksum": "56c25e3298aecc9e1432b197cf0db47eeaf8c86a840d51dd70654a6662324342"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a model is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1733395225.088284, "relation_name": "`dbt_demo`.`dbt_dev`.`fct_model_directories`", "raw_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n{% set directory_pattern = get_directory_pattern() %}\n \nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models{{ directory_pattern }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || parent_source_name || '{{ directory_pattern }}' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '{{ directory_pattern }}...{{ directory_pattern }}' || folders.folder_name_value || '{{ directory_pattern }}...{{ directory_pattern }}' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}, {"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_directories.sql", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_graph_resources`\n    where not is_excluded\n),\n\nfolders as (\n    select * from `dbt_demo`.`dbt_dev`.`stg_naming_convention_folders`\n), \n\nall_dag_relationships as (\n    select * from `dbt_demo`.`dbt_dev`.`int_all_dag_relationships`\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {"database": "dbt_demo", "schema": "dbt_dev", "name": "dbt_project_evaluator_exceptions", "resource_type": "seed", "package_name": "dbt_project_evaluator", "path": "dbt_project_evaluator_exceptions.csv", "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv", "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "fqn": ["dbt_project_evaluator", "dbt_project_evaluator_exceptions"], "alias": "dbt_project_evaluator_exceptions", "checksum": {"name": "sha256", "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"fct_name": "string", "column_name": "string", "id_to_exclude": "string", "comment": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "List of exceptions not to be reported.", "columns": {"fct_name": {"name": "fct_name", "description": "Name of the fact table to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_name": {"name": "column_name", "description": "Column name from fct_name to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_to_exclude": {"name": "id_to_exclude", "description": "Values (or like pattern) to exclude for column_name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Field to document why a given exception is legitimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://seeds/seeds.yml", "build_path": null, "unrendered_config": {"column_types": {"fct_name": "string", "column_name": "string", "id_to_exclude": "string", "comment": "string"}}, "created_at": 1733395225.110403, "relation_name": "`dbt_demo`.`dbt_dev`.`dbt_project_evaluator_exceptions`", "raw_code": "", "root_path": "/Users/marcin.wojtyczka/Documents/repos/dbt_demo/dbt_packages/dbt_project_evaluator", "depends_on": {"macros": []}}, "test.dbt_demo.unique_zzz_game_details_game_id.80431e7218": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "unique_zzz_game_details_game_id", "resource_type": "test", "package_name": "dbt_demo", "path": "unique_zzz_game_details_game_id.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.unique_zzz_game_details_game_id.80431e7218", "fqn": ["dbt_demo", "models", "sql_model1", "unique_zzz_game_details_game_id"], "alias": "unique_zzz_game_details_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.8727622, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/unique_zzz_game_details_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_game_id.3b5747f905": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_game_id", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_game_id.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_game_id.3b5747f905", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_game_id"], "alias": "not_null_zzz_game_details_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.873631, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_home.a99d25edd5": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_home", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_home.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_home.a99d25edd5", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_home"], "alias": "not_null_zzz_game_details_home", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.874325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_home.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere home is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle.3771faef40": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle", "resource_type": "test", "package_name": "dbt_demo", "path": "accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle.3771faef40", "fqn": ["dbt_demo", "models", "sql_model1", "accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle"], "alias": "accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3"}, "created_at": 1733395224.875005, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3\") }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/accepted_values_zzz_game_detai_a03619ec6edbe71cee6bc995fd73e5a3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        home as value_field,\n        count(*) as n_records\n\n    from `dbt_demo`.`dbt_dev`.`zzz_game_details`\n    group by home\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amsterdam','San Francisco','Seattle'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Amsterdam", "San Francisco", "Seattle"], "column_name": "home", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_visitor.990a91372e": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_visitor", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_visitor.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_visitor.990a91372e", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_visitor"], "alias": "not_null_zzz_game_details_visitor", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.885267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_visitor.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visitor\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere visitor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visitor", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visitor", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle.f0c81c502d": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle", "resource_type": "test", "package_name": "dbt_demo", "path": "accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle.f0c81c502d", "fqn": ["dbt_demo", "models", "sql_model1", "accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle"], "alias": "accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272"}, "created_at": 1733395224.8859708, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272\") }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/accepted_values_zzz_game_detai_548b3e0a5a327f6865abfb6dba87b272.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        visitor as value_field,\n        count(*) as n_records\n\n    from `dbt_demo`.`dbt_dev`.`zzz_game_details`\n    group by visitor\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amsterdam','San Francisco','Seattle'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visitor", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Amsterdam", "San Francisco", "Seattle"], "column_name": "visitor", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_home_score.8c55a8fe39": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_home_score", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_home_score.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_home_score.8c55a8fe39", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_home_score"], "alias": "not_null_zzz_game_details_home_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.887858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_home_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_score\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere home_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_score", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_score", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_visitor_score.f31e89be7f": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_visitor_score", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_visitor_score.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_visitor_score.f31e89be7f", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_visitor_score"], "alias": "not_null_zzz_game_details_visitor_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.888531, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_visitor_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visitor_score\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere visitor_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visitor_score", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visitor_score", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_winner.7f08e737be": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_winner", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_winner.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_winner.7f08e737be", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_winner"], "alias": "not_null_zzz_game_details_winner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.8892028, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_winner.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect winner\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere winner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winner", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "winner", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle.344bd88c4c": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle", "resource_type": "test", "package_name": "dbt_demo", "path": "accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle.344bd88c4c", "fqn": ["dbt_demo", "models", "sql_model1", "accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle"], "alias": "accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca"}, "created_at": 1733395224.889876, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca\") }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/accepted_values_zzz_game_detai_b708d46a19b56a55e34c422000ef4dca.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        winner as value_field,\n        count(*) as n_records\n\n    from `dbt_demo`.`dbt_dev`.`zzz_game_details`\n    group by winner\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amsterdam','San Francisco','Seattle'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winner", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Amsterdam", "San Francisco", "Seattle"], "column_name": "winner", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_game_details_date.a9f3a56f68": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_game_details_date", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_game_details_date.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_game_details_date.a9f3a56f68", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_game_details_date"], "alias": "not_null_zzz_game_details_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.8916779, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_game_details_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt_demo`.`dbt_dev`.`zzz_game_details`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.zzz_game_details", "attached_node": "model.dbt_demo.zzz_game_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('zzz_game_details')) }}"}, "namespace": null}}, "test.dbt_demo.unique_zzz_win_loss_records_team.b989062105": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "unique_zzz_win_loss_records_team", "resource_type": "test", "package_name": "dbt_demo", "path": "unique_zzz_win_loss_records_team.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.unique_zzz_win_loss_records_team.b989062105", "fqn": ["dbt_demo", "models", "sql_model1", "unique_zzz_win_loss_records_team"], "alias": "unique_zzz_win_loss_records_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.892371, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/unique_zzz_win_loss_records_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.zzz_win_loss_records", "attached_node": "model.dbt_demo.zzz_win_loss_records", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('zzz_win_loss_records')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_win_loss_records_team.9a18f33f86": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_win_loss_records_team", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_win_loss_records_team.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_win_loss_records_team.9a18f33f86", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_win_loss_records_team"], "alias": "not_null_zzz_win_loss_records_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.893114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_win_loss_records_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.zzz_win_loss_records", "attached_node": "model.dbt_demo.zzz_win_loss_records", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('zzz_win_loss_records')) }}"}, "namespace": null}}, "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_", "resource_type": "test", "package_name": "dbt_demo", "path": "relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06", "fqn": ["dbt_demo", "models", "sql_model1", "relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_"], "alias": "relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8"}, "created_at": 1733395224.8937879, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8\") }}", "language": "sql", "refs": [{"name": "zzz_game_details", "package": null, "version": null}, {"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_game_details", "model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/relationships_zzz_win_loss_rec_cd92210ac432ba26693fcf56687882a8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select team as from_field\n    from `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\n    where team is not null\n),\n\nparent as (\n    select home as to_field\n    from `dbt_demo`.`dbt_dev`.`zzz_game_details`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.zzz_win_loss_records", "attached_node": "model.dbt_demo.zzz_win_loss_records", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('zzz_game_details')", "field": "home", "column_name": "team", "model": "{{ get_where_subquery(ref('zzz_win_loss_records')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_win_loss_records_wins.f6815357fe": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_win_loss_records_wins", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_win_loss_records_wins.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_win_loss_records_wins.f6815357fe", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_win_loss_records_wins"], "alias": "not_null_zzz_win_loss_records_wins", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.897184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_win_loss_records_wins.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect wins\nfrom `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\nwhere wins is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wins", "file_key_name": "models.zzz_win_loss_records", "attached_node": "model.dbt_demo.zzz_win_loss_records", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "wins", "model": "{{ get_where_subquery(ref('zzz_win_loss_records')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_zzz_win_loss_records_losses.82bf4ea601": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_zzz_win_loss_records_losses", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_zzz_win_loss_records_losses.sql", "original_file_path": "src/models/sql_model1/schemas.yml", "unique_id": "test.dbt_demo.not_null_zzz_win_loss_records_losses.82bf4ea601", "fqn": ["dbt_demo", "models", "sql_model1", "not_null_zzz_win_loss_records_losses"], "alias": "not_null_zzz_win_loss_records_losses", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395224.897861, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zzz_win_loss_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.zzz_win_loss_records"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model1/schemas.yml/not_null_zzz_win_loss_records_losses.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect losses\nfrom `dbt_demo`.`dbt_dev`.`zzz_win_loss_records`\nwhere losses is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "losses", "file_key_name": "models.zzz_win_loss_records", "attached_node": "model.dbt_demo.zzz_win_loss_records", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "losses", "model": "{{ get_where_subquery(ref('zzz_win_loss_records')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_my_python_model_carat.f3907157f1": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_my_python_model_carat", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_my_python_model_carat.sql", "original_file_path": "src/models/python_model1/config.yml", "unique_id": "test.dbt_demo.not_null_my_python_model_carat.f3907157f1", "fqn": ["dbt_demo", "models", "python_model1", "not_null_my_python_model_carat"], "alias": "not_null_my_python_model_carat", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.011178, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_python_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.my_python_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/python_model1/config.yml/not_null_my_python_model_carat.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect carat\nfrom `dbt_demo`.`dbt_dev`.`my_python_model`\nwhere carat is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "carat", "file_key_name": "models.my_python_model", "attached_node": "model.dbt_demo.my_python_model", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "carat", "model": "{{ get_where_subquery(ref('my_python_model')) }}"}, "namespace": null}}, "test.dbt_demo.unique_first_dbt_model_id.9dda05743e": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "unique_first_dbt_model_id", "resource_type": "test", "package_name": "dbt_demo", "path": "unique_first_dbt_model_id.sql", "original_file_path": "src/models/sql_model2/schemas.yml", "unique_id": "test.dbt_demo.unique_first_dbt_model_id.9dda05743e", "fqn": ["dbt_demo", "models", "sql_model2", "unique_first_dbt_model_id"], "alias": "unique_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.014666, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.first_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/schemas.yml/unique_first_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `dbt_demo`.`dbt_dev`.`first_dbt_model`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.first_dbt_model", "attached_node": "model.dbt_demo.first_dbt_model", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('first_dbt_model')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_first_dbt_model_id.bd8d25d061": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_first_dbt_model_id", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_first_dbt_model_id.sql", "original_file_path": "src/models/sql_model2/schemas.yml", "unique_id": "test.dbt_demo.not_null_first_dbt_model_id.bd8d25d061", "fqn": ["dbt_demo", "models", "sql_model2", "not_null_first_dbt_model_id"], "alias": "not_null_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.0153868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.first_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/schemas.yml/not_null_first_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt_demo`.`dbt_dev`.`first_dbt_model`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.first_dbt_model", "attached_node": "model.dbt_demo.first_dbt_model", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('first_dbt_model')) }}"}, "namespace": null}}, "test.dbt_demo.unique_second_dbt_model_id.3d7f6966a4": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "unique_second_dbt_model_id", "resource_type": "test", "package_name": "dbt_demo", "path": "unique_second_dbt_model_id.sql", "original_file_path": "src/models/sql_model2/schemas.yml", "unique_id": "test.dbt_demo.unique_second_dbt_model_id.3d7f6966a4", "fqn": ["dbt_demo", "models", "sql_model2", "unique_second_dbt_model_id"], "alias": "unique_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.016166, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "second_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.second_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/schemas.yml/unique_second_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `dbt_demo`.`dbt_dev`.`second_dbt_model`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.second_dbt_model", "attached_node": "model.dbt_demo.second_dbt_model", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('second_dbt_model')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_second_dbt_model_id.c791c712a2": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_second_dbt_model_id", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_second_dbt_model_id.sql", "original_file_path": "src/models/sql_model2/schemas.yml", "unique_id": "test.dbt_demo.not_null_second_dbt_model_id.c791c712a2", "fqn": ["dbt_demo", "models", "sql_model2", "not_null_second_dbt_model_id"], "alias": "not_null_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.016852, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "second_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.second_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/schemas.yml/not_null_second_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt_demo`.`dbt_dev`.`second_dbt_model`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.second_dbt_model", "attached_node": "model.dbt_demo.second_dbt_model", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('second_dbt_model')) }}"}, "namespace": null}}, "test.dbt_demo.not_null_second_dbt_model_amount_usd.28ae55e16f": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "not_null_second_dbt_model_amount_usd", "resource_type": "test", "package_name": "dbt_demo", "path": "not_null_second_dbt_model_amount_usd.sql", "original_file_path": "src/models/sql_model2/schemas.yml", "unique_id": "test.dbt_demo.not_null_second_dbt_model_amount_usd.28ae55e16f", "fqn": ["dbt_demo", "models", "sql_model2", "not_null_second_dbt_model_amount_usd"], "alias": "not_null_second_dbt_model_amount_usd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1733395225.017548, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "second_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_demo.second_dbt_model"]}, "compiled_path": "target/compiled/dbt_demo/src/models/sql_model2/schemas.yml/not_null_second_dbt_model_amount_usd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount_usd\nfrom `dbt_demo`.`dbt_dev`.`second_dbt_model`\nwhere amount_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amount_usd", "file_key_name": "models.second_dbt_model", "attached_node": "model.dbt_demo.second_dbt_model", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_usd", "model": "{{ get_where_subquery(ref('second_dbt_model')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "valid_documentation_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_documentation_coverage.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "fqn": ["dbt_project_evaluator", "marts", "documentation", "valid_documentation_coverage"], "alias": "valid_documentation_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1733395225.0358589, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_documentation_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_documentation_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/valid_documentation_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `dbt_demo`.`dbt_dev`.`fct_documentation_coverage`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "documentation_coverage_pct", "file_key_name": "models.fct_documentation_coverage", "attached_node": "model.dbt_project_evaluator.fct_documentation_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('documentation_coverage_target') }}", "column_name": "documentation_coverage_pct", "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_undocumented_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_models_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_models_"], "alias": "is_empty_fct_undocumented_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.040415, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_undocumented_models`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_undocumented_source_tables_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_source_tables_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_source_tables_"], "alias": "is_empty_fct_undocumented_source_tables_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.042722, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_source_tables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_source_tables"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_source_tables_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_undocumented_source_tables`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_source_tables", "attached_node": "model.dbt_project_evaluator.fct_undocumented_source_tables", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_source_tables')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_undocumented_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_sources_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_sources_"], "alias": "is_empty_fct_undocumented_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.0444522, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_undocumented_sources`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_sources", "attached_node": "model.dbt_project_evaluator.fct_undocumented_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_direct_join_to_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_direct_join_to_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_direct_join_to_source_"], "alias": "is_empty_fct_direct_join_to_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.049738, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_direct_join_to_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_direct_join_to_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_direct_join_to_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_direct_join_to_source`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_direct_join_to_source", "attached_node": "model.dbt_project_evaluator.fct_direct_join_to_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_duplicate_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_duplicate_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_duplicate_sources_"], "alias": "is_empty_fct_duplicate_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.0515578, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_duplicate_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_duplicate_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_duplicate_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_duplicate_sources`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_duplicate_sources", "attached_node": "model.dbt_project_evaluator.fct_duplicate_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_duplicate_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_marts_or_intermediate_dependent_on_source_"], "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.053281, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_marts_or_intermediate_dependent_on_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_marts_or_intermediate_dependent_on_source`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source", "attached_node": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_model_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_model_fanout_"], "alias": "is_empty_fct_model_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.055008, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_model_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_model_fanout`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_fanout", "attached_node": "model.dbt_project_evaluator.fct_model_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_multiple_sources_joined_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_multiple_sources_joined_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_multiple_sources_joined_"], "alias": "is_empty_fct_multiple_sources_joined_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.056819, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_multiple_sources_joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_multiple_sources_joined"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_multiple_sources_joined_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_multiple_sources_joined`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_multiple_sources_joined", "attached_node": "model.dbt_project_evaluator.fct_multiple_sources_joined", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_rejoining_of_upstream_concepts_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_rejoining_of_upstream_concepts_"], "alias": "is_empty_fct_rejoining_of_upstream_concepts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.058559, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_rejoining_of_upstream_concepts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_rejoining_of_upstream_concepts_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_rejoining_of_upstream_concepts`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_rejoining_of_upstream_concepts", "attached_node": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_root_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_root_models_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_root_models_"], "alias": "is_empty_fct_root_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.060291, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_root_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_root_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_root_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_root_models`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_root_models", "attached_node": "model.dbt_project_evaluator.fct_root_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_root_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_source_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_source_fanout_"], "alias": "is_empty_fct_source_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.061907, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_source_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_source_fanout`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_fanout", "attached_node": "model.dbt_project_evaluator.fct_source_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_marts_or_intermediate_"], "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.063623, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_marts_or_intermediate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_staging_dependent_on_marts_or_intermediate`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_staging_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_staging_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_staging_"], "alias": "is_empty_fct_staging_dependent_on_staging_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.065334, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_staging", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_staging_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_staging_dependent_on_staging`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_staging", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_unused_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_unused_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_unused_sources_"], "alias": "is_empty_fct_unused_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.066942, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_unused_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_unused_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_unused_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_unused_sources`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_unused_sources", "attached_node": "model.dbt_project_evaluator.fct_unused_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_exposure_parents_materializations_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposure_parents_materializations_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_exposure_parents_materializations_"], "alias": "is_empty_fct_exposure_parents_materializations_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.06864, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposure_parents_materializations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_exposure_parents_materializations_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_exposure_parents_materializations`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposure_parents_materializations", "attached_node": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_hard_coded_references_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_hard_coded_references_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_hard_coded_references_"], "alias": "is_empty_fct_hard_coded_references_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.070328, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_hard_coded_references", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_hard_coded_references"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_hard_coded_references_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_hard_coded_references`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_hard_coded_references", "attached_node": "model.dbt_project_evaluator.fct_hard_coded_references", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_hard_coded_references')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_too_many_joins_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_too_many_joins_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_too_many_joins_"], "alias": "is_empty_fct_too_many_joins_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.071925, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_too_many_joins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_too_many_joins"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_too_many_joins_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_too_many_joins`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_too_many_joins", "attached_node": "model.dbt_project_evaluator.fct_too_many_joins", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_too_many_joins')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "valid_test_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_test_coverage.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "fqn": ["dbt_project_evaluator", "marts", "tests", "valid_test_coverage"], "alias": "valid_test_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1733395225.074688, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/valid_test_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `dbt_demo`.`dbt_dev`.`fct_test_coverage`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_coverage_pct", "file_key_name": "models.fct_test_coverage", "attached_node": "model.dbt_project_evaluator.fct_test_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('test_coverage_target') }}", "column_name": "test_coverage_pct", "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_missing_primary_key_tests_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_missing_primary_key_tests_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_missing_primary_key_tests_"], "alias": "is_empty_fct_missing_primary_key_tests_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.076854, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_missing_primary_key_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_missing_primary_key_tests_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_missing_primary_key_tests`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_missing_primary_key_tests", "attached_node": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_sources_without_freshness_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_sources_without_freshness_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_sources_without_freshness_"], "alias": "is_empty_fct_sources_without_freshness_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.078892, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sources_without_freshness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_sources_without_freshness"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_sources_without_freshness_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_sources_without_freshness`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_sources_without_freshness", "attached_node": "model.dbt_project_evaluator.fct_sources_without_freshness", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_sources_without_freshness')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_public_models_without_contract_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_public_models_without_contract_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_public_models_without_contract_"], "alias": "is_empty_fct_public_models_without_contract_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.081253, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_public_models_without_contract", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_public_models_without_contract"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_public_models_without_contract_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_public_models_without_contract`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_public_models_without_contract", "attached_node": "model.dbt_project_evaluator.fct_public_models_without_contract", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_public_models_without_contract')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_undocumented_public_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_public_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_undocumented_public_models_"], "alias": "is_empty_fct_undocumented_public_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.082979, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_public_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_public_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_undocumented_public_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_undocumented_public_models`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_public_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_public_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_public_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_exposures_dependent_on_private_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposures_dependent_on_private_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_exposures_dependent_on_private_models_"], "alias": "is_empty_fct_exposures_dependent_on_private_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.0846689, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposures_dependent_on_private_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_exposures_dependent_on_private_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_exposures_dependent_on_private_models`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposures_dependent_on_private_models", "attached_node": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposures_dependent_on_private_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_chained_views_dependencies_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_chained_views_dependencies_.sql", "original_file_path": "models/marts/performance/performance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "fqn": ["dbt_project_evaluator", "marts", "performance", "is_empty_fct_chained_views_dependencies_"], "alias": "is_empty_fct_chained_views_dependencies_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.086572, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_chained_views_dependencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_chained_views_dependencies"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/performance.yml/is_empty_fct_chained_views_dependencies_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_chained_views_dependencies`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_chained_views_dependencies", "attached_node": "model.dbt_project_evaluator.fct_chained_views_dependencies", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_model_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_directories_"], "alias": "is_empty_fct_model_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.089338, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_model_directories`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_directories", "attached_node": "model.dbt_project_evaluator.fct_model_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_model_naming_conventions_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_naming_conventions_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_naming_conventions_"], "alias": "is_empty_fct_model_naming_conventions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.09105, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_naming_conventions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_naming_conventions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_naming_conventions_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_model_naming_conventions`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_naming_conventions", "attached_node": "model.dbt_project_evaluator.fct_model_naming_conventions", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_source_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_source_directories_"], "alias": "is_empty_fct_source_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.092737, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_source_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_source_directories`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_directories", "attached_node": "model.dbt_project_evaluator.fct_source_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {"database": "dbt_demo", "schema": "dbt_dev_dbt_test__audit", "name": "is_empty_fct_test_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_test_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_test_directories_"], "alias": "is_empty_fct_test_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1733395225.094346, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_test_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_test_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from `dbt_demo`.`dbt_dev`.`fct_test_directories`\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_test_directories", "attached_node": "model.dbt_project_evaluator.fct_test_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_test_directories')) }}"}, "namespace": null}}}, "sources": {"source.dbt_demo.raw.diamonds": {"database": "hive_metastore", "schema": "default", "name": "diamonds", "resource_type": "source", "package_name": "dbt_demo", "path": "src/models/sql_model1/sources.yml", "original_file_path": "src/models/sql_model1/sources.yml", "unique_id": "source.dbt_demo.raw.diamonds", "fqn": ["dbt_demo", "sql_model1", "raw", "diamonds"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "diamonds", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`hive_metastore`.`default`.`diamonds`", "created_at": 1733395225.112134}}, "macros": {"macro.dbt_demo.cents_to_dollars": {"name": "cents_to_dollars", "resource_type": "macro", "package_name": "dbt_demo", "path": "src/macros/centrs_to_dollars.sql", "original_file_path": "src/macros/centrs_to_dollars.sql", "unique_id": "macro.dbt_demo.cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, scale=2) %}\n    ({{ column_name }} / 100)::numeric(16, {{ scale }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2201998, "supported_languages": null}, "macro.dbt_databricks.materialization_materialized_view_databricks": {"name": "materialization_materialized_view_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialization_materialized_view_databricks", "macro_sql": "{% materialization materialized_view, adapter = 'databricks' %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ materialized_view_execute_no_op(target_relation) }}\n    {% else %}\n        {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_databricks.materialized_view_get_build_sql", "macro.dbt_databricks.materialized_view_execute_no_op", "macro.dbt_databricks.materialized_view_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.223199, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, None, None) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = \"\" %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt_databricks.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt_databricks.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2243478, "supported_languages": null}, "macro.dbt_databricks.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.224549, "supported_languages": null}, "macro.dbt_databricks.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {%- if build_sql is string %}\n        {% call statement(name=\"main\") %}\n            {{ build_sql }}\n        {% endcall %}\n    {%- else %}\n        {%- for sql in build_sql %}\n            {% call statement(name=\"main\") %}\n                {{ sql }}\n            {% endcall %}\n        {% endfor %}\n    {% endif %}\n\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model, for_relation=False) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.225281, "supported_languages": null}, "macro.dbt_databricks.materialization_view_databricks": {"name": "materialization_view_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_databricks.materialization_view_databricks", "macro_sql": "{% materialization view, adapter='databricks' -%}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n  {% set tags = config.get('databricks_tags') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {%- do apply_tags(target_relation, tags) -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.apply_tags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2267258, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialization_table_databricks": {"name": "materialization_table_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_databricks.materialization_table_databricks", "macro_sql": "{% materialization table, adapter = 'databricks', supported_languages=['sql', 'python'] %}\n  {{ log(\"MATERIALIZING TABLE\") }}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- set tags = config.get('databricks_tags') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation and (not (old_relation.is_delta and config.get('file_format', default='delta') == 'delta')) or (old_relation.is_materialized_view or old_relation.is_streaming_table) -%}\n    {{ adapter.drop_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n  {% if language==\"python\" %}\n    {% do apply_tblproperties(target_relation, tblproperties) %}\n  {% endif %}\n  {%- do apply_tags(target_relation, tags) -%}\n\n  {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {% do optimize(target_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.apply_tblproperties", "macro.dbt_databricks.apply_tags", "macro.dbt.persist_docs", "macro.dbt_databricks.persist_constraints", "macro.dbt_databricks.optimize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.229003, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.databricks_build_snapshot_staging_table": {"name": "databricks_build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_databricks.databricks_build_snapshot_staging_table", "macro_sql": "{% macro databricks_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=target_relation.schema,\n                                               database=target_relation.database,\n                                               type='view') -%}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        create or replace view {{ tmp_relation }}\n        as\n            {{ select }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2348459, "supported_languages": null}, "macro.dbt_databricks.materialization_snapshot_databricks": {"name": "materialization_snapshot_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_databricks.materialization_snapshot_databricks", "macro_sql": "{% materialization snapshot, adapter='databricks' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'delta') -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = databricks__get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table',\n          needs_information=True) -%}\n\n  {%- if file_format not in ['delta', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n      {% call statement('main') %}\n          {{ final_sql }}\n      {% endcall %}\n\n      {% do persist_docs(target_relation, model, for_relation=False) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% if target_relation.database is none %}\n          {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n      {% else %}\n          {% set staging_table = databricks_build_snapshot_staging_table(strategy, sql, target_relation) %}\n      {% endif %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% call statement_with_staging_table('main', staging_table) %}\n          {{ final_sql }}\n      {% endcall %}\n\n      {% do persist_docs(target_relation, model, for_relation=True) %}\n\n  {% endif %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt_databricks.databricks_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt_databricks.statement_with_staging_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.238135, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialization_streaming_table_databricks": {"name": "materialization_streaming_table_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.materialization_streaming_table_databricks", "macro_sql": "{% materialization streaming_table, adapter='databricks' %}\n  {% set existing_relation = load_cached_relation(this) %}\n  {% set target_relation = this.incorporate(type=this.StreamingTable) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% set build_sql = streaming_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ streaming_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ streaming_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_databricks.streaming_table_get_build_sql", "macro.dbt_databricks.streaming_table_execute_no_op", "macro.dbt_databricks.streaming_table_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.241001, "supported_languages": ["sql"]}, "macro.dbt_databricks.streaming_table_get_build_sql": {"name": "streaming_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.streaming_table_get_build_sql", "macro_sql": "{% macro streaming_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_streaming_table_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_streaming_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_streaming_table_configuration_changes(existing_relation, config) %}\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_streaming_table(target_relation, sql) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_streaming_table_as_sql(target_relation, configuration_changes, sql, existing_relation, None, None) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = \"\" %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_databricks.get_create_streaming_table_as_sql", "macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_streaming_table_configuration_changes", "macro.dbt_databricks.refresh_streaming_table", "macro.dbt_databricks.get_alter_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.242048, "supported_languages": null}, "macro.dbt_databricks.streaming_table_execute_no_op": {"name": "streaming_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.streaming_table_execute_no_op", "macro_sql": "{% macro streaming_table_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.242243, "supported_languages": null}, "macro.dbt_databricks.streaming_table_execute_build_sql": {"name": "streaming_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.streaming_table_execute_build_sql", "macro_sql": "{% macro streaming_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {%- if build_sql is string %}\n        {% call statement(name=\"main\") %}\n            {{ build_sql }}\n        {% endcall %}\n    {%- else %}\n        {%- for sql in build_sql %}\n            {% call statement(name=\"main\") %}\n                {{ sql }}\n            {% endcall %}\n        {% endfor %}\n    {% endif %}\n\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model, for_relation=False) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.242932, "supported_languages": null}, "macro.dbt_databricks.databricks__can_clone_table": {"name": "databricks__can_clone_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.databricks__can_clone_table", "macro_sql": "{% macro databricks__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.24448, "supported_languages": null}, "macro.dbt_databricks.databricks__create_or_replace_clone": {"name": "databricks__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.databricks__create_or_replace_clone", "macro_sql": "{% macro databricks__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n    table {{ this_relation }}\n    shallow clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.244593, "supported_languages": null}, "macro.dbt_databricks.materialization_clone_databricks": {"name": "materialization_clone_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.materialization_clone_databricks", "macro_sql": "\n\n{%- materialization clone, adapter='databricks' -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n  {% endif %}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.246273, "supported_languages": ["sql"]}, "macro.dbt_databricks.dbt_databricks_validate_get_file_format": {"name": "dbt_databricks_validate_get_file_format", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_databricks.dbt_databricks_validate_get_file_format", "macro_sql": "{% macro dbt_databricks_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.247234, "supported_languages": null}, "macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy": {"name": "dbt_databricks_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_databricks_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'merge', 'replace_where', 'append', 'insert_overwrite'\n  {%- endset %}\n\n  {% set invalid_delta_only_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta'\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via warehouse\n    Use the 'merge' or 'replace_where' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite', 'replace_where'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_delta_only_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'replace_where' and file_format not in ['delta'] %}\n      {% do exceptions.raise_compiler_error(invalid_delta_only_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.247941, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_default_sql": {"name": "databricks__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_default_sql", "macro_sql": "{% macro databricks__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.25131, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_append_sql": {"name": "databricks__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_append_sql", "macro_sql": "{% macro databricks__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"temp_relation\"], arg_dict[\"target_relation\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.251477, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_replace_where_sql": {"name": "databricks__get_incremental_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_replace_where_sql", "macro_sql": "{% macro databricks__get_incremental_replace_where_sql(arg_dict) %}\n  {% do return(get_replace_where_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_where_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2516081, "supported_languages": null}, "macro.dbt_databricks.get_incremental_replace_where_sql": {"name": "get_incremental_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_incremental_replace_where_sql", "macro_sql": "{% macro get_incremental_replace_where_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_replace_where_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_replace_where_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.251764, "supported_languages": null}, "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql": {"name": "databricks__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql", "macro_sql": "{% macro databricks__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n    {{ return(get_insert_overwrite_sql(source, target)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.251924, "supported_languages": null}, "macro.dbt_databricks.get_insert_overwrite_sql": {"name": "get_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert overwrite table {{ target_relation }}\n    {{ partition_cols(label=\"partition\") }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.252223, "supported_languages": null}, "macro.dbt_databricks.get_replace_where_sql": {"name": "get_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_replace_where_sql", "macro_sql": "{% macro get_replace_where_sql(args_dict) -%}\n    {%- set predicates = args_dict['incremental_predicates'] -%}\n    {%- set target_relation = args_dict['target_relation'] -%}\n    {%- set temp_relation = args_dict['temp_relation'] -%}\n\n    insert into {{ target_relation }}\n    {% if predicates %}\n      {% if predicates is sequence and predicates is not string %}\n    replace where {{ predicates | join(' and ') }}\n      {% else %}\n    replace where {{ predicates }}\n      {% endif %}\n    {% endif %}\n    table {{ temp_relation }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.252641, "supported_languages": null}, "macro.dbt_databricks.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n    {%- set source_columns = adapter.get_columns_in_relation(source_relation) | map(attribute=\"quoted\") | list -%}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) | map(attribute=\"quoted\") | list -%}\n    {{ insert_into_sql_impl(target_relation, dest_columns, source_relation, source_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.insert_into_sql_impl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.252959, "supported_languages": null}, "macro.dbt_databricks.insert_into_sql_impl": {"name": "insert_into_sql_impl", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.insert_into_sql_impl", "macro_sql": "{% macro insert_into_sql_impl(target_relation, dest_columns, source_relation, source_columns) %}\n    {%- set common_columns = [] -%}\n    {%- for dest_col in dest_columns -%}\n      {%- if dest_col in source_columns -%}\n        {%- do common_columns.append(dest_col) -%}\n      {%- else -%}\n        {%- do common_columns.append('DEFAULT') -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- set dest_cols_csv = dest_columns | join(', ') -%}\n    {%- set source_cols_csv = common_columns | join(', ') -%}\ninsert into table {{ target_relation }} ({{ dest_cols_csv }})\nselect {{source_cols_csv}} from {{ source_relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.25342, "supported_languages": null}, "macro.dbt_databricks.databricks__get_merge_sql": {"name": "databricks__get_merge_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_merge_sql", "macro_sql": "{% macro databricks__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n  {# need dest_columns for merge_exclude_columns, default to use \"*\" #}\n  {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n  {%- set dest_columns = adapter.get_columns_in_relation(target) -%}\n  {%- set source_columns = (adapter.get_columns_in_relation(source) | map(attribute='quoted') | list)-%}\n  {%- set merge_update_columns = config.get('merge_update_columns') -%}\n  {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n\n  {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key %}\n              {% set this_key_match %}\n                  DBT_INTERNAL_SOURCE.{{ key }} <=> DBT_INTERNAL_DEST.{{ key }}\n              {% endset %}\n              {% do predicates.append(this_key_match) %}\n          {% endfor %}\n      {% else %}\n          {% set unique_key_match %}\n              DBT_INTERNAL_SOURCE.{{ unique_key }} <=> DBT_INTERNAL_DEST.{{ unique_key }}\n          {% endset %}\n          {% do predicates.append(unique_key_match) %}\n      {% endif %}\n  {% else %}\n      {% do predicates.append('FALSE') %}\n  {% endif %}\n\n  merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source }} as DBT_INTERNAL_SOURCE\n      on {{ predicates | join(' and ') }}\n      when matched then update set {{ get_merge_update_set(update_columns, on_schema_change, source_columns) }}\n      when not matched then insert {{ get_merge_insert(on_schema_change, source_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.incremental_validate_on_schema_change", "macro.dbt.get_merge_update_columns", "macro.dbt_databricks.get_merge_update_set", "macro.dbt_databricks.get_merge_insert"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.254702, "supported_languages": null}, "macro.dbt_databricks.get_merge_update_set": {"name": "get_merge_update_set", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_merge_update_set", "macro_sql": "{% macro get_merge_update_set(update_columns, on_schema_change, source_columns) %}\n  {%- if update_columns -%}\n    {%- for column_name in update_columns -%}\n      {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  {%- elif on_schema_change == 'ignore' -%}\n    *\n  {%- else -%}\n    {%- for column in source_columns -%}\n      {{ column }} = DBT_INTERNAL_SOURCE.{{ column }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.255098, "supported_languages": null}, "macro.dbt_databricks.get_merge_insert": {"name": "get_merge_insert", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_merge_insert", "macro_sql": "{% macro get_merge_insert(on_schema_change, source_columns) %}\n  {%- if on_schema_change == 'ignore' -%}\n    *\n  {%- else -%}\n    ({{ source_columns | join(\", \") }}) VALUES (\n    {%- for column in source_columns -%}\n      DBT_INTERNAL_SOURCE.{{ column }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %})\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.25538, "supported_languages": null}, "macro.dbt_databricks.materialization_incremental_databricks": {"name": "materialization_incremental_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_databricks.materialization_incremental_databricks", "macro_sql": "{% materialization incremental, adapter='databricks', supported_languages=['sql', 'python'] -%}\n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='delta') -%}\n  {%- set raw_strategy = config.get('incremental_strategy') or 'merge' -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- set tags = config.get('databricks_tags') -%}\n  {%- set unique_tmp_table_suffix = config.get('unique_tmp_table_suffix', False) | as_bool -%}\n\n  {%- set file_format = dbt_databricks_validate_get_file_format(raw_file_format) -%}\n  {%- set incremental_strategy = dbt_databricks_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n\n  {#-- Set vars --#}\n\n  {%- set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) -%}\n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {%- set language = model['language'] -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier, needs_information=True) -%}\n  {%- if unique_tmp_table_suffix == True and raw_strategy == 'replace_where' and raw_file_format == 'delta' -%}\n    {%- set temp_relation_suffix = adapter.generate_unique_temporary_table_suffix() -%}\n  {%- else -%}\n    {%- set temp_relation_suffix = '__dbt_tmp' -%}\n  {%- endif -%}\n\n  {#-- Set Overwrite Mode to STATIC for initial replace --#}\n  {%- if incremental_strategy == 'insert_overwrite' and should_full_refresh() -%}\n    {%- call statement() -%}\n      set spark.sql.sources.partitionOverwriteMode = STATIC\n    {%- endcall -%}\n  {%- endif -%}\n\n  {#-- Run pre-hooks --#}\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Incremental run logic --#}\n  {%- if existing_relation is none -%}\n    {#-- Relation must be created --#}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {% do persist_constraints(target_relation, model) %}\n    {% do apply_tags(target_relation, tags) %}\n    {%- if language == 'python' -%}\n      {%- do apply_tblproperties(target_relation, tblproperties) %}\n    {%- endif -%}\n\n    {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n  {%- elif existing_relation.is_view or existing_relation.is_materialized_view or existing_relation.is_streaming_table or should_full_refresh() -%}\n    {#-- Relation must be dropped & recreated --#}\n    {% set is_delta = (file_format == 'delta' and existing_relation.is_delta) %}\n    {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n      {% do adapter.drop_relation(existing_relation) %}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n    {% if not existing_relation.is_view %}\n      {% do persist_constraints(target_relation, model) %}\n    {% endif %}\n    {% do apply_tags(target_relation, tags) %}\n    {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n  {%- else -%}\n    {#-- Set Overwrite Mode to DYNAMIC for subsequent incremental operations --#}\n    {%- if incremental_strategy == 'insert_overwrite' and partition_by -%}\n      {%- call statement() -%}\n        set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n      {%- endcall -%}\n    {%- endif -%}\n    {#-- Relation must be merged --#}\n    {%- set _existing_config = adapter.get_relation_config(existing_relation) -%}\n    {%- set model_config = adapter.get_config_from_model(config.model) -%}\n    {%- set _configuration_changes = model_config.get_changeset(_existing_config) -%}\n    {%- set temp_relation = databricks__make_temp_relation(target_relation, suffix=temp_relation_suffix, as_table=language != 'sql') -%}\n    {%- call statement('create_temp_relation', language=language) -%}\n      {{ create_table_as(True, temp_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {%- do process_schema_changes(on_schema_change, temp_relation, existing_relation) -%}\n    {%- set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) -%}\n    {%- set strategy_arg_dict = ({\n            'target_relation': target_relation,\n            'temp_relation': temp_relation,\n            'unique_key': unique_key,\n            'dest_columns': none,\n            'incremental_predicates': incremental_predicates}) -%}\n    {%- set build_sql = strategy_sql_macro_func(strategy_arg_dict) -%}\n    {%- if language == 'sql' -%}\n      {%- call statement('main') -%}\n        {{ build_sql }}\n      {%- endcall -%}\n    {%- elif language == 'python' -%}\n      {%- call statement_with_staging_table('main', temp_relation) -%}\n        {{ build_sql }}\n      {%- endcall -%}\n      {#--\n      This is yucky.\n      See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n      re: python models and temporary views.\n\n      Also, why does not either drop_relation or adapter.drop_relation work here?!\n      --#}\n    {%- endif -%}\n    {% do apply_liquid_clustered_cols(target_relation) %}\n    {% if _configuration_changes is not none %}\n      {% set tags = _configuration_changes.changes.get(\"tags\", None) %}\n      {% set tblproperties = _configuration_changes.changes.get(\"tblproperties\", None) %}\n      {% if tags is not none %}\n        {% do apply_tags(target_relation, tags.set_tags, tags.unset_tags) %}\n      {%- endif -%}\n      {% if tblproperties is not none %}\n        {% do apply_tblproperties(target_relation, tblproperties.tblproperties) %}\n      {%- endif -%}\n    {%- endif -%}\n    {% do persist_docs(target_relation, model, for_relation=True) %}\n  {%- endif -%}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n  {% do optimize(target_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.dbt_databricks_validate_get_file_format", "macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_databricks.persist_constraints", "macro.dbt_databricks.apply_tags", "macro.dbt_databricks.apply_tblproperties", "macro.dbt.persist_docs", "macro.dbt_databricks.databricks__make_temp_relation", "macro.dbt.process_schema_changes", "macro.dbt_databricks.statement_with_staging_table", "macro.dbt_databricks.apply_liquid_clustered_cols", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.optimize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.261272, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.databricks__get_binding_char": {"name": "databricks__get_binding_char", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__get_binding_char", "macro_sql": "{% macro databricks__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.26426, "supported_languages": null}, "macro.dbt_databricks.databricks__load_csv_rows": {"name": "databricks__load_csv_rows", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__load_csv_rows", "macro_sql": "{% macro databricks__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n  {% set must_cast = model['config'].get(\"file_format\", \"delta\") == \"parquet\" %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert {% if loop.index0 == 0 -%} overwrite {% else -%} into {% endif -%} {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- if must_cast -%}\n                    {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                    {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- else -%}\n                    {{ get_binding_char() }}\n                  {%- endif -%}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True, close_cursor=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.265623, "supported_languages": null}, "macro.dbt_databricks.databricks__reset_csv_table": {"name": "databricks__reset_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__reset_csv_table", "macro_sql": "{% macro databricks__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n      {% if old_relation.is_delta and config.get('file_format', default='delta') == 'delta' %}\n        {% set sql = create_or_replace_csv_table(model, agate_table, True) %}\n      {% else %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n      {% endif %}\n    {% else %}\n      {% set sql = create_csv_table(model, agate_table) %}\n    {% endif %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_or_replace_csv_table", "macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.266168, "supported_languages": null}, "macro.dbt_databricks.create_or_replace_csv_table": {"name": "create_or_replace_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.create_or_replace_csv_table", "macro_sql": "{% macro create_or_replace_csv_table(model, agate_table, replace=False) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n  {%- set column_comment = config.persist_column_docs() and model.columns %}\n  {%- set identifier = model['alias'] -%}\n  {%- set relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set replace_clause = \"\" -%}\n  {%- if replace -%}\n    {%- set replace_clause = \"or replace\" -%}\n  {%- endif -%}\n\n  {% set sql %}\n    create {{replace_clause}} table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {%- set column_comment_clause = \"\" -%}\n            {%- if column_comment and col_name in model.columns.keys() -%}   \n              {%- set comment = model.columns[col_name]['description'] | replace(\"'\", \"\\\\'\") -%}\n              {%- if comment and comment != \"\" -%}\n                {%- set column_comment_clause = \"comment '\" ~ comment ~ \"'\" -%}\n              {%- endif -%}\n            {%- endif -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {{ column_comment_clause }}{%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause(relation) }}\n    {{ comment_clause() }}\n    {{ tblproperties_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_databricks.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.267733, "supported_languages": null}, "macro.dbt_databricks.databricks__create_csv_table": {"name": "databricks__create_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__create_csv_table", "macro_sql": "{% macro databricks__create_csv_table(model, agate_table) %}\n  {{ return(create_or_replace_csv_table(model, agate_table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_or_replace_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.267884, "supported_languages": null}, "macro.dbt_databricks.materialization_seed_databricks": {"name": "materialization_seed_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/seeds.sql", "original_file_path": "macros/materializations/seeds/seeds.sql", "unique_id": "macro.dbt_databricks.materialization_seed_databricks", "macro_sql": "{% materialization seed, adapter='databricks' %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and (old_relation.is_view or old_relation.is_materialized_view)) -%}\n  {%- set exists_as_streaming_table = (old_relation is not none and old_relation.is_streaming_table) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view or a materialized view\".format(old_relation)) }}\n  {% elif exists_as_streaming_table %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a streaming table\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  -- No need to persist docs, already handled in seed create\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.271347, "supported_languages": ["sql"]}, "macro.dbt_databricks.databricks__generate_database_name": {"name": "databricks__generate_database_name", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt_databricks.databricks__generate_database_name", "macro_sql": "{% macro databricks__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n        {{ return(default_database) }}\n    {%- else -%}\n        {{ return(custom_database_name) }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.271777, "supported_languages": null}, "macro.dbt_databricks.databricks__get_drop_sql": {"name": "databricks__get_drop_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_databricks.databricks__get_drop_sql", "macro_sql": "{% macro databricks__get_drop_sql(relation) -%}\n    {%- if relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n    {%- elif relation.is_streaming_table-%}\n        {{ drop_streaming_table(relation) }}\n    {%- elif relation.is_view -%}\n        {{ drop_view(relation) }}\n    {%- else -%}\n        {{ drop_table(relation) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_materialized_view", "macro.dbt_databricks.drop_streaming_table", "macro.dbt.drop_view", "macro.dbt.drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.272255, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_relation": {"name": "databricks__drop_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_relation", "macro_sql": "{% macro databricks__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.272432, "supported_languages": null}, "macro.dbt_databricks.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {% do return(adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.273053, "supported_languages": null}, "macro.dbt_databricks.databricks__get_replace_sql": {"name": "databricks__get_replace_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.databricks__get_replace_sql", "macro_sql": "{% macro databricks__get_replace_sql(existing_relation, target_relation, sql) %}\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ return([\n            get_create_intermediate_sql(target_relation, sql),\n            get_create_backup_sql(existing_relation),\n            get_rename_intermediate_sql(target_relation),\n            get_drop_backup_sql(existing_relation)\n        ]) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ return([\n            get_create_intermediate_sql(target_relation, sql),\n            get_drop_sql(existing_relation),\n            get_rename_intermediate_sql(target_relation),\n        ]) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ return([\n            get_create_backup_sql(existing_relation),\n            get_create_sql(target_relation, sql),\n            get_drop_backup_sql(existing_relation)\n        ]) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ return([\n            get_drop_sql(existing_relation),\n            get_create_sql(target_relation, sql)\n        ]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.274026, "supported_languages": null}, "macro.dbt_databricks.fetch_tags": {"name": "fetch_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.fetch_tags", "macro_sql": "{% macro fetch_tags(relation) -%}\n  {% if relation.is_hive_metastore() %}\n    {{ exceptions.raise_compiler_error(\"Tags are only supported for Unity Catalog\") }}\n  {%- endif %}\n  {% call statement('list_tags', fetch_result=True) -%}\n    {{ fetch_tags_sql(relation) }}\n  {% endcall %}\n  {% do return(load_result('list_tags').table) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.fetch_tags_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2752059, "supported_languages": null}, "macro.dbt_databricks.fetch_tags_sql": {"name": "fetch_tags_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.fetch_tags_sql", "macro_sql": "{% macro fetch_tags_sql(relation) -%}\n  SELECT tag_name, tag_value\n  FROM `system`.`information_schema`.`table_tags`\n  WHERE catalog_name = '{{ relation.database|lower }}' \n    AND schema_name = '{{ relation.schema|lower }}'\n    AND table_name = '{{ relation.identifier|lower }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.275381, "supported_languages": null}, "macro.dbt_databricks.apply_tags": {"name": "apply_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.apply_tags", "macro_sql": "{% macro apply_tags(relation, set_tags, unset_tags=[]) -%}\n  {%- if (set_tags or unset_tags) and relation.is_hive_metastore() -%}\n    {{ exceptions.raise_compiler_error(\"Tags are only supported for Unity Catalog\") }}\n  {%- endif -%}\n  {%- if set_tags %}\n    {%- call statement('set_tags') -%}\n       {{ alter_set_tags(relation, set_tags) }}\n    {%- endcall -%}\n  {%- endif %}\n  {%- if unset_tags %}\n    {%- call statement('unset_tags') -%}\n       {{ alter_unset_tags(relation, unset_tags) }}\n    {%- endcall -%}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.alter_set_tags", "macro.dbt_databricks.alter_unset_tags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2758558, "supported_languages": null}, "macro.dbt_databricks.alter_set_tags": {"name": "alter_set_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.alter_set_tags", "macro_sql": "{% macro alter_set_tags(relation, tags) -%}\n  ALTER {{ relation.type }} {{ relation }} SET TAGS (\n    {% for tag in tags -%}\n      '{{ tag }}' = '{{ tags[tag] }}' {%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.276144, "supported_languages": null}, "macro.dbt_databricks.alter_unset_tags": {"name": "alter_unset_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.alter_unset_tags", "macro_sql": "{% macro alter_unset_tags(relation, tags) -%}\n  ALTER {{ relation.type }} {{ relation }} UNSET TAGS (\n    {% for tag in tags -%}\n      '{{ tag }}' {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n  )\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.276372, "supported_languages": null}, "macro.dbt_databricks.location_clause": {"name": "location_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/location.sql", "original_file_path": "macros/relations/location.sql", "unique_id": "macro.dbt_databricks.location_clause", "macro_sql": "{% macro location_clause(relation) %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set file_format = config.get('file_format', default='delta') -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- elif (not relation.is_hive_metastore()) and file_format != 'delta' -%}\n    {{ exceptions.raise_compiler_error(\n        'Incompatible configuration: `location_root` must be set when using a non-delta file format with Unity Catalog'\n    ) }}\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2769868, "supported_languages": null}, "macro.dbt_databricks.optimize": {"name": "optimize", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.optimize", "macro_sql": "{% macro optimize(relation) %}\n  {{ return(adapter.dispatch('optimize', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__optimize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.277555, "supported_languages": null}, "macro.dbt_databricks.databricks__optimize": {"name": "databricks__optimize", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.databricks__optimize", "macro_sql": "\n\n{%- macro databricks__optimize(relation) -%}\n  {%- if var('DATABRICKS_SKIP_OPTIMIZE', 'false')|lower != 'true' and\n        var('databricks_skip_optimize', 'false')|lower != 'true' and\n        config.get('file_format', 'delta') == 'delta' -%}\n    {%- if (config.get('zorder', False) or config.get('liquid_clustered_by', False)) -%}\n      {%- call statement('run_optimize_stmt') -%}\n        {{ get_optimize_sql(relation) }}\n      {%- endcall -%}\n    {%- endif -%}\n  {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.get_optimize_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.278004, "supported_languages": null}, "macro.dbt_databricks.get_optimize_sql": {"name": "get_optimize_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.get_optimize_sql", "macro_sql": "{%- macro get_optimize_sql(relation) %}\n  optimize {{ relation }}\n  {%- if config.get('zorder', False) and config.get('file_format', 'delta') == 'delta' %}\n    {%- if config.get('liquid_clustered_by', False) %}\n      {{ exceptions.warn(\"Both zorder and liquid_clustered_by are set but they are incompatible. zorder will be ignored.\") }}\n    {%- else %}\n      {%- set zorder = config.get('zorder', none) %}\n      {# TODO: predicates here? WHERE ...  #}\n      {%- if zorder is sequence and zorder is not string %}\n        zorder by (\n        {%- for col in zorder %}\n        {{ col }}{% if not loop.last %}, {% endif %}\n        {%- endfor %}\n        )\n      {%- else %}\n        zorder by ({{zorder}})\n      {%- endif %}\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2786791, "supported_languages": null}, "macro.dbt_databricks.file_format_clause": {"name": "file_format_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/file_format.sql", "original_file_path": "macros/relations/file_format.sql", "unique_id": "macro.dbt_databricks.file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {%- set file_format = config.get('file_format', default='delta') -%}\n  using {{ file_format }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.278879, "supported_languages": null}, "macro.dbt_databricks.liquid_clustered_cols": {"name": "liquid_clustered_cols", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/liquid_clustering.sql", "original_file_path": "macros/relations/liquid_clustering.sql", "unique_id": "macro.dbt_databricks.liquid_clustered_cols", "macro_sql": "{% macro liquid_clustered_cols() -%}\n  {%- set cols = config.get('liquid_clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    CLUSTER BY ({{ cols | join(', ') }})\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2794812, "supported_languages": null}, "macro.dbt_databricks.apply_liquid_clustered_cols": {"name": "apply_liquid_clustered_cols", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/liquid_clustering.sql", "original_file_path": "macros/relations/liquid_clustering.sql", "unique_id": "macro.dbt_databricks.apply_liquid_clustered_cols", "macro_sql": "{% macro apply_liquid_clustered_cols(target_relation) -%}\n  {%- set cols = config.get('liquid_clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {%- call statement('set_cluster_by_columns') -%}\n        ALTER {{ target_relation.type }} {{ target_relation }} CLUSTER BY ({{ cols | join(', ') }})\n    {%- endcall -%}\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.279904, "supported_languages": null}, "macro.dbt_databricks.tblproperties_clause": {"name": "tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.tblproperties_clause", "macro_sql": "{% macro tblproperties_clause() -%}\n  {{ return(adapter.dispatch('tblproperties_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.280394, "supported_languages": null}, "macro.dbt_databricks.databricks__tblproperties_clause": {"name": "databricks__tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.databricks__tblproperties_clause", "macro_sql": "{% macro databricks__tblproperties_clause() -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- if tblproperties is not none %}\n    tblproperties (\n      {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}' {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.280708, "supported_languages": null}, "macro.dbt_databricks.apply_tblproperties": {"name": "apply_tblproperties", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.apply_tblproperties", "macro_sql": "{% macro apply_tblproperties(relation, tblproperties) -%}\n  {% if tblproperties %}\n    {%- call statement('apply_tblproperties') -%}\n      ALTER {{ relation.type }} {{ relation }} SET TBLPROPERTIES (\n      {% for tblproperty in tblproperties -%}\n        '{{ tblproperty }}' = '{{ tblproperties[tblproperty] }}' {%- if not loop.last %}, {% endif -%}\n      {%- endfor %}\n      )\n    {%- endcall -%}\n  {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.281044, "supported_languages": null}, "macro.dbt_databricks.persist_constraints": {"name": "persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.persist_constraints", "macro_sql": "{% macro persist_constraints(relation, model) %}\n  {{ return(adapter.dispatch('persist_constraints', 'dbt')(relation, model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.294938, "supported_languages": null}, "macro.dbt_databricks.databricks__persist_constraints": {"name": "databricks__persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__persist_constraints", "macro_sql": "{% macro databricks__persist_constraints(relation, model) %}\n  {%- set contract_config = config.get('contract') -%}\n  {% set has_model_contract = contract_config and contract_config.enforced %}\n  {% set has_databricks_constraints = config.get('persist_constraints', False) %}\n\n  {% if (has_model_contract or has_databricks_constraints) %}\n    {% if config.get('file_format', 'delta') != 'delta' %}\n      {# Constraints are only supported for delta tables #}\n      {{ exceptions.warn(\"Constraints not supported for file format: \" ~ config.get('file_format')) }}\n    {% elif relation.is_view %}\n      {# Constraints are not supported for views. This point in the code should not have been reached. #}\n      {{ exceptions.raise_compiler_error(\"Constraints not supported for views.\") }}\n    {% elif is_incremental() %}\n      {# Constraints are not applied for incremental updates. This point in the code should not have been reached #}\n      {{ exceptions.raise_compiler_error(\"Constraints are not applied for incremental updates. Full refresh is required to update constraints.\") }}\n    {% else %}\n      {% do alter_column_set_constraints(relation, model) %}\n      {% do alter_table_add_constraints(relation, model) %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.is_incremental", "macro.dbt_databricks.alter_column_set_constraints", "macro.dbt_databricks.alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2956958, "supported_languages": null}, "macro.dbt_databricks.alter_table_add_constraints": {"name": "alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.alter_table_add_constraints", "macro_sql": "{% macro alter_table_add_constraints(relation, constraints) %}\n  {{ return(adapter.dispatch('alter_table_add_constraints', 'dbt')(relation, constraints)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.295889, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_table_add_constraints": {"name": "databricks__alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__alter_table_add_constraints", "macro_sql": "{% macro databricks__alter_table_add_constraints(relation, model) %}\n    {% set constraints = get_model_constraints(model) %}\n    {% set statements = get_constraints_sql(relation, constraints, model) %}\n    {% for stmt in statements %}\n      {% call statement() %}\n        {{ stmt }}\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_model_constraints", "macro.dbt_databricks.get_constraints_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.296201, "supported_languages": null}, "macro.dbt_databricks.get_model_constraints": {"name": "get_model_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_model_constraints", "macro_sql": "{% macro get_model_constraints(model) %}\n  {% set constraints = model.get('constraints', []) %}\n  {% if config.get('persist_constraints', False) and model.get('meta', {}).get('constraints') is sequence %}\n    {# Databricks constraints implementation.  Constraints are in the meta property. #}\n    {% set db_constraints = model.get('meta', {}).get('constraints', []) %}\n    {% set constraints = databricks_constraints_to_dbt(db_constraints) %}\n  {% endif %}\n  {{ return(constraints) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks_constraints_to_dbt"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2967072, "supported_languages": null}, "macro.dbt_databricks.get_column_constraints": {"name": "get_column_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_column_constraints", "macro_sql": "{% macro get_column_constraints(column) %}\n  {% set constraints = column.get('constraints', []) %}\n  {% if config.get('persist_constraints', False) and column.get('meta', {}).get('constraint') %}\n    {# Databricks constraints implementation.  Constraint is in the meta property. #}\n    {% set db_constraints = [column.get('meta', {}).get('constraint')] %}\n    {% set constraints = databricks_constraints_to_dbt(db_constraints, column) %}\n  {% endif %}\n  {{ return(constraints) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks_constraints_to_dbt"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.29722, "supported_languages": null}, "macro.dbt_databricks.alter_column_set_constraints": {"name": "alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.alter_column_set_constraints", "macro_sql": "{% macro alter_column_set_constraints(relation, column_dict) %}\n  {{ return(adapter.dispatch('alter_column_set_constraints', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.297399, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_set_constraints": {"name": "databricks__alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_set_constraints", "macro_sql": "{% macro databricks__alter_column_set_constraints(relation, model) %}\n  {% set column_dict = model.columns %}\n  {% for column_name in column_dict %}\n    {% set column = column_dict[column_name] %}\n    {% set constraints = get_column_constraints(column)  %}\n    {% set statements = get_constraints_sql(relation, constraints, model, column) %}\n    {% for stmt in statements %}\n      {% call statement() %}\n        {{ stmt }}\n      {% endcall %}\n    {% endfor %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_column_constraints", "macro.dbt_databricks.get_constraints_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.2978518, "supported_languages": null}, "macro.dbt_databricks.get_constraints_sql": {"name": "get_constraints_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_constraints_sql", "macro_sql": "{% macro get_constraints_sql(relation, constraints, model, column={}) %}\n  {% set statements = [] %}\n  -- Hack so that not null constraints will be applied before primary key constraints\n  {% for constraint in constraints|sort(attribute='type') %}\n    {% if constraint %}\n      {% set constraint_statements = get_constraint_sql(relation, constraint, model, column) %}\n      {% for statement in constraint_statements %}\n        {% if statement %}\n          {% do statements.append(statement) %}\n        {% endif %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(statements) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_constraint_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.29844, "supported_languages": null}, "macro.dbt_databricks.get_constraint_sql": {"name": "get_constraint_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_constraint_sql", "macro_sql": "{% macro get_constraint_sql(relation, constraint, model, column={}) %}\n  {% set statements = [] %}\n  {% set type = constraint.get(\"type\", \"\") %}\n\n  {% if type == 'check' %}\n    {% set expression = constraint.get(\"expression\", \"\") %}\n    {% if not expression %}\n      {{ exceptions.raise_compiler_error('Invalid check constraint expression') }}\n    {% endif %}\n\n    {% set name = constraint.get(\"name\") %}\n    {% if not name %}\n      {% if local_md5 %}\n        {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n        {%- set name = local_md5 (relation.identifier ~ \";\" ~ column.get(\"name\", \"\") ~ \";\" ~ expression ~ \";\") -%}\n      {% else %}\n        {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n      {% endif %}\n    {% endif %}\n    {% set stmt = \"alter table \" ~ relation ~ \" add constraint \" ~ name ~ \" check (\" ~ expression ~ \");\" %}\n    {% do statements.append(stmt) %}\n  {% elif type == 'not_null' %}\n    {% set column_names = constraint.get(\"columns\", []) %}\n    {% if column and not column_names %}\n      {% set column_names = [column['name']] %}\n    {% endif %}\n    {% for column_name in column_names %}\n      {% set column = model.get('columns', {}).get(column_name) %}\n      {% if column %}\n        {% set quoted_name = adapter.quote(column['name']) if column['quote'] else column['name'] %}\n        {% set stmt = \"alter table \" ~ relation ~ \" change column \" ~ quoted_name ~ \" set not null \" ~ (constraint.expression or \"\") ~ \";\" %}\n        {% do statements.append(stmt) %}\n      {% else %}\n        {{ exceptions.warn('not_null constraint on invalid column: ' ~ column_name) }}\n      {% endif %}\n    {% endfor %}\n  {% elif type == 'primary_key' %}\n    {% if constraint.get('warn_unenforced') %}\n      {{ exceptions.warn(\"unenforced constraint type: \" ~ type)}}\n    {% endif %}\n    {% set column_names = constraint.get(\"columns\", []) %}\n    {% if column and not column_names %}\n      {% set column_names = [column['name']] %}\n    {% endif %}\n    {% set quoted_names = [] %}\n    {% for column_name in column_names %}\n      {% set column = model.get('columns', {}).get(column_name) %}\n      {% if not column %}\n        {{ exceptions.warn('Invalid primary key column: ' ~ column_name) }}\n      {% else %}\n        {% set quoted_name = adapter.quote(column['name']) if column['quote'] else column['name'] %}\n        {% do quoted_names.append(quoted_name) %}\n      {% endif %}\n    {% endfor %}\n\n    {% set joined_names = quoted_names|join(\", \") %}\n\n    {% set name = constraint.get(\"name\") %}\n    {% if not name %}\n      {% if local_md5 %}\n        {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n        {%- set name = local_md5(\"primary_key;\" ~ relation.identifier ~ \";\" ~ column_names ~ \";\") -%}\n      {% else %}\n        {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n      {% endif %}\n    {% endif %}\n    {% set stmt = \"alter table \" ~ relation ~ \" add constraint \" ~ name ~ \" primary key(\" ~ joined_names ~ \");\" %}\n    {% do statements.append(stmt) %}\n  {% elif type == 'foreign_key' %}\n\n    {% if constraint.get('warn_unenforced') %}\n      {{ exceptions.warn(\"unenforced constraint type: \" ~ constraint.type)}}\n    {% endif %}\n\n    {% set name = constraint.get(\"name\") %}\n    \n    {% if constraint.get('expression') %}\n\n      {% if not name %}\n        {% if local_md5 %}\n          {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n          {%- set name = local_md5(\"foreign_key;\" ~ relation.identifier ~ \";\" ~ constraint.get('expression') ~ \";\") -%}\n        {% else %}\n          {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n        {% endif %}    \n      {% endif %}\n\n      {% set stmt = \"alter table \" ~ relation ~ \" add constraint \" ~ name ~ \" foreign key\" ~ constraint.get('expression') %}\n    {% else %}\n      {% set column_names = constraint.get(\"columns\", []) %}\n      {% if column and not column_names %}\n        {% set column_names = [column['name']] %}\n      {% endif %}\n      {% set quoted_names = [] %}\n      {% for column_name in column_names %}\n        {% set column = model.get('columns', {}).get(column_name) %}\n        {% if not column %}\n          {{ exceptions.warn('Invalid foreign key column: ' ~ column_name) }}\n        {% else %}\n          {% set quoted_name = adapter.quote(column['name']) if column['quote'] else column['name'] %}\n          {% do quoted_names.append(quoted_name) %}\n        {% endif %}\n      {% endfor %}\n\n      {% set joined_names = quoted_names|join(\", \") %}\n\n      {% set parent = constraint.get(\"to\") %}\n      {% if not parent %}\n        {{ exceptions.raise_compiler_error('No parent table defined for foreign key: ' ~ expression) }}\n      {% endif %}\n      {% if not \".\" in parent %}\n        {% set parent = relation.schema ~ \".\" ~ parent%}\n      {% endif %}\n\n      {% if not name %}\n        {% if local_md5 %}\n          {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n          {%- set name = local_md5(\"foreign_key;\" ~ relation.identifier ~ \";\" ~ column_names ~ \";\" ~ parent ~ \";\") -%}\n        {% else %}\n          {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n        {% endif %}    \n      {% endif %}\n\n      {% set stmt = \"alter table \" ~ relation ~ \" add constraint \" ~ name ~ \" foreign key(\" ~ joined_names ~ \") references \" ~ parent %}\n      {% set parent_columns = constraint.get(\"to_columns\") %}\n      {% if parent_columns %}\n        {% set stmt = stmt ~ \"(\" ~ parent_columns|join(\", \") ~ \")\"%}\n      {% endif %}\n    {% endif %}\n    {% set stmt = stmt ~ \";\" %}\n    {% do statements.append(stmt) %}\n  {% elif constraint.get('warn_unsupported') %}\n    {{ exceptions.warn(\"unsupported constraint type: \" ~ constraint.type)}}\n  {% endif %}\n\n  {{ return(statements) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.304234, "supported_languages": null}, "macro.dbt_databricks.databricks_constraints_to_dbt": {"name": "databricks_constraints_to_dbt", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks_constraints_to_dbt", "macro_sql": "{% macro databricks_constraints_to_dbt(constraints, column) %}\n  {# convert constraints defined using the original databricks format #}\n  {% set dbt_constraints = [] %}\n  {% for constraint in constraints %}\n    {% if constraint.get and constraint.get(\"type\") %}\n      {# already in model contract format #}\n      {% do dbt_constraints.append(constraint) %}\n    {% else %}\n      {% if column %}\n        {% if constraint == \"not_null\" %}\n          {% do dbt_constraints.append({\"type\": \"not_null\", \"columns\": [column.get(\"name\")]}) %}\n        {% else %}\n          {{ exceptions.raise_compiler_error('Invalid constraint for column ' ~ column.get(\"name\", \"\") ~ '. Only `not_null` is supported.') }}\n        {% endif %}\n      {% else %}\n        {% set name = constraint['name'] %}\n        {% if not name %}\n          {{ exceptions.raise_compiler_error('Invalid check constraint name') }}\n        {% endif %}\n        {% set condition = constraint['condition'] %}\n        {% if not condition %}\n          {{ exceptions.raise_compiler_error('Invalid check constraint condition') }}\n        {% endif %}\n        {% do dbt_constraints.append({\"name\": name, \"type\": \"check\", \"expression\": condition}) %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(dbt_constraints) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.305515, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_sql": {"name": "databricks__get_create_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_sql", "macro_sql": "{%- macro databricks__get_create_sql(relation, sql) -%}\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_streaming_table -%}\n        {{ get_create_streaming_table_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt_databricks.get_create_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3061981, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_materialized_view": {"name": "databricks__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_materialized_view", "macro_sql": "{% macro databricks__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3063319, "supported_languages": null}, "macro.dbt_databricks.databricks__refresh_materialized_view": {"name": "databricks__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_databricks.databricks__refresh_materialized_view", "macro_sql": "{% macro databricks__refresh_materialized_view(relation) -%}\n  refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.306456, "supported_languages": null}, "macro.dbt_databricks.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {%- do return(adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    )) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3072798, "supported_languages": null}, "macro.dbt_databricks.databricks__get_materialized_view_configuration_changes": {"name": "databricks__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_materialized_view_configuration_changes", "macro_sql": "\n\n\n{%- macro databricks__get_materialized_view_configuration_changes(existing_relation, new_config) -%}\n    {%- set _existing_materialized_view = adapter.get_relation_config(existing_relation) -%}\n    {%- set materialized_view = adapter.get_config_from_model(config.model) -%}\n    {%- set _configuration_changes = materialized_view.get_changeset(_existing_materialized_view) -%}\n    {% do return(_configuration_changes) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.307572, "supported_languages": null}, "macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql": {"name": "databricks__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql", "macro_sql": "{% macro databricks__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n        {% do return(get_replace_sql(existing_relation, relation,  sql)) %}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n        {% do return(get_alter_mv_internal(relation, configuration_changes)) %}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_alter_mv_internal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.307901, "supported_languages": null}, "macro.dbt_databricks.get_alter_mv_internal": {"name": "get_alter_mv_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_mv_internal", "macro_sql": "{% macro get_alter_mv_internal(relation, configuration_changes) %}\n    {%- set refresh = configuration_changes.changes[\"refresh\"] -%}\n    -- Currently only schedule can be altered\n    ALTER MATERIALIZED VIEW {{ relation }}\n        {{ get_alter_sql_refresh_schedule(refresh.cron, refresh.time_zone_value, refresh.is_altered) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_alter_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.308139, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_materialized_view_as_sql": {"name": "databricks__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_materialized_view_as_sql", "macro_sql": "{% macro databricks__get_create_materialized_view_as_sql(relation, sql) -%}\n  {%- set materialized_view = adapter.get_config_from_model(config.model) -%}\n  {%- set partition_by = materialized_view.config[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = materialized_view.config[\"tblproperties\"].tblproperties -%}\n  {%- set comment = materialized_view.config[\"comment\"].comment -%}\n  {%- set refresh = materialized_view.config[\"refresh\"] -%}\n  create materialized view {{ relation }}\n    {{ get_create_sql_partition_by(partition_by) }}\n    {{ get_create_sql_comment(comment) }}\n    {{ get_create_sql_tblproperties(tblproperties) }}\n    {{ get_create_sql_refresh_schedule(refresh.cron, refresh.time_zone_value) }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties", "macro.dbt_databricks.get_create_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.308896, "supported_languages": null}, "macro.dbt_databricks.drop_streaming_table": {"name": "drop_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/drop.sql", "original_file_path": "macros/relations/streaming_table/drop.sql", "unique_id": "macro.dbt_databricks.drop_streaming_table", "macro_sql": "{% macro drop_streaming_table(relation) -%}\n    {{ return(adapter.dispatch('drop_streaming_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.default__drop_streaming_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3092291, "supported_languages": null}, "macro.dbt_databricks.default__drop_streaming_table": {"name": "default__drop_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/drop.sql", "original_file_path": "macros/relations/streaming_table/drop.sql", "unique_id": "macro.dbt_databricks.default__drop_streaming_table", "macro_sql": "{% macro default__drop_streaming_table(relation) -%}\n    drop table if exists {{ relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.309362, "supported_languages": null}, "macro.dbt_databricks.refresh_streaming_table": {"name": "refresh_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/refresh.sql", "original_file_path": "macros/relations/streaming_table/refresh.sql", "unique_id": "macro.dbt_databricks.refresh_streaming_table", "macro_sql": "{% macro refresh_streaming_table(relation, sql) -%}\n  {{ adapter.dispatch('refresh_streaming_table', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__refresh_streaming_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3096352, "supported_languages": null}, "macro.dbt_databricks.databricks__refresh_streaming_table": {"name": "databricks__refresh_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/refresh.sql", "original_file_path": "macros/relations/streaming_table/refresh.sql", "unique_id": "macro.dbt_databricks.databricks__refresh_streaming_table", "macro_sql": "{% macro databricks__refresh_streaming_table(relation, sql) -%}\n  create or refresh streaming table {{ relation }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3097699, "supported_languages": null}, "macro.dbt_databricks.get_alter_streaming_table_as_sql": {"name": "get_alter_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_streaming_table_as_sql", "macro_sql": "{% macro get_alter_streaming_table_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {%- do return(adapter.dispatch('get_alter_streaming_table_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    )) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.311698, "supported_languages": null}, "macro.dbt_databricks.get_streaming_table_configuration_changes": {"name": "get_streaming_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_streaming_table_configuration_changes", "macro_sql": "{% macro get_streaming_table_configuration_changes(existing_relation, new_config) -%}\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_streaming_table_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_streaming_table_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.312001, "supported_languages": null}, "macro.dbt_databricks.databricks__get_streaming_table_configuration_changes": {"name": "databricks__get_streaming_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_streaming_table_configuration_changes", "macro_sql": "\n\n{%- macro databricks__get_streaming_table_configuration_changes(existing_relation, new_config) -%}\n    {%- set _existing_streaming_table = adapter.get_relation_config(existing_relation) -%}\n    {%- set streaming_table = adapter.get_config_from_model(config.model) -%}\n    {%- set _configuration_changes = streaming_table.get_changeset(_existing_streaming_table) -%}\n    {% do return(_configuration_changes) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.312326, "supported_languages": null}, "macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql": {"name": "databricks__get_alter_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql", "macro_sql": "{% macro databricks__get_alter_streaming_table_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n        {% do return(get_replace_sql(existing_relation, relation,  sql)) %}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n        {%- set alter_statement = get_alter_st_internal(relation, configuration_changes) -%}\n        {%- set create_statement = get_create_st_internal(relation, configuration_changes, sql) -%}\n        {%- set return_statements = [] -%}\n        {%- if create_statement -%}\n            {{ return_statements.append(create_statement) }}\n        {%- endif -%}\n        {%- if alter_statement -%}\n            {{ return_statements.append(alter_statement) }}\n        {%- endif -%}\n        {% do return(return_statements) %}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_alter_st_internal", "macro.dbt_databricks.get_create_st_internal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.313341, "supported_languages": null}, "macro.dbt_databricks.get_create_st_internal": {"name": "get_create_st_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_create_st_internal", "macro_sql": "{% macro get_create_st_internal(relation, configuration_changes, sql) %}\n  {%- set partition_by = configuration_changes.changes[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = configuration_changes.changes[\"tblproperties\"].tblproperties -%}\n  {%- set comment = configuration_changes.changes[\"comment\"].comment -%}\n  CREATE OR REFRESH STREAMING TABLE {{ relation }}\n    {% if partition_by -%}\n        {{ get_create_sql_partition_by(partition_by) }}\n    {%- endif %}\n    {% if comment -%}\n        {{ get_create_sql_comment(comment) }}\n    {%- endif %}\n    {% if tblproperties -%}\n        {{ get_create_sql_tblproperties(tblproperties) }}\n    {%- endif %}\n    AS {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.313866, "supported_languages": null}, "macro.dbt_databricks.get_alter_st_internal": {"name": "get_alter_st_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_st_internal", "macro_sql": "{% macro get_alter_st_internal(relation, configuration_changes) %}\n  {%- set refresh = configuration_changes.changes[\"refresh\"] -%}\n  {%- if refresh and refresh.cron -%}\n    ALTER STREAMING TABLE {{ relation }}\n        {{ get_alter_sql_refresh_schedule(refresh.cron, refresh.time_zone_value, False) -}}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_alter_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.314136, "supported_languages": null}, "macro.dbt_databricks.get_create_streaming_table_as_sql": {"name": "get_create_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/create.sql", "original_file_path": "macros/relations/streaming_table/create.sql", "unique_id": "macro.dbt_databricks.get_create_streaming_table_as_sql", "macro_sql": "{% macro get_create_streaming_table_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_streaming_table_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.314551, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_streaming_table_as_sql": {"name": "databricks__get_create_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/create.sql", "original_file_path": "macros/relations/streaming_table/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_streaming_table_as_sql", "macro_sql": "{% macro databricks__get_create_streaming_table_as_sql(relation, sql) -%}\n  {%- set streaming_table = adapter.get_config_from_model(config.model) -%}\n  {%- set partition_by = streaming_table.config[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = streaming_table.config[\"tblproperties\"].tblproperties -%}\n  {%- set comment = streaming_table.config[\"comment\"].comment -%}\n  {%- set refresh = streaming_table.config[\"refresh\"] -%}\n\n  CREATE STREAMING TABLE {{ relation }}\n    {{ get_create_sql_partition_by(partition_by) }}\n    {{ get_create_sql_comment(comment) }}\n    {{ get_create_sql_tblproperties(tblproperties) }}\n    {{ get_create_sql_refresh_schedule(refresh.cron, refresh.time_zone_value) }}\n    AS {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties", "macro.dbt_databricks.get_create_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3150988, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_comment": {"name": "get_create_sql_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/comment.sql", "original_file_path": "macros/relations/components/comment.sql", "unique_id": "macro.dbt_databricks.get_create_sql_comment", "macro_sql": "{%- macro get_create_sql_comment(comment) -%}\n{% if comment is string -%}\n  COMMENT '{{ comment }}'\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.315279, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_refresh_schedule": {"name": "get_create_sql_refresh_schedule", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/refresh_schedule.sql", "original_file_path": "macros/relations/components/refresh_schedule.sql", "unique_id": "macro.dbt_databricks.get_create_sql_refresh_schedule", "macro_sql": "{% macro get_create_sql_refresh_schedule(cron, time_zone_value) %}\n  {%- if cron -%}\n    SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.315704, "supported_languages": null}, "macro.dbt_databricks.get_alter_sql_refresh_schedule": {"name": "get_alter_sql_refresh_schedule", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/refresh_schedule.sql", "original_file_path": "macros/relations/components/refresh_schedule.sql", "unique_id": "macro.dbt_databricks.get_alter_sql_refresh_schedule", "macro_sql": "{% macro get_alter_sql_refresh_schedule(cron, time_zone_value, is_altered) %}\n  {%- if cron -%}\n    {%- if is_altered -%}\n      ALTER SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n    {%- else -%}\n      ADD SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n    {%- endif -%}\n  {%- else -%}\n    DROP SCHEDULE\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3160162, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_partition_by": {"name": "get_create_sql_partition_by", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/partitioning.sql", "original_file_path": "macros/relations/components/partitioning.sql", "unique_id": "macro.dbt_databricks.get_create_sql_partition_by", "macro_sql": "{% macro get_create_sql_partition_by(partition_by) -%}\n{%- if partition_by -%}\n  PARTITIONED BY ({%- for col in partition_by -%}{{ col }}{% if not loop.last %}, {% endif %}{%- endfor %})\n{%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.316309, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_tblproperties": {"name": "get_create_sql_tblproperties", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/tblproperties.sql", "original_file_path": "macros/relations/components/tblproperties.sql", "unique_id": "macro.dbt_databricks.get_create_sql_tblproperties", "macro_sql": "{% macro get_create_sql_tblproperties(tblproperties) %}\n  {%- if tblproperties and tblproperties|length>0 -%}\n    TBLPROPERTIES (\n    {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}'{%- if not loop.last -%}, {% endif -%}\n    {% endfor -%}\n    )\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.31667, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_table": {"name": "databricks__drop_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_table", "macro_sql": "{% macro databricks__drop_table(relation) -%}\n    drop table if exists {{ relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.316791, "supported_languages": null}, "macro.dbt_databricks.databricks__create_table_as": {"name": "databricks__create_table_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.databricks__create_table_as", "macro_sql": "{% macro databricks__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {%- set file_format = config.get('file_format', default='delta') -%}\n      {% if file_format == 'delta' %}\n        create or replace table {{ relation }}\n      {% else %}\n        create table {{ relation }}\n      {% endif %}\n      {%- set contract_config = config.get('contract') -%}\n      {% if contract_config and contract_config.enforced %}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% endif %}\n      {{ file_format_clause() }}\n      {{ options_clause() }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ liquid_clustered_cols() }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause(relation) }}\n      {{ comment_clause() }}\n      {{ tblproperties_clause() }}\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ databricks__py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_databricks.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_databricks.liquid_clustered_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_databricks.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt_databricks.databricks__py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3186061, "supported_languages": null}, "macro.dbt_databricks.databricks__options_clause": {"name": "databricks__options_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.databricks__options_clause", "macro_sql": "{% macro databricks__options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format', default='delta') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3195882, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_view": {"name": "databricks__drop_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_view", "macro_sql": "{% macro databricks__drop_view(relation) -%}\n    drop view if exists {{ relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.319715, "supported_languages": null}, "macro.dbt_databricks.databricks__create_view_as": {"name": "databricks__create_view_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_databricks.databricks__create_view_as", "macro_sql": "{% macro databricks__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {% if query_columns %}\n      (\n        {{ get_persist_docs_column_list(model_columns, query_columns) }}\n      )\n    {% endif %}\n  {% endif %}\n  {{ comment_clause() }}\n  {%- set contract_config = config.get('contract') -%}\n  {% if contract_config and contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {{ tblproperties_clause() }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_databricks.get_persist_docs_column_list", "macro.dbt_spark.comment_clause", "macro.dbt.get_assert_columns_equivalent", "macro.dbt_databricks.tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.320422, "supported_languages": null}, "macro.dbt_databricks.statement_with_staging_table": {"name": "statement_with_staging_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt_databricks.statement_with_staging_table", "macro_sql": "{% macro statement_with_staging_table(name=None, staging_table=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result, staging_table=staging_table) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.321161, "supported_languages": null}, "macro.dbt_databricks.databricks__dateadd": {"name": "databricks__dateadd", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_databricks.databricks__dateadd", "macro_sql": "{% macro databricks__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampadd({{datepart}}, {{interval}}, {{from_date_or_timestamp}})\n  {%- else -%}\n    {{ spark__dateadd(datepart, interval, from_date_or_timestamp) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.321526, "supported_languages": null}, "macro.dbt_databricks.databricks__datediff": {"name": "databricks__datediff", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_databricks.databricks__datediff", "macro_sql": "{% macro databricks__datediff(first_date, second_date, datepart) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampdiff({{datepart}}, {{date_trunc(datepart, first_date)}}, {{date_trunc(datepart, second_date)}})\n  {%- else -%}\n    {{ spark__datediff(first_date, second_date, datepart) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.spark_utils.spark__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.321929, "supported_languages": null}, "macro.dbt_databricks.databricks_copy_into": {"name": "databricks_copy_into", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/copy_into.sql", "original_file_path": "macros/adapters/copy_into.sql", "unique_id": "macro.dbt_databricks.databricks_copy_into", "macro_sql": "{% macro databricks_copy_into(\n  target_table,\n  source,\n  file_format,\n  expression_list=none,\n  source_credential=none,\n  source_encryption=none,\n  validate=none,\n  files=none,\n  pattern=none,\n  format_options=none,\n  copy_options=none) -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n        database=target.database,\n        schema=target.schema,\n        identifier=target_table,\n        type='table') -%}\n\n  {%- set source_clause -%}\n    {%- if expression_list -%}\n      ( select {{ expression_list }} from '{{ source }}' )\n    {%- else -%}\n      '{{ source }}'\n    {%- endif -%}\n    {%- if source_credential or source_encryption %}\n      WITH (\n      {%- if source_credential %}\n        credential (\n          {%- for name in source_credential -%}\n            '{{ name }}' = '{{ source_credential[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      {%- if source_encryption %}\n        encryption (\n          {%- for name in source_encryption -%}\n            '{{ name }}' = '{{ source_encryption[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      )\n    {%- endif -%}\n  {%- endset -%}\n\n  {% set query %}\n    copy into {{ target_relation }}\n    from {{ source_clause }}\n    fileformat = {{ file_format }}\n    {% if validate -%} validate {{ validate }} {%- endif %}\n    {% if files and pattern %}\n        {{ exceptions.raise_compiler_error(\"You can only specify one of 'files' or 'pattern'\") }}\n    {% endif %}\n    {% if files -%}\n      files = (\n        {%- for file in files -%}\n          '{{ file }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if pattern -%}\n        pattern = '{{ pattern }}'\n    {%- endif %}\n    {% if format_options -%}\n      format_options (\n        {%- for key in format_options -%}\n          '{{ key }}' = '{{ format_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if copy_options -%}\n      copy_options (\n        {%- for key in copy_options -%}\n          '{{ key }}' = '{{ copy_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n  {% endset %}\n\n  {% do log(\"Running COPY INTO\" ~ adapter.redact_credentials(query), info=True) %}\n  {% do run_query(query) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.325685, "supported_languages": null}, "macro.dbt_databricks.databricks__make_temp_relation": {"name": "databricks__make_temp_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.databricks__make_temp_relation", "macro_sql": "{% macro databricks__make_temp_relation(base_relation, suffix='__dbt_tmp', as_table=False) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {%- if as_table -%}\n        {% set tmp_relation = api.Relation.create(\n            identifier=tmp_identifier,\n            schema=base_relation.schema,\n            database=base_relation.database,\n            type='table') %}\n    {%- else -%}\n        {% set tmp_relation = api.Relation.create(identifier=tmp_identifier, type='view') %}\n    {%- endif -%}\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3264809, "supported_languages": null}, "macro.dbt_databricks.databricks__get_or_create_relation": {"name": "databricks__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.databricks__get_or_create_relation", "macro_sql": "{% macro databricks__get_or_create_relation(database, schema, identifier, type, needs_information=False) %}\n  {%- set target_relation = adapter.get_relation(\n            database=database,\n            schema=schema,\n            identifier=identifier,\n            needs_information=needs_information) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.326986, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog": {"name": "databricks__get_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog", "macro_sql": "{% macro databricks__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ databricks__get_catalog_tables_sql(information_schema) }}\n            {{ databricks__get_catalog_schemas_where_clause_sql(information_schema.database, schemas) }}\n        ),\n        columns as (\n            {{ databricks__get_catalog_columns_sql(information_schema) }}\n            {{ databricks__get_catalog_schemas_where_clause_sql(information_schema.database, schemas) }}\n        )\n        {{ databricks__get_catalog_results_sql() }}\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql", "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.329653, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_relations": {"name": "databricks__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_relations", "macro_sql": "{% macro databricks__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ databricks__get_catalog_tables_sql(information_schema) }}\n            {{ databricks__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ databricks__get_catalog_columns_sql(information_schema) }}\n            {{ databricks__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ databricks__get_catalog_results_sql() }}\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql", "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3299782, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_tables_sql": {"name": "databricks__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro_sql": "{% macro databricks__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as table_database,\n        table_schema,\n        table_name,\n        lower(table_type) as table_type,\n        comment as table_comment,\n        table_owner,\n        'Last Modified' as `stats:last_modified:label`,\n        last_altered as `stats:last_modified:value`,\n        'The timestamp for last update/change' as `stats:last_modified:description`,\n        (last_altered is not null and table_type not ilike '%VIEW%') as `stats:last_modified:include`\n    from `system`.`information_schema`.`tables`\n    where table_catalog = '{{ information_schema.database|lower }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.330115, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_columns_sql": {"name": "databricks__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro_sql": "{% macro databricks__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as table_database,\n        table_schema,\n        table_name,\n        column_name,\n        ordinal_position as column_index,\n        lower(data_type) as column_type,\n        comment as column_comment\n    from `system`.`information_schema`.`columns`\n    where table_catalog = '{{ information_schema.database|lower }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3302479, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_results_sql": {"name": "databricks__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro_sql": "{% macro databricks__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (table_database, table_schema, table_name)\n    order by column_index\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.330328, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql": {"name": "databricks__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro databricks__get_catalog_schemas_where_clause_sql(catalog, schemas) -%}\n    where table_catalog = '{{ catalog|lower }}' and ({%- for relation in schemas -%}\n        table_schema = '{{ relation[1]|lower }}'{%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.330574, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql": {"name": "databricks__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro databricks__get_catalog_relations_where_clause_sql(catalog, relations) -%}\n    where table_catalog = '{{ catalog|lower }}' and (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    table_schema = '{{ relation.schema|lower }}'\n                    and table_name = '{{ relation.identifier|lower }}'\n                )\n            {% elif relation.schema %}\n                (\n                    table_schema = '{{ relation.schema|lower }}'\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3310988, "supported_languages": null}, "macro.dbt_databricks.current_catalog": {"name": "current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.current_catalog", "macro_sql": "{% macro current_catalog() -%}\n  {{ return(adapter.dispatch('current_catalog', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__current_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.331425, "supported_languages": null}, "macro.dbt_databricks.databricks__current_catalog": {"name": "databricks__current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.databricks__current_catalog", "macro_sql": "{% macro databricks__current_catalog() -%}\n  {% call statement('current_catalog', fetch_result=True) %}\n      select current_catalog()\n  {% endcall %}\n  {% do return(load_result('current_catalog').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.331629, "supported_languages": null}, "macro.dbt_databricks.use_catalog": {"name": "use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.use_catalog", "macro_sql": "{% macro use_catalog(catalog) -%}\n  {{ return(adapter.dispatch('use_catalog', 'dbt')(catalog)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__use_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.331777, "supported_languages": null}, "macro.dbt_databricks.databricks__use_catalog": {"name": "databricks__use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.databricks__use_catalog", "macro_sql": "{% macro databricks__use_catalog(catalog) -%}\n  {% call statement() %}\n    use catalog {{ adapter.quote(catalog)|lower }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3319411, "supported_languages": null}, "macro.dbt_databricks.databricks__py_write_table": {"name": "databricks__py_write_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.databricks__py_write_table", "macro_sql": "{% macro databricks__py_write_table(compiled_code, target_relation) %}\n{{ compiled_code }}\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\nimport pyspark\n\n{{ py_try_import('pyspark.sql.connect.dataframe', 'newer_pyspark_available') }}\n{{ py_try_import('pandas', 'pandas_available') }}\n{{ py_try_import('pyspark.pandas', 'pyspark_pandas_api_available') }}\n{{ py_try_import('databricks.koalas', 'koalas_available') }}\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\n\nif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    if pyspark_pandas_api_available:\n        df = pyspark.pandas.frame.DataFrame(df)\n    elif koalas_available:\n        df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif newer_pyspark_available and isinstance(df, pyspark.sql.connect.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n    df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n    df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    df = spark.createDataFrame(df)\nelse:\n    msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n    raise Exception(msg)\n\nwriter = (\n    df.write\n        .mode(\"overwrite\")\n        .option(\"overwriteSchema\", \"true\")\n{{ py_get_writer_options()|indent(8, True) }}\n)\n\nwriter.saveAsTable(\"{{ target_relation }}\")\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.py_try_import", "macro.dbt_databricks.py_get_writer_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3339598, "supported_languages": null}, "macro.dbt_databricks.py_get_writer_options": {"name": "py_get_writer_options", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.py_get_writer_options", "macro_sql": "\n\n{%- macro py_get_writer_options() -%}\n{%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n{%- set file_format = config.get('file_format', validator=validation.any[basestring])|default('delta', true) -%}\n{%- set partition_by = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n{%- set liquid_clustered_by = config.get('liquid_clustered_by', validator=validation.any[list, basestring]) -%}\n{%- set clustered_by = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n{%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n.format(\"{{ file_format }}\")\n{%- if location_root is not none %}\n{%- set identifier = model['alias'] %}\n{%- if is_incremental() %}\n{%- set identifier = identifier + '__dbt_tmp' %}\n{%- endif %}\n.option(\"path\", \"{{ location_root }}/{{ identifier }}\")\n{%- endif -%}\n{%- if partition_by is not none -%}\n    {%- if partition_by is string -%}\n        {%- set partition_by = [partition_by] -%}\n    {%- endif %}\n.partitionBy({{ partition_by }})\n{%- endif -%}\n{%- if liquid_clustered_by and not is_incremental() -%}\n    {%- if liquid_clustered_by is string -%}\n        {%- set liquid_clustered_by = [liquid_clustered_by] -%}\n    {%- endif %}\n.clusterBy({{ liquid_clustered_by }})\n{%- endif -%}\n{%- if (clustered_by is not none) and (buckets is not none) -%}\n    {%- if clustered_by is string -%}\n        {%- set clustered_by = [clustered_by] -%}\n    {%- endif %}\n.bucketBy({{ buckets }}, {{ clustered_by }})\n{%- endif -%}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_unit_testing.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3353431, "supported_languages": null}, "macro.dbt_databricks.py_try_import": {"name": "py_try_import", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.py_try_import", "macro_sql": "{% macro py_try_import(library, var_name) -%}\n# make sure {{ library }} exists before using it\ntry:\n    import {{ library }}\n    {{ var_name }} = True\nexcept ImportError:\n    {{ var_name }} = False\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.335501, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_comment": {"name": "databricks__alter_column_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_comment", "macro_sql": "{% macro databricks__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', default='delta') in ['delta', 'hudi'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        alter table {{ relation }} change column\n            {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n            comment '{{ escaped_comment }}';\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3374012, "supported_languages": null}, "macro.dbt_databricks.alter_table_comment": {"name": "alter_table_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.alter_table_comment", "macro_sql": "{% macro alter_table_comment(relation, model) %}\n  {% set comment_query %}\n    comment on table {{ relation|lower }} is '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n  {% endset %}\n  {% do run_query(comment_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.337646, "supported_languages": null}, "macro.dbt_databricks.get_columns_comments": {"name": "get_columns_comments", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.get_columns_comments", "macro_sql": "{% macro get_columns_comments(relation) -%}\n  {% call statement('get_columns_comments', fetch_result=True) -%}\n    describe table {{ relation|lower }}\n  {% endcall %}\n\n  {% do return(load_result('get_columns_comments').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.337877, "supported_languages": null}, "macro.dbt_databricks.databricks__persist_docs": {"name": "databricks__persist_docs", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.databricks__persist_docs", "macro_sql": "{% macro databricks__persist_docs(relation, model, for_relation, for_columns) -%}\n  {%- if for_relation and config.persist_relation_docs() and model.description %}\n    {% do alter_table_comment(relation, model) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {%- set existing_columns = adapter.get_columns_in_relation(relation) -%}\n    {%- set columns_to_persist_docs = adapter.get_persist_doc_columns(existing_columns, model.columns) -%}\n    {% do alter_column_comment(relation, columns_to_persist_docs) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.alter_table_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3383482, "supported_languages": null}, "macro.dbt_databricks.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if column_name in column_dict and column_dict[column_name][\"description\"] -%}\n    {% set escaped_description = column_dict[column_name][\"description\"] | replace(\"'\", \"\\\\'\") %}\n    {% set column_comment_clause = \"comment '\" ~ escaped_description ~ \"'\" %}\n  {%- endif -%}\n  {{ adapter.quote(column_name) }} {{ column_comment_clause }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3387158, "supported_languages": null}, "macro.dbt_databricks.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.338947, "supported_languages": null}, "macro.dbt_databricks.databricks__list_relations_without_caching": {"name": "databricks__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__list_relations_without_caching", "macro_sql": "{% macro databricks__list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.get_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3423328, "supported_languages": null}, "macro.dbt_databricks.show_table_extended": {"name": "show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_table_extended", "macro_sql": "{% macro show_table_extended(schema_relation) %}\n  {{ return(adapter.dispatch('show_table_extended', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_table_extended"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.342488, "supported_languages": null}, "macro.dbt_databricks.databricks__show_table_extended": {"name": "databricks__show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_table_extended", "macro_sql": "{% macro databricks__show_table_extended(schema_relation) %}\n  {% call statement('show_table_extended', fetch_result=True) -%}\n    show table extended in {{ schema_relation.without_identifier()|lower }} like '{{ schema_relation.identifier|lower }}'\n  {% endcall %}\n\n  {% do return(load_result('show_table_extended').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.342775, "supported_languages": null}, "macro.dbt_databricks.show_tables": {"name": "show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_tables", "macro_sql": "{% macro show_tables(relation) %}\n  {{ return(adapter.dispatch('show_tables', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_tables"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.343015, "supported_languages": null}, "macro.dbt_databricks.databricks__show_tables": {"name": "databricks__show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_tables", "macro_sql": "{% macro databricks__show_tables(relation) %}\n  {% call statement('show_tables', fetch_result=True) -%}\n    show tables in {{ relation|lower }}\n  {% endcall %}\n\n  {% do return(load_result('show_tables').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.343245, "supported_languages": null}, "macro.dbt_databricks.show_views": {"name": "show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_views", "macro_sql": "{% macro show_views(relation) %}\n  {{ return(adapter.dispatch('show_views', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_views"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.343403, "supported_languages": null}, "macro.dbt_databricks.databricks__show_views": {"name": "databricks__show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_views", "macro_sql": "{% macro databricks__show_views(relation) %}\n  {% call statement('show_views', fetch_result=True) -%}\n    show views in {{ relation|lower }}\n  {% endcall %}\n\n  {% do return(load_result('show_views').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.343623, "supported_languages": null}, "macro.dbt_databricks.databricks__get_relation_last_modified": {"name": "databricks__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__get_relation_last_modified", "macro_sql": "{% macro databricks__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n    {% if information_schema.is_hive_metastore() %}\n        {%- for relation in relations -%}\n            select '{{ relation.schema }}' as schema,\n                    '{{ relation.identifier }}' as identifier,\n                    max(timestamp) as last_modified,\n                    {{ current_timestamp() }} as snapshotted_at\n            from (describe history {{ relation.schema|lower }}.{{ relation.identifier|lower }})\n            {% if not loop.last %}\n            union all\n            {% endif %}\n        {%- endfor -%}\n    {% else %}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from `system`.`information_schema`.`tables`\n        where table_catalog = '{{ information_schema.database|lower }}' and\n        (\n          {%- for relation in relations -%}\n            (table_schema = '{{ relation.schema|lower }}' and\n             table_name = '{{ relation.identifier|lower }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    {% endif %}\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3443189, "supported_languages": null}, "macro.dbt_databricks.get_view_description": {"name": "get_view_description", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_view_description", "macro_sql": "{% macro get_view_description(relation) %}\n  {% call statement('get_view_description', fetch_result=True) -%}\n    select *\n    from `system`.`information_schema`.`views`\n    where table_catalog = '{{ relation.database|lower }}'\n      and table_schema = '{{ relation.schema|lower }}'\n      and table_name = '{{ relation.identifier|lower }}'\n  {%- endcall -%}\n\n  {% do return(load_result('get_view_description').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.34462, "supported_languages": null}, "macro.dbt_databricks.get_uc_tables": {"name": "get_uc_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_uc_tables", "macro_sql": "{% macro get_uc_tables(relation) %}\n  {% call statement('get_uc_tables', fetch_result=True) -%}\n    select\n      table_name,\n      if(table_type in ('EXTERNAL', 'MANAGED', 'MANAGED_SHALLOW_CLONE', 'EXTERNAL_SHALLOW_CLONE'), 'table', lower(table_type)) as table_type,\n      lower(data_source_format) as file_format,\n      table_owner\n    from `system`.`information_schema`.`tables`\n    where table_catalog = '{{ relation.database|lower }}'\n      and table_schema = '{{ relation.schema|lower }}'\n    {% if relation.identifier %}\n      and table_name = '{{ relation.identifier|lower }}'\n    {% endif %}\n  {% endcall %}\n\n  {% do return(load_result('get_uc_tables').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3449721, "supported_languages": null}, "macro.dbt_spark.tblproperties_clause": {"name": "tblproperties_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.tblproperties_clause", "macro_sql": "{% macro tblproperties_clause() %}\n  {{ return(adapter.dispatch('tblproperties_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.359665, "supported_languages": null}, "macro.dbt_spark.spark__tblproperties_clause": {"name": "spark__tblproperties_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__tblproperties_clause", "macro_sql": "{% macro spark__tblproperties_clause() -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- if tblproperties is not none %}\n    tblproperties (\n      {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}' {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3600059, "supported_languages": null}, "macro.dbt_spark.file_format_clause": {"name": "file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {{ return(adapter.dispatch('file_format_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__file_format_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3601432, "supported_languages": null}, "macro.dbt_spark.spark__file_format_clause": {"name": "spark__file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__file_format_clause", "macro_sql": "{% macro spark__file_format_clause() %}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.360354, "supported_languages": null}, "macro.dbt_spark.location_clause": {"name": "location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.location_clause", "macro_sql": "{% macro location_clause() %}\n  {{ return(adapter.dispatch('location_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__location_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.360492, "supported_languages": null}, "macro.dbt_spark.spark__location_clause": {"name": "spark__location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__location_clause", "macro_sql": "{% macro spark__location_clause() %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.360773, "supported_languages": null}, "macro.dbt_spark.options_clause": {"name": "options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.options_clause", "macro_sql": "{% macro options_clause() -%}\n  {{ return(adapter.dispatch('options_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__options_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.360908, "supported_languages": null}, "macro.dbt_spark.spark__options_clause": {"name": "spark__options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__options_clause", "macro_sql": "{% macro spark__options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.361848, "supported_languages": null}, "macro.dbt_spark.comment_clause": {"name": "comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.comment_clause", "macro_sql": "{% macro comment_clause() %}\n  {{ return(adapter.dispatch('comment_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.361994, "supported_languages": null}, "macro.dbt_spark.spark__comment_clause": {"name": "spark__comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__comment_clause", "macro_sql": "{% macro spark__comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {% endif %}\n  {%- elif raw_persist_docs -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.362388, "supported_languages": null}, "macro.dbt_spark.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.partition_cols", "macro_sql": "{% macro partition_cols(label, required=false) %}\n  {{ return(adapter.dispatch('partition_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3625758, "supported_languages": null}, "macro.dbt_spark.spark__partition_cols": {"name": "spark__partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__partition_cols", "macro_sql": "{% macro spark__partition_cols(label, required=false) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.363032, "supported_languages": null}, "macro.dbt_spark.clustered_cols": {"name": "clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.clustered_cols", "macro_sql": "{% macro clustered_cols(label, required=false) %}\n  {{ return(adapter.dispatch('clustered_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__clustered_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3632178, "supported_languages": null}, "macro.dbt_spark.spark__clustered_cols": {"name": "spark__clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__clustered_cols", "macro_sql": "{% macro spark__clustered_cols(label, required=false) %}\n  {%- set cols = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n  {%- if (cols is not none) and (buckets is not none) %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    ) into {{ buckets }} buckets\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.363801, "supported_languages": null}, "macro.dbt_spark.fetch_tbl_properties": {"name": "fetch_tbl_properties", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.fetch_tbl_properties", "macro_sql": "{% macro fetch_tbl_properties(relation) -%}\n  {% call statement('list_properties', fetch_result=True) -%}\n    SHOW TBLPROPERTIES {{ relation }}\n  {% endcall %}\n  {% do return(load_result('list_properties').table) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.364021, "supported_languages": null}, "macro.dbt_spark.create_temporary_view": {"name": "create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.create_temporary_view", "macro_sql": "{% macro create_temporary_view(relation, compiled_code) -%}\n  {{ return(adapter.dispatch('create_temporary_view', 'dbt')(relation, compiled_code)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__create_temporary_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.364192, "supported_languages": null}, "macro.dbt_spark.spark__create_temporary_view": {"name": "spark__create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_temporary_view", "macro_sql": "{% macro spark__create_temporary_view(relation, compiled_code) -%}\n    create or replace temporary view {{ relation }} as\n      {{ compiled_code }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3643038, "supported_languages": null}, "macro.dbt_spark.spark__create_table_as": {"name": "spark__create_table_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_table_as", "macro_sql": "{%- macro spark__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'iceberg'] %}\n        create or replace table {{ relation }}\n      {% else %}\n        create table {{ relation }}\n      {% endif %}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% endif %}\n      {{ file_format_clause() }}\n      {{ options_clause() }}\n      {{ tblproperties_clause() }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause() }}\n      {{ comment_clause() }}\n\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.tblproperties_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_spark.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3652081, "supported_languages": null}, "macro.dbt_spark.persist_constraints": {"name": "persist_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.persist_constraints", "macro_sql": "{% macro persist_constraints(relation, model) %}\n  {{ return(adapter.dispatch('persist_constraints', 'dbt')(relation, model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.36539, "supported_languages": null}, "macro.dbt_spark.spark__persist_constraints": {"name": "spark__persist_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__persist_constraints", "macro_sql": "{% macro spark__persist_constraints(relation, model) %}\n  {%- set contract_config = config.get('contract') -%}\n  {% if contract_config.enforced and config.get('file_format', 'delta') == 'delta' %}\n    {% do alter_table_add_constraints(relation, model.constraints) %}\n    {% do alter_column_set_constraints(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.alter_table_add_constraints", "macro.dbt_spark.alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.365728, "supported_languages": null}, "macro.dbt_spark.alter_table_add_constraints": {"name": "alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.alter_table_add_constraints", "macro_sql": "{% macro alter_table_add_constraints(relation, constraints) %}\n  {{ return(adapter.dispatch('alter_table_add_constraints', 'dbt')(relation, constraints)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3659031, "supported_languages": null}, "macro.dbt_spark.spark__alter_table_add_constraints": {"name": "spark__alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_table_add_constraints", "macro_sql": "{% macro spark__alter_table_add_constraints(relation, constraints) %}\n  {% for constraint in constraints %}\n    {% if constraint.type == 'check' and not is_incremental() %}\n      {%- set constraint_hash = local_md5(column_name ~ \";\" ~ constraint.expression ~ \";\" ~ loop.index) -%}\n      {% call statement() %}\n        alter table {{ relation }} add constraint {{ constraint.name if constraint.name else constraint_hash }} check ({{ constraint.expression }});\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.is_incremental", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.366343, "supported_languages": null}, "macro.dbt_spark.alter_column_set_constraints": {"name": "alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.alter_column_set_constraints", "macro_sql": "{% macro alter_column_set_constraints(relation, column_dict) %}\n  {{ return(adapter.dispatch('alter_column_set_constraints', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.366529, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_set_constraints": {"name": "spark__alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_set_constraints", "macro_sql": "{% macro spark__alter_column_set_constraints(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set constraints = column_dict[column_name]['constraints'] %}\n    {% for constraint in constraints %}\n      {% if constraint.type != 'not_null' %}\n        {{ exceptions.warn('Invalid constraint for column ' ~ column_name ~ '. Only `not_null` is supported.') }}\n      {% else %}\n        {% set quoted_name = adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name %}\n        {% call statement() %}\n          alter table {{ relation }} change column {{ quoted_name }} set not null {{ constraint.expression or \"\" }};\n        {% endcall %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.367098, "supported_languages": null}, "macro.dbt_spark.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if column_name in column_dict and column_dict[column_name][\"description\"] -%}\n    {% set escaped_description = column_dict[column_name][\"description\"] | replace(\"'\", \"\\\\'\") %}\n    {% set column_comment_clause = \"comment '\" ~ escaped_description ~ \"'\" %}\n  {%- endif -%}\n  {{ adapter.quote(column_name) }} {{ column_comment_clause }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.367528, "supported_languages": null}, "macro.dbt_spark.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3677561, "supported_languages": null}, "macro.dbt_spark.spark__create_view_as": {"name": "spark__create_view_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_view_as", "macro_sql": "{% macro spark__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    (\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    )\n  {% endif %}\n  {{ comment_clause() }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_spark.get_persist_docs_column_list", "macro.dbt_spark.comment_clause", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.368195, "supported_languages": null}, "macro.dbt_spark.spark__create_schema": {"name": "spark__create_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_schema", "macro_sql": "{% macro spark__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{relation}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.368337, "supported_languages": null}, "macro.dbt_spark.spark__drop_schema": {"name": "spark__drop_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_schema", "macro_sql": "{% macro spark__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.368468, "supported_languages": null}, "macro.dbt_spark.get_columns_in_relation_raw": {"name": "get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_columns_in_relation_raw", "macro_sql": "{% macro get_columns_in_relation_raw(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation_raw', 'dbt')(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation_raw"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.368623, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation_raw": {"name": "spark__get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation_raw", "macro_sql": "{% macro spark__get_columns_in_relation_raw(relation) -%}\n  {% call statement('get_columns_in_relation_raw', fetch_result=True) %}\n      describe extended {{ relation }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation_raw').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.368842, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation": {"name": "spark__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation", "macro_sql": "{% macro spark__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      describe extended {{ relation.include(schema=(schema is not none)) }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.36911, "supported_languages": null}, "macro.dbt_spark.spark__list_relations_without_caching": {"name": "spark__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__list_relations_without_caching", "macro_sql": "{% macro spark__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    show table extended in {{ relation.schema }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.369341, "supported_languages": null}, "macro.dbt_spark.list_relations_show_tables_without_caching": {"name": "list_relations_show_tables_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.list_relations_show_tables_without_caching", "macro_sql": "{% macro list_relations_show_tables_without_caching(schema_relation) %}\n  {#-- Spark with iceberg tables don't work with show table extended for #}\n  {#-- V2 iceberg tables #}\n  {#-- https://issues.apache.org/jira/browse/SPARK-33393 #}\n  {% call statement('list_relations_without_caching_show_tables', fetch_result=True) -%}\n    show tables in {{ schema_relation.schema }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching_show_tables').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3695848, "supported_languages": null}, "macro.dbt_spark.describe_table_extended_without_caching": {"name": "describe_table_extended_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.describe_table_extended_without_caching", "macro_sql": "{% macro describe_table_extended_without_caching(table_name) %}\n  {#-- Spark with iceberg tables don't work with show table extended for #}\n  {#-- V2 iceberg tables #}\n  {#-- https://issues.apache.org/jira/browse/SPARK-33393 #}\n  {% call statement('describe_table_extended_without_caching', fetch_result=True) -%}\n    describe extended {{ table_name }}\n  {% endcall %}\n  {% do return(load_result('describe_table_extended_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.369827, "supported_languages": null}, "macro.dbt_spark.spark__list_schemas": {"name": "spark__list_schemas", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__list_schemas", "macro_sql": "{% macro spark__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    show databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3700411, "supported_languages": null}, "macro.dbt_spark.spark__rename_relation": {"name": "spark__rename_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__rename_relation", "macro_sql": "{% macro spark__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    {% if not from_relation.type %}\n      {% do exceptions.raise_database_error(\"Cannot rename a relation with a blank type: \" ~ from_relation.identifier) %}\n    {% elif from_relation.type in ('table') %}\n        alter table {{ from_relation }} rename to {{ to_relation }}\n    {% elif from_relation.type == 'view' %}\n        alter view {{ from_relation }} rename to {{ to_relation }}\n    {% else %}\n      {% do exceptions.raise_database_error(\"Unknown type '\" ~ from_relation.type ~ \"' for relation: \" ~ from_relation.identifier) %}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.37052, "supported_languages": null}, "macro.dbt_spark.spark__drop_relation": {"name": "spark__drop_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_relation", "macro_sql": "{% macro spark__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.370698, "supported_languages": null}, "macro.dbt_spark.spark__generate_database_name": {"name": "spark__generate_database_name", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__generate_database_name", "macro_sql": "{% macro spark__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.370828, "supported_languages": null}, "macro.dbt_spark.spark__persist_docs": {"name": "spark__persist_docs", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__persist_docs", "macro_sql": "{% macro spark__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.371051, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_comment": {"name": "spark__alter_column_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_comment", "macro_sql": "{% macro spark__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'hudi', 'iceberg'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        {% if relation.is_iceberg %}\n          alter table {{ relation }} alter column\n              {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n              comment '{{ escaped_comment }}';\n        {% else %}\n          alter table {{ relation }} change column\n              {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n              comment '{{ escaped_comment }}';\n        {% endif %}\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3718998, "supported_languages": null}, "macro.dbt_spark.spark__make_temp_relation": {"name": "spark__make_temp_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__make_temp_relation", "macro_sql": "{% macro spark__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(path = {\n        \"identifier\": tmp_identifier\n    }) -%}\n\n    {%- set tmp_relation = tmp_relation.include(database=false, schema=false) -%}\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.372244, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_type": {"name": "spark__alter_column_type", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_type", "macro_sql": "{% macro spark__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter column {{ column_name }} type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.37243, "supported_languages": null}, "macro.dbt_spark.spark__alter_relation_add_remove_columns": {"name": "spark__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_relation_add_remove_columns", "macro_sql": "{% macro spark__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if remove_columns %}\n    {% if relation.is_delta %}\n      {% set platform_name = 'Delta Lake' %}\n    {% elif relation.is_iceberg %}\n      {% set platform_name = 'Iceberg' %}\n    {% else %}\n      {% set platform_name = 'Apache Spark' %}\n    {% endif %}\n    {{ exceptions.raise_compiler_error(platform_name + ' does not support dropping columns from tables') }}\n  {% endif %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n       {% if add_columns %} add columns {% endif %}\n            {% for column in add_columns %}\n               {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.373157, "supported_languages": null}, "macro.dbt_spark.spark__copy_grants": {"name": "spark__copy_grants", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__copy_grants", "macro_sql": "{% macro spark__copy_grants() %}\n\n    {% if config.materialized == 'view' %}\n        {#-- Spark views don't copy grants when they're replaced --#}\n        {{ return(False) }}\n\n    {% else %}\n      {#-- This depends on how we're replacing the table, which depends on its file format\n        -- Just play it safe by assuming that grants have been copied over, and need to be checked / possibly revoked\n        -- We can make this more efficient in the future\n      #}\n        {{ return(True) }}\n\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3737469, "supported_languages": null}, "macro.dbt_spark.spark__get_grant_sql": {"name": "spark__get_grant_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_grant_sql", "macro_sql": "\n\n\n{%- macro spark__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.373923, "supported_languages": null}, "macro.dbt_spark.spark__get_revoke_sql": {"name": "spark__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_revoke_sql", "macro_sql": "\n\n\n{%- macro spark__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.374089, "supported_languages": null}, "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement": {"name": "spark__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n\n{%- macro spark__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.374186, "supported_languages": null}, "macro.dbt_spark.spark__call_dcl_statements": {"name": "spark__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__call_dcl_statements", "macro_sql": "{% macro spark__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n        {% call statement('grant_or_revoke') %}\n            {{ dcl_statement }}\n        {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.374371, "supported_languages": null}, "macro.dbt_spark.spark__get_binding_char": {"name": "spark__get_binding_char", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__get_binding_char", "macro_sql": "{% macro spark__get_binding_char() %}\n  {{ return('?' if target.method == 'odbc' else '%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.375835, "supported_languages": null}, "macro.dbt_spark.spark__reset_csv_table": {"name": "spark__reset_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__reset_csv_table", "macro_sql": "{% macro spark__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n        {{ adapter.drop_relation(old_relation) }}\n    {% endif %}\n    {% set sql = create_csv_table(model, agate_table) %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.376096, "supported_languages": null}, "macro.dbt_spark.spark__load_csv_rows": {"name": "spark__load_csv_rows", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__load_csv_rows", "macro_sql": "{% macro spark__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                  {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3771951, "supported_languages": null}, "macro.dbt_spark.spark__create_csv_table": {"name": "spark__create_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__create_csv_table", "macro_sql": "{% macro spark__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3781571, "supported_languages": null}, "macro.dbt_spark.materialization_view_spark": {"name": "materialization_view_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_spark.materialization_view_spark", "macro_sql": "{% materialization view, adapter='spark' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.378324, "supported_languages": ["sql"]}, "macro.dbt_spark.materialization_table_spark": {"name": "materialization_table_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.materialization_table_spark", "macro_sql": "{% materialization table, adapter = 'spark', supported_languages=['sql', 'python'] %}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta or iceberg, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation is not none %}\n    {% set is_delta = (old_relation.is_delta and config.get('file_format', validator=validation.any[basestring]) == 'delta') %}\n    {% set is_iceberg = (old_relation.is_iceberg and config.get('file_format', validator=validation.any[basestring]) == 'iceberg') %}\n    {% set old_relation_type = old_relation.type %}\n  {% else %}\n    {% set is_delta = false %}\n    {% set is_iceberg = false %}\n    {% set old_relation_type = target_relation.type %}\n  {% endif %}\n\n  {% if not is_delta and not is_iceberg %}\n    {% set existing_relation = target_relation %}\n    {{ adapter.drop_relation(existing_relation.incorporate(type=old_relation_type)) }}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_spark.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3818629, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n{{ compiled_code }}\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\n# make sure pyspark exists in the namepace, for 7.3.x-scala2.12 it does not exist\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write.mode(\"overwrite\").format(\"{{ config.get('file_format', 'delta') }}\").option(\"overwriteSchema\", \"true\").saveAsTable(\"{{ target_relation }}\")\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.382144, "supported_languages": null}, "macro.dbt_spark.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# how to execute python model in notebook\n# dbt = dbtObj(spark.table)\n# df = model(dbt, spark)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.382213, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_hash_arguments": {"name": "spark__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_hash_arguments", "macro_sql": "{% macro spark__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as string ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.388961, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_string_as_time": {"name": "spark__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_string_as_time", "macro_sql": "{% macro spark__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.38912, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_merge_sql": {"name": "spark__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_merge_sql", "macro_sql": "{% macro spark__snapshot_merge_sql(target, source, insert_cols) -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    {% if target.is_iceberg %}\n      {# create view only supports a name (no catalog, or schema) #}\n      using {{ source.identifier }} as DBT_INTERNAL_SOURCE\n    {% else %}\n      using {{ source }} as DBT_INTERNAL_SOURCE\n    {% endif %}\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert *\n    ;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.389348, "supported_languages": null}, "macro.dbt_spark.spark_build_snapshot_staging_table": {"name": "spark_build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark_build_snapshot_staging_table", "macro_sql": "{% macro spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n\n    {% if target_relation.is_iceberg %}\n      {# iceberg catalog does not support create view, but regular spark does. We removed the catalog and schema #}\n      {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                    schema=none,\n                                                    database=none,\n                                                    type='view') -%}\n    {% else %}\n      {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                    schema=target_relation.schema,\n                                                    database=none,\n                                                    type='view') -%}\n    {% endif %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.390003, "supported_languages": null}, "macro.dbt_spark.spark__post_snapshot": {"name": "spark__post_snapshot", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__post_snapshot", "macro_sql": "{% macro spark__post_snapshot(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3901272, "supported_languages": null}, "macro.dbt_spark.spark__create_columns": {"name": "spark__create_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__create_columns", "macro_sql": "{% macro spark__create_columns(relation, columns) %}\n    {% if columns|length > 0 %}\n    {% call statement() %}\n      alter table {{ relation }} add columns (\n        {% for column in columns %}\n          `{{ column.name }}` {{ column.data_type }} {{- ',' if not loop.last -}}\n        {% endfor %}\n      );\n    {% endcall %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.390454, "supported_languages": null}, "macro.dbt_spark.materialization_snapshot_spark": {"name": "materialization_snapshot_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.materialization_snapshot_spark", "macro_sql": "{% materialization snapshot, adapter='spark' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if file_format not in ['delta', 'iceberg', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'iceberg' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_iceberg and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'iceberg' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3936791, "supported_languages": ["sql"]}, "macro.dbt_spark.spark__can_clone_table": {"name": "spark__can_clone_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.spark__can_clone_table", "macro_sql": "{% macro spark__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.39551, "supported_languages": null}, "macro.dbt_spark.spark__create_or_replace_clone": {"name": "spark__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.spark__create_or_replace_clone", "macro_sql": "{% macro spark__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} shallow clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.39562, "supported_languages": null}, "macro.dbt_spark.materialization_clone_spark": {"name": "materialization_clone_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.materialization_clone_spark", "macro_sql": "\n\n{%- materialization clone, adapter='spark' -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if file_format != 'delta' -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      shallow clone requires file_format be set to 'delta'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {%- elif other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n  {% endif %}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3973691, "supported_languages": ["sql"]}, "macro.dbt_spark.spark__get_merge_update_columns": {"name": "spark__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/column_helpers.sql", "original_file_path": "macros/materializations/incremental/column_helpers.sql", "unique_id": "macro.dbt_spark.spark__get_merge_update_columns", "macro_sql": "{% macro spark__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = None -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.398161, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_file_format": {"name": "dbt_spark_validate_get_file_format", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_file_format", "macro_sql": "{% macro dbt_spark_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'iceberg', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.399133, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy": {"name": "dbt_spark_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'merge', 'insert_overwrite'\n  {%- endset %}\n\n  {% set invalid_merge_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta' or 'iceberg' or 'hudi'\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via endpoint\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'iceberg', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_merge_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and target.endpoint %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_endpoint_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.3998358, "supported_languages": null}, "macro.dbt_spark.get_insert_overwrite_sql": {"name": "get_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation, existing_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% if existing_relation.is_iceberg %}\n      {# removed table from statement for iceberg #}\n      insert overwrite {{ target_relation }}\n      {# removed partition_cols for iceberg as well #}\n    {% else %}\n      insert overwrite table {{ target_relation }}\n      {{ partition_cols(label=\"partition\") }}\n    {% endif %}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4015172, "supported_languages": null}, "macro.dbt_spark.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert into table {{ target_relation }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.401792, "supported_languages": null}, "macro.dbt_spark.spark__get_merge_sql": {"name": "spark__get_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.spark__get_merge_sql", "macro_sql": "{% macro spark__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n  {# need dest_columns for merge_exclude_columns, default to use \"*\" #}\n  {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n  {%- set dest_columns = adapter.get_columns_in_relation(target) -%}\n  {%- set merge_update_columns = config.get('merge_update_columns') -%}\n  {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n  {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n\n  {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key %}\n              {% set this_key_match %}\n                  DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n              {% endset %}\n              {% do predicates.append(this_key_match) %}\n          {% endfor %}\n      {% else %}\n          {% set unique_key_match %}\n              DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n          {% endset %}\n          {% do predicates.append(unique_key_match) %}\n      {% endif %}\n  {% else %}\n      {% do predicates.append('FALSE') %}\n  {% endif %}\n\n  {{ sql_header if sql_header is not none }}\n\n  merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source }} as DBT_INTERNAL_SOURCE\n      on {{ predicates | join(' and ') }}\n\n      when matched then update set\n        {% if update_columns -%}{%- for column_name in update_columns %}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        {%- else %} * {% endif %}\n\n      when not matched then insert *\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4030359, "supported_languages": null}, "macro.dbt_spark.dbt_spark_get_incremental_sql": {"name": "dbt_spark_get_incremental_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro_sql": "{% macro dbt_spark_get_incremental_sql(strategy, source, target, existing, unique_key, incremental_predicates) %}\n  {%- if strategy == 'append' -%}\n    {#-- insert new records into existing table, without updating or overwriting #}\n    {{ get_insert_into_sql(source, target) }}\n  {%- elif strategy == 'insert_overwrite' -%}\n    {#-- insert statements don't like CTEs, so support them via a temp view #}\n    {{ get_insert_overwrite_sql(source, target, existing) }}\n  {%- elif strategy == 'merge' -%}\n  {#-- merge all columns for datasources which implement MERGE INTO (e.g. databricks, iceberg) - schema changes are handled for us #}\n    {{ get_merge_sql(target, source, unique_key, dest_columns=none, incremental_predicates=incremental_predicates) }}\n  {%- else -%}\n    {% set no_sql_for_strategy_msg -%}\n      No known SQL for the incremental strategy provided: {{ strategy }}\n    {%- endset %}\n    {%- do exceptions.raise_compiler_error(no_sql_for_strategy_msg) -%}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql", "macro.dbt_spark.get_insert_overwrite_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.403687, "supported_languages": null}, "macro.dbt_spark.materialization_incremental_spark": {"name": "materialization_incremental_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_spark.materialization_incremental_spark", "macro_sql": "{% materialization incremental, adapter='spark', supported_languages=['sql', 'python'] -%}\n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='parquet') -%}\n  {%- set raw_strategy = config.get('incremental_strategy') or 'append' -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n\n  {#-- Set vars --#}\n\n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {%- set language = model['language'] -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) -%}\n  {%- set target_relation = this -%}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(this) -%}\n\n  {#-- for SQL model we will create temp view that doesn't have database and schema --#}\n  {%- if language == 'sql'-%}\n    {%- set tmp_relation = tmp_relation.include(database=false, schema=false) -%}\n  {%- endif -%}\n\n  {#-- Set Overwrite Mode --#}\n  {%- if strategy == 'insert_overwrite' and partition_by -%}\n    {%- call statement() -%}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {%- endcall -%}\n  {%- endif -%}\n\n  {#-- Run pre-hooks --#}\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Incremental run logic --#}\n  {%- if existing_relation is none -%}\n    {#-- Relation must be created --#}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {% do persist_constraints(target_relation, model) %}\n  {%- elif existing_relation.is_view or should_full_refresh() -%}\n    {#-- Relation must be dropped & recreated --#}\n    {% set is_delta = (file_format == 'delta' and existing_relation.is_delta) %}\n    {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n      {% do adapter.drop_relation(existing_relation) %}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {% do persist_constraints(target_relation, model) %}\n  {%- else -%}\n    {#-- Relation must be merged --#}\n    {%- call statement('create_tmp_relation', language=language) -%}\n      {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {%- do process_schema_changes(on_schema_change, tmp_relation, existing_relation) -%}\n    {%- call statement('main') -%}\n      {{ dbt_spark_get_incremental_sql(strategy, tmp_relation, target_relation, existing_relation, unique_key, incremental_predicates) }}\n    {%- endcall -%}\n    {%- if language == 'python' -%}\n      {#--\n      This is yucky.\n      See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n      re: python models and temporary views.\n\n      Also, why do neither drop_relation or adapter.drop_relation work here?!\n      --#}\n      {% call statement('drop_relation') -%}\n        drop table if exists {{ tmp_relation }}\n      {%- endcall %}\n    {%- endif -%}\n  {%- endif -%}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_spark.persist_constraints", "macro.dbt.should_full_refresh", "macro.dbt.process_schema_changes", "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.406729, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt_spark.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.406888, "supported_languages": null}, "macro.dbt_spark.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/assert_not_null.sql", "original_file_path": "macros/utils/assert_not_null.sql", "unique_id": "macro.dbt_spark.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'dbt')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4071639, "supported_languages": null}, "macro.dbt_spark.spark__assert_not_null": {"name": "spark__assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/assert_not_null.sql", "original_file_path": "macros/utils/assert_not_null.sql", "unique_id": "macro.dbt_spark.spark__assert_not_null", "macro_sql": "{% macro spark__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.407327, "supported_languages": null}, "macro.dbt_spark.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_spark.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n\n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4095879, "supported_languages": null}, "macro.dbt_spark.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_spark.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() -%}\n    current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.409686, "supported_languages": null}, "macro.dbt_spark.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_spark.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.409842, "supported_languages": null}, "macro.dbt_spark.spark__listagg": {"name": "spark__listagg", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_spark.spark__listagg", "macro_sql": "{% macro spark__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n  {% if order_by_clause %}\n    {{ exceptions.warn(\"order_by_clause is not supported for listagg on Spark/Databricks\") }}\n  {% endif %}\n\n  {% set collect_list %} collect_list({{ measure }}) {% endset %}\n\n  {% set limited %} slice({{ collect_list }}, 1, {{ limit_num }}) {% endset %}\n\n  {% set collected = limited if limit_num else collect_list %}\n\n  {% set final %} array_join({{ collected }}, {{ delimiter_text }}) {% endset %}\n\n  {% do return(final) %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.410454, "supported_languages": null}, "macro.dbt_spark.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_spark.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n\n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = assert_not_null('date', first_date) %}\n        {% set second_date = assert_not_null('date', second_date) %}\n\n    {%- endif -%}\n\n    {%- if datepart == 'day' -%}\n\n        datediff({{second_date}}, {{first_date}})\n\n    {%- elif datepart == 'week' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n\n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n\n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'quarter' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n\n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n\n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set divisor -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n\n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n\n            {% if datepart == 'microsecond' %}\n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)\n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.416289, "supported_languages": null}, "macro.dbt_spark.spark__safe_cast": {"name": "spark__safe_cast", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_spark.spark__safe_cast", "macro_sql": "{% macro spark__safe_cast(field, type) %}\n{%- set field_clean = field.strip('\"').strip(\"'\") if (cast_from_string_unsupported_for(type) and field is string) else field -%}\ncast({{field_clean}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.cast_from_string_unsupported_for"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.41665, "supported_languages": null}, "macro.dbt_spark.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_spark.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower().startswith('array') or type.lower().startswith('map')) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.416883, "supported_languages": null}, "macro.dbt_spark.spark__any_value": {"name": "spark__any_value", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_spark.spark__any_value", "macro_sql": "{% macro spark__any_value(expression) -%}\n    {#-- return any value (non-deterministic)  --#}\n    first({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4170098, "supported_languages": null}, "macro.dbt_spark.spark__array_concat": {"name": "spark__array_concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_spark.spark__array_concat", "macro_sql": "{% macro spark__array_concat(array_1, array_2) -%}\n    concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4171588, "supported_languages": null}, "macro.dbt_spark.spark__bool_or": {"name": "spark__bool_or", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_spark.spark__bool_or", "macro_sql": "{% macro spark__bool_or(expression) -%}\n\n    max({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.417283, "supported_languages": null}, "macro.dbt_spark.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_spark.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n\n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n\n    {% endset %}\n\n    {% if part_number >= 0 %}\n\n        {% set split_part_expr %}\n\n        split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            )[({{ part_number - 1 if part_number > 0 else part_number }})]\n\n        {% endset %}\n\n    {% else %}\n\n        {% set split_part_expr %}\n\n        split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            )[(\n                length({{ string_text }})\n                - length(\n                    replace({{ string_text }},  {{ delimiter_text }}, '')\n                ) + 1 + {{ part_number }}\n            )]\n\n        {% endset %}\n\n    {% endif %}\n\n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4183092, "supported_languages": null}, "macro.dbt_spark.spark__array_construct": {"name": "spark__array_construct", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_spark.spark__array_construct", "macro_sql": "{% macro spark__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.418462, "supported_languages": null}, "macro.dbt_spark.spark__array_append": {"name": "spark__array_append", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_spark.spark__array_append", "macro_sql": "{% macro spark__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4186308, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.419541, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.419712, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4198358, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.419955, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4200761, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.420407, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.42066, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.420913, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.421429, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.421907, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.42464, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.424785, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.424968, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4256709, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4258099, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.42595, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.42709, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.428372, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4338932, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4341362, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4342752, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.434347, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4344661, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4345632, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.434731, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4349198, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4359639, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.436125, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.43648, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.436831, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.437311, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4377291, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.442181, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.44437, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.445329, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.445577, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4457548, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4462452, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.446572, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4468758, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.448323, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.452336, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.45266, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.452873, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4539928, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.454186, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.454727, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4571, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4595032, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.460866, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.461312, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4618518, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.462045, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.462635, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.467649, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.468987, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.469206, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.470017, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4702458, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.470773, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.471292, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4722219, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.472417, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.472574, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.472826, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.472981, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4732218, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.473378, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.473592, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.473744, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.473865, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.474018, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.474151, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.474377, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.478692, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.483202, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4841979, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4851809, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.485871, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.486073, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.486169, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4864142, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.48655, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.489533, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4922009, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4962502, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.496974, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4971719, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.497568, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.4977338, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.497843, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.497958, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.498055, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.498191, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.498294, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.498699, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.49885, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.499873, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.500231, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5005429, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5009952, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5012171, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.501457, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.501802, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.502063, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.502698, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.503027, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5032, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5033689, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.503563, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.504498, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.50564, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.505981, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.506193, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5064309, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.506613, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5068831, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5070632, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.507663, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.508016, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5081851, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.508438, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.508735, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.508975, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.509377, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.509753, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.510027, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.510206, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51042, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51052, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.510747, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.510934, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.511192, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51131, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.511539, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.511659, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.512395, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.512577, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51282, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.512943, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.513186, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51331, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5141718, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.514273, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.514722, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5148668, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.514977, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5161312, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.516441, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.516736, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.516948, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.517047, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.51728, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.517399, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.517626, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.517747, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.518473, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5186272, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.518977, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.519534, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.519915, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.520072, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5202172, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.520428, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5205271, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.521253, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.521371, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5225139, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.52272, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5229282, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.52318, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5233102, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5236712, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5238101, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.523963, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.524341, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.524653, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.524904, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.52512, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5256052, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.52684, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.527605, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.527854, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5293891, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.530349, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.530957, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5311491, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5313358, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.531399, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5320241, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.53251, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.532703, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5330172, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.533313, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.533547, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.533825, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5339599, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.534164, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.534265, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.534976, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.535382, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.535542, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5359628, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5361788, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.536271, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.536551, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5366888, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.536874, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.536941, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5371578, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.537282, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5375202, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.537633, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5381498, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.538482, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5387578, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.538893, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.539131, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.539253, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.539465, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.539597, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.539875, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5400162, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.540249, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.540355, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.54057, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.540661, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5409029, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5410209, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5412228, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.541311, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5421178, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.542242, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5423832, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.542505, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.542641, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.542766, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.542902, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.54305, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5431879, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.543382, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.543519, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.543647, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.543784, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5439181, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5441558, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.544271, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5444832, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5445728, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.544872, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5451021, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.545227, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5456939, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.545846, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5460322, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.546259, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5463722, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5466821, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5469282, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5471659, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.547353, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.547664, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.547819, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.547959, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.548106, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.548675, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5488, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5489228, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.54901, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.549349, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.549498, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5495648, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.549699, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.549839, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5505412, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.550661, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.55081, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.551202, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.551357, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5514739, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5516028, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.551709, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.553362, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5535061, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.553688, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.553935, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.554137, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5544162, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.554563, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.554713, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.554917, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.555365, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.555552, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.555671, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.556017, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5563562, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.556601, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.556881, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5583858, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.558482, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.558629, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.558722, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5590131, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.559168, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.559267, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.559457, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.559631, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5598872, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.560085, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5602849, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5608761, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5610602, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.561285, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.561488, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5625632, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.562932, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.563091, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5632489, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.563825, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.563967, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.564136, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5642722, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.564495, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.564885, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.56771, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.567925, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.568161, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.568406, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.568562, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.568693, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.568846, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.569042, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5692759, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.56953, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.569688, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.569823, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.569976, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.570112, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5702558, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.57038, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.570553, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.570695, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.572611, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.572742, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5729978, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.57318, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5733461, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.573497, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.574524, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.574829, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.574993, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.575298, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5755038, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.576076, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.576341, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5772312, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.580255, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5807118, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5816581, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.581841, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.581922, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.583305, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.583433, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.584129, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5844831, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.584956, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.585427, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.585493, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.585938, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.586146, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5865102, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.586833, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.587192, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.587614, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.588028, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.588605, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.588885, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.589161, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.590108, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.59099, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.591765, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.592733, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.593347, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5936499, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.594291, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5950022, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.595382, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.595754, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.596266, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.596664, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.597114, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.597437, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.598009, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.598818, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.5993888, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.599927, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.600419, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.600716, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.601076, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.601687, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6022599, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.602956, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.603724, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6044831, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.60616, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.658114, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.658701, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.658995, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6621509, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.663456, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.663702, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6638432, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.664247, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.664497, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6646762, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.664901, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6650538, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6656818, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.666401, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.667179, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.667745, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6680489, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.668372, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.66873, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.66923, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.669516, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.669816, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6704, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6711638, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.671942, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.672309, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.672478, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6729212, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.673504, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.674251, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.674628, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.674886, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6759932, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.677299, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6786308, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.680253, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.680523, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.680643, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6833842, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6863859, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.686688, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.686927, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.databricks__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6877818, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.687979, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.688125, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.688291, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6884348, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.688577, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.688735, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6890821, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.689298, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.689644, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.690121, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.690418, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6906948, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.693454, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.693866, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.694438, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6950378, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.695458, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6964219, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.697738, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.698678, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.6994, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.699809, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.700429, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.701139, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.70154, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.701708, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.702049, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.702555, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.70297, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7035341, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.databricks__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.704015, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7041438, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7042701, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.704394, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7050261, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7057889, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.706848, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.707103, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.707603, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7083032, "supported_languages": null}, "macro.dbt_unit_testing.print_table": {"name": "print_table", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.print_table", "macro_sql": "{% macro print_table(agate_table, options={}) %}\n  {% set columns_start_index = 2 %}\n  {% set columns_info = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set column_info = {\"max_length\": col_name | length, \"is_string\": false, \"has_differences\": false} %}\n    {% for row in agate_table.rows %}\n      {% set cell_value = row[col_name] %}\n      {% set l = cell_value | string | length %}\n      {% if l > column_info.max_length %}\n        {% do column_info.update({\"max_length\": l}) %}\n      {% endif %}\n      {% do column_info.update({\"is_string\": column_info.is_string or cell_value is string}) %}\n\n      {% if col_index >= columns_start_index %}\n        {% if column_info.previous_value is defined and column_info.previous_value != cell_value %}\n          {% do column_info.update({\"has_differences\": true}) %}\n        {% endif %}\n        {% do column_info.update({\"previous_value\": cell_value}) %}\n      {% endif %}\n\n    {% endfor %}  \n    {% set columns_info = columns_info.append(column_info) %}\n  {% endfor %}\n\n  {% set cells = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set padded = dbt_unit_testing.pad(col_name, columns_info[col_index].max_length, pad_right=columns_info[col_index].is_string) %}\n    {% if columns_info[col_index].has_differences %}\n      {% do cells.append(\"{RED}\" ~ padded ~ \"{RESET}\") %}\n    {% else %}\n      {% do cells.append(padded) %}\n    {% endif %}\n  {% endfor %}\n  {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n\n  {% set cells = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set line = dbt_unit_testing.pad(\"\", columns_info[col_index].max_length, c=\"-\") %}\n    {% if columns_info[col_index].has_differences %}\n      {% do cells.append(\"{RED}\" ~ line ~ \"{RESET}\") %}\n    {% else %}\n      {% do cells.append(line) %}\n    {% endif %}\n  {% endfor %}\n  {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n\n  {% set last_spaces_replace_char = options.last_spaces_replace_char | default(\" \") %}\n  {% for row in agate_table.rows %}\n    {% set cells = [] %}\n    {% for cell_value in row %}\n      {% set col_index = loop.index0 %}\n      {% if cell_value is string %}\n        {% set cell_value = dbt_unit_testing.replace_last_spaces_with(last_spaces_replace_char, cell_value) %}\n      {% endif %}\n      {% set padded = dbt_unit_testing.pad(cell_value, columns_info[col_index].max_length, pad_right=cell_value is string) %}\n      {% if columns_info[col_index].has_differences %}\n        {% do cells.append(\"{RED}\" ~ padded ~ \"{RESET}\") %}\n      {% else %}\n        {% do cells.append(padded) %}\n      {% endif %}\n    {% endfor %}\n    {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.pad", "macro.dbt_unit_testing.println", "macro.dbt_unit_testing.replace_last_spaces_with"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7151942, "supported_languages": null}, "macro.dbt_unit_testing.replace_last_spaces_with": {"name": "replace_last_spaces_with", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.replace_last_spaces_with", "macro_sql": "{% macro replace_last_spaces_with(replacement, s) %}\n  {% set rs = s | reverse %}\n  {% set replaced = namespace(value=\"\", stop=false) %}\n  {% for i in range(0, rs | length) %}\n    {% if rs[i] == ' ' and not replaced.stop %}\n      {% set replaced.value = replaced.value ~ replacement %}\n    {% else %}\n      {% set replaced.value = replaced.value ~ rs[i] %}\n      {% set replaced.stop = true %}\n    {% endif %}\n  {% endfor %}\n  {{ return(replaced.value | reverse) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.715859, "supported_languages": null}, "macro.dbt_unit_testing.pad": {"name": "pad", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.pad", "macro_sql": "{% macro pad(v, pad, pad_right=false, c=\" \") %}\n  {% set padding = c * (pad - v | string | length) %}\n  {% if pad_right %}\n    {{ return (v ~ padding) }}\n  {% else %}\n    {{ return (padding ~ v) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.716219, "supported_languages": null}, "macro.dbt_unit_testing.parse_colors": {"name": "parse_colors", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.parse_colors", "macro_sql": "{% macro parse_colors(s) %}\n  {{ return (s\n      .replace(\"{RED}\", \"\\x1b[0m\\x1b[31m\")\n      .replace(\"{GREEN}\", \"\\x1b[0m\\x1b[32m\")\n      .replace(\"{YELLOW}\", \"\\x1b[0m\\x1b[33m\")\n      .replace(\"{BG_YELLOW}\", \"\\x1b[0m\\x1b[43m\")\n      .replace(\"{RESET}\", \"\\x1b[0m\")) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.716507, "supported_languages": null}, "macro.dbt_unit_testing.println": {"name": "println", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.println", "macro_sql": "{% macro println(s) %}\n  {% do log(dbt_unit_testing.parse_colors(s ~ \"{RESET}\"), info=true) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.parse_colors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.716672, "supported_languages": null}, "macro.dbt_unit_testing.print_warning": {"name": "print_warning", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.print_warning", "macro_sql": "{% macro print_warning(s) %}\n  {% do log(dbt_unit_testing.parse_colors(\"{YELLOW}\" ~ s ~ \"{RESET}\"), info=true) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.parse_colors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.71684, "supported_languages": null}, "macro.dbt_unit_testing.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.run_query", "macro_sql": "{% macro run_query(query) %}\n  {% set start_time = modules.datetime.datetime.now() %}\n  {{ dbt_unit_testing.verbose('Running query => ' ~ dbt_unit_testing.sanitize(query)) }}\n  {% set results = dbt.run_query(query) %}\n  {% set end_time = modules.datetime.datetime.now() - start_time %}\n  {{ dbt_unit_testing.verbose('Execution time => ' ~ end_time) }}\n  {{ dbt_unit_testing.verbose('==============================================================') }}\n  {{ return (results) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.sanitize", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.736265, "supported_languages": null}, "macro.dbt_unit_testing.sanitize": {"name": "sanitize", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sanitize", "macro_sql": "{% macro sanitize(s) %}\n  {{ return (\" \".join(s.split())) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.736427, "supported_languages": null}, "macro.dbt_unit_testing.extract_columns_list": {"name": "extract_columns_list", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.extract_columns_list", "macro_sql": "{% macro extract_columns_list(query) %}\n  {% set results = dbt_unit_testing.run_query(query) %}\n  {% set columns = results.columns | map(attribute='name') | list %}\n  {{ return (columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.736673, "supported_languages": null}, "macro.dbt_unit_testing.extract_columns_difference": {"name": "extract_columns_difference", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.extract_columns_difference", "macro_sql": "{% macro extract_columns_difference(cl1, cl2) %}\n  !! WRONG !!\n  {% set columns = cl1 | reject('in', cl2) | list %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7368739, "supported_languages": null}, "macro.dbt_unit_testing.quote_and_join_columns": {"name": "quote_and_join_columns", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.quote_and_join_columns", "macro_sql": "{% macro quote_and_join_columns(columns) %}\n  {% set columns = dbt_unit_testing.map(columns, dbt_unit_testing.quote_identifier) | join(\", \") %}\n  {{ return (columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.map"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7370722, "supported_languages": null}, "macro.dbt_unit_testing.apply_transformations_to_columns": {"name": "apply_transformations_to_columns", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.apply_transformations_to_columns", "macro_sql": "{% macro apply_transformations_to_columns(columns, column_transformations, use_alias=true) %}\n  {% set transformed_columns = [] %}\n  {% for column in columns %}\n    {% set transformed_column = dbt_unit_testing.apply_transformations_to_column(column, column_transformations, use_alias) %}\n    {% do transformed_columns.append(transformed_column) %}\n  {% endfor %}\n  {{ return (transformed_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.apply_transformations_to_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.73742, "supported_languages": null}, "macro.dbt_unit_testing.apply_transformations_to_column": {"name": "apply_transformations_to_column", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.apply_transformations_to_column", "macro_sql": "{% macro apply_transformations_to_column(column, column_transformations, use_alias) %}\n  {% set quoted_column = dbt_unit_testing.quote_identifier(column) %}\n  {% set transformation = column_transformations.get(column, \"\") %}\n  {% if transformation != \"\" %}\n    {% set transformation = transformation | replace(\"##column##\", quoted_column) %}\n    {% if use_alias %}\n      {% set transformation = transformation ~ \" as \" ~ quoted_column %}\n    {% endif %}\n  {% else %}\n    {% set transformation = quoted_column %}\n  {% endif %}\n  {{ return (transformation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.737916, "supported_languages": null}, "macro.dbt_unit_testing.sql_encode": {"name": "sql_encode", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sql_encode", "macro_sql": "{% macro sql_encode(s) %}\n  {{ return (s.replace('\"', '####_quote_####').replace('\\n', '####_cr_####').replace('\\t', '####_tab_####')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.738143, "supported_languages": null}, "macro.dbt_unit_testing.sql_decode": {"name": "sql_decode", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sql_decode", "macro_sql": "{% macro sql_decode(s) %}\n  {{ return (s.replace('####_quote_####', '\"').replace('####_cr_####', '\\n').replace('####_tab_####', '\\t')) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.738348, "supported_languages": null}, "macro.dbt_unit_testing.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.log_info", "macro_sql": "{% macro log_info(s, only_on_execute=false) %}\n  {% if not only_on_execute or execute %}\n    {% do log (s, info=true) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.738561, "supported_languages": null}, "macro.dbt_unit_testing.debug": {"name": "debug", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.debug", "macro_sql": "{% macro debug(s) %}\n  {% if var('debug', dbt_unit_testing.config_is_true('debug')) %}\n    {{ dbt_unit_testing.log_info (s, only_on_execute=true) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true", "macro.dbt_unit_testing.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7389572, "supported_languages": null}, "macro.dbt_unit_testing.verbose": {"name": "verbose", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.verbose", "macro_sql": "{% macro verbose(s) %}\n  {% if var('verbose', dbt_unit_testing.config_is_true('verbose')) %}\n    {{ dbt_unit_testing.log_info (s, only_on_execute=true) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true", "macro.dbt_unit_testing.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.739222, "supported_languages": null}, "macro.dbt_unit_testing.map": {"name": "map", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.map", "macro_sql": "{% macro map(items, f) %}\n  {% set mapped_items=[] %}\n  {% for item in items %}\n    {% do mapped_items.append(f(item)) %}\n  {% endfor %}\n  {{ return (mapped_items) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7395358, "supported_languages": null}, "macro.dbt_unit_testing.node_by_id": {"name": "node_by_id", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.node_by_id", "macro_sql": "{% macro node_by_id (node_id) %}\n  {{ return (graph.nodes[node_id] if node_id in graph.nodes else graph.sources[node_id]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.739743, "supported_languages": null}, "macro.dbt_unit_testing.has_value": {"name": "has_value", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.has_value", "macro_sql": "{% macro has_value(v) %}\n  {{ return (v is defined and v is not none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.739899, "supported_languages": null}, "macro.dbt_unit_testing.model_node": {"name": "model_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.model_node", "macro_sql": "{% macro model_node (node) %}\n  {% set graph_nodes = graph.nodes.values() | \n    selectattr('resource_type', 'in', ['model', 'snapshot', 'seed']) | \n    selectattr('package_name', 'in', [node.package_name, project_name]) | \n    selectattr('name', 'equalto', node.name) | \n    list %}\n  {% if graph_nodes | length > 0 %}\n    {% if dbt_unit_testing.has_value(node.version) %}\n      {% set graph_nodes = graph_nodes | selectattr('version', 'equalto', node.version) | list %}\n    {% else %}\n      {% set latest_version = graph_nodes[0].latest_version %}\n      {% if dbt_unit_testing.has_value(latest_version) %}\n        {% set graph_nodes = graph_nodes | selectattr('version', 'equalto', latest_version) | list %}\n      {% endif %}\n    {% endif %}\n  {% endif %}\n  {% if graph_nodes | length == 0 %}\n    {% set node_version = '_v' ~ node.version if dbt_unit_testing.has_value(node.version) else '' %}\n    {{ dbt_unit_testing.raise_error(\"Node \" ~ node.package_name ~ \".\" ~ node.name ~ node_version ~ \" not found.\") }}\n  {% endif %}\n  {% set graph_node = graph_nodes[0] %}\n  {{ return (graph_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.has_value", "macro.dbt_unit_testing.raise_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.741193, "supported_languages": null}, "macro.dbt_unit_testing.source_node": {"name": "source_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.source_node", "macro_sql": "{% macro source_node(node) %}\n  {{ return (graph.sources[\"source.\" ~ model.package_name ~ \".\" ~ node.source_name ~ \".\" ~ node.name]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7413929, "supported_languages": null}, "macro.dbt_unit_testing.graph_node": {"name": "graph_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.graph_node", "macro_sql": "{% macro graph_node(node) %}\n  {% if node.resource_type in ('source') %}\n    {{ return (dbt_unit_testing.source_node(node)) }}\n  {% else %}\n    {{ return (dbt_unit_testing.model_node(node)) }}\n  {% endif  %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.source_node", "macro.dbt_unit_testing.model_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7416599, "supported_languages": null}, "macro.dbt_unit_testing.deep_merge_2_jsons": {"name": "deep_merge_2_jsons", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.deep_merge_2_jsons", "macro_sql": "{% macro deep_merge_2_jsons(json1, json2) %}\n  {% set json = dbt_unit_testing.merge_json_left(json1, json2) %}\n  {% do json.update(dbt_unit_testing.merge_json_left(json2, json1)) %}\n  {{ return (json) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.merge_json_left"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.741923, "supported_languages": null}, "macro.dbt_unit_testing.merge_json_left": {"name": "merge_json_left", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.merge_json_left", "macro_sql": "{% macro merge_json_left(json1, json2) %}\n  {% set json = {} %}\n  {% for k,v in json1.items() %}\n    {% if v is mapping %}\n      {% set other = json2.get(k, {}) %}\n      {% if other is mapping %}\n        {% set v = dbt_unit_testing.deep_merge_2_jsons(v, other) %}\n      {% endif %}\n    {% elif v is sequence and v is not string %}\n      {% set other = json2.get(k, []) %}\n      {% if other is sequence and other is not string %}\n        {% set v = dbt_unit_testing.map((v + other) | map(\"tojson\") | unique, fromjson) %}\n      {% endif %}\n    {% endif %}\n    {% do json.update({k: v}) %}\n  {% endfor %}\n  {{ return (json) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.deep_merge_2_jsons", "macro.dbt_unit_testing.map"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.742761, "supported_languages": null}, "macro.dbt_unit_testing.deep_merge_jsons": {"name": "deep_merge_jsons", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.deep_merge_jsons", "macro_sql": "{% macro deep_merge_jsons(jsons) %}\n  {% set json = {} %}\n  {% for j in jsons %}\n    {% do json.update(dbt_unit_testing.deep_merge_2_jsons(json, j)) %}\n  {% endfor %}\n  {{ return (json) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.deep_merge_2_jsons"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.743052, "supported_languages": null}, "macro.dbt_unit_testing.get_config": {"name": "get_config", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.get_config", "macro_sql": "{% macro get_config(config_name, default_value) %}\n  {% set unit_tests_config = var(\"unit_tests_config\", {}) %}\n  {% set unit_tests_config = {} if unit_tests_config is none else unit_tests_config %}\n  {{ return (unit_tests_config.get(config_name, default_value))}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7433338, "supported_languages": null}, "macro.dbt_unit_testing.config_is_true": {"name": "config_is_true", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.config_is_true", "macro_sql": "{% macro config_is_true(config_name) %}\n  {{ return (dbt_unit_testing.get_config(config_name, default_value=false))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.get_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7434828, "supported_languages": null}, "macro.dbt_unit_testing.merge_configs": {"name": "merge_configs", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.merge_configs", "macro_sql": "{% macro merge_configs(configs) %}\n  {% set unit_tests_config = var(\"unit_tests_config\", {}) %}\n  {% set unit_tests_config = {} if unit_tests_config is none else unit_tests_config %}\n  {{ return (dbt_unit_testing.deep_merge_jsons([unit_tests_config] + configs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.deep_merge_jsons"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7437649, "supported_languages": null}, "macro.dbt_unit_testing.quote_identifier": {"name": "quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.quote_identifier", "macro_sql": "{% macro quote_identifier(identifier) %}\n    {{ return(adapter.dispatch('quote_identifier','dbt_unit_testing')(identifier)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.default__quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7439191, "supported_languages": null}, "macro.dbt_unit_testing.default__quote_identifier": {"name": "default__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.default__quote_identifier", "macro_sql": "{% macro default__quote_identifier(identifier) -%}\n    {% if identifier.startswith('\"') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('\"' ~ identifier ~ '\"') }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7441401, "supported_languages": null}, "macro.dbt_unit_testing.bigquery__quote_identifier": {"name": "bigquery__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.bigquery__quote_identifier", "macro_sql": "{% macro bigquery__quote_identifier(identifier) %}\n    {% if identifier.startswith('`') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('`' ~ identifier ~ '`') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.744371, "supported_languages": null}, "macro.dbt_unit_testing.snowflake__quote_identifier": {"name": "snowflake__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.snowflake__quote_identifier", "macro_sql": "{% macro snowflake__quote_identifier(identifier) %}\n    {% if identifier.startswith('\"') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('\"' ~ identifier | upper ~ '\"') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.74461, "supported_languages": null}, "macro.dbt_unit_testing.cache": {"name": "cache", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.cache", "macro_sql": "{% macro cache(scope_key, key, value) %}\n  {% if dbt_unit_testing.config_is_true('disable_cache') %}\n    {{ return (nil) }}\n  {% else %}\n    {% set cache = context.get(\"__DUT_CACHE__\", {}) %}\n    {% set scope = cache.get(scope_key, {}) %}\n    {% do scope.update({key: value}) %}\n    {% do cache.update({scope_key: scope}) %}\n    {% do context.update({\"__DUT_CACHE__\": cache}) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.745139, "supported_languages": null}, "macro.dbt_unit_testing.get_from_cache": {"name": "get_from_cache", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.get_from_cache", "macro_sql": "{% macro get_from_cache(scope, key) %}\n  {% set cache = context.get(\"__DUT_CACHE__\", {}).get(scope, {}) %}\n  {{ return (cache[key]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7453709, "supported_languages": null}, "macro.dbt_unit_testing.raise_error": {"name": "raise_error", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.raise_error", "macro_sql": "{% macro raise_error(error_message) %}\n  {{ exceptions.raise_compiler_error('\\x1b[31m' ~ error_message ~ '\\x1b[0m') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.745501, "supported_languages": null}, "macro.dbt_unit_testing.set_test_context": {"name": "set_test_context", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.set_test_context", "macro_sql": "{% macro set_test_context(key, value) %}\n  {% set test_context = context.get(\"__DUT_TEST_CONTEXT__\", {}) %}\n  {% set test_key = this.name %}\n  {% set test_scope = test_context.get(test_key, {}) %}\n  {% do test_scope.update({key: value | default(\"\")}) %}\n  {% do test_context.update({test_key: test_scope}) %}\n  {% do context.update({\"__DUT_TEST_CONTEXT__\": test_context}) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.745972, "supported_languages": null}, "macro.dbt_unit_testing.get_test_context": {"name": "get_test_context", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.get_test_context", "macro_sql": "{% macro get_test_context(key, default_value) %}\n  {% set test_context = context.get(\"__DUT_TEST_CONTEXT__\", {}) %}\n  {% set test_key = this.name %}\n  {% set test_scope = test_context.get(test_key, {}) %}\n  {{ return (test_scope.get(key, default_value)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.746367, "supported_languages": null}, "macro.dbt_unit_testing.clear_test_context": {"name": "clear_test_context", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.clear_test_context", "macro_sql": "{% macro clear_test_context(key, default_value) %}\n  {% set test_context = context.get(\"__DUT_TEST_CONTEXT__\", {}) %}\n  {% set test_key = this.name %}\n  {% do context.update({test_key: {}}) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.746628, "supported_languages": null}, "macro.dbt_unit_testing.split_and_pad_and_join": {"name": "split_and_pad_and_join", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.split_and_pad_and_join", "macro_sql": "{% macro split_and_pad_and_join(s, pad) %}\n  {% set parts = s.split('.') %}\n  {% set parts_2 = [] %}\n  {% for p in parts %}\n    {% do parts_2.append(dbt_unit_testing.pad(parts[loop.index-1], pad, pad_right=true)) %}\n  {% endfor %}\n  {{ return (parts_2 | join('.')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.pad"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.747034, "supported_languages": null}, "macro.dbt_unit_testing.version_bigger_or_equal_to": {"name": "version_bigger_or_equal_to", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.version_bigger_or_equal_to", "macro_sql": "{% macro version_bigger_or_equal_to(v) %}\n  {{ return (dbt_unit_testing.split_and_pad_and_join(dbt_version, 5) >= dbt_unit_testing.split_and_pad_and_join(v, 5)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.split_and_pad_and_join"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7472188, "supported_languages": null}, "macro.dbt_unit_testing.build_input_values_sql": {"name": "build_input_values_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.build_input_values_sql", "macro_sql": "{% macro build_input_values_sql(input_values, options) %}\n    {% set input_values_sql = input_values %}\n\n    {% if options.input_format | lower == \"csv\" %}\n      {% set input_values_sql = dbt_unit_testing.sql_from_csv_input(input_values, options) %}\n    {%- endif -%}\n\n    {{ return (input_values_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.sql_from_csv_input"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7485492, "supported_languages": null}, "macro.dbt_unit_testing.sql_from_csv": {"name": "sql_from_csv", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.sql_from_csv", "macro_sql": "{% macro sql_from_csv(options={}) %}\n  {{ return (sql_from_csv_input(caller(), options)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.sql_from_csv_input"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.748714, "supported_languages": null}, "macro.dbt_unit_testing.sql_from_csv_input": {"name": "sql_from_csv_input", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.sql_from_csv_input", "macro_sql": "{% macro sql_from_csv_input(csv_table, options) %}\n  {% set column_separator = options.column_separator | default(\",\") %}\n  {% set line_separator = options.line_separator | default(\"\\n\") %}\n  {% set type_separator = options.type_separator | default(\"::\") %}\n  {% set ns = namespace(col_names=[], col_types = [], col_values = [], row_values=[]) %}\n\n  {% set rows = csv_table.split(line_separator) | map('trim') | reject('==', '') | list %}\n  {% set cols = rows[0].split(column_separator) | map('trim') %}\n  {% for col in cols %}\n    {% set c = col.split(type_separator) | list %}\n    {% set col_name = c[0] %}\n    {% set col_type = c[1] %}\n    {% set ns.col_names = ns.col_names + [col_name] %}\n    {% set ns.col_types = ns.col_types + [col_type] %}\n  {% endfor %}\n\n  {% for row in rows[1:] %}\n    {% set cols = row.split(column_separator) | map('trim') | list %}\n    {% set ns.col_values = [] %}\n    {% for col in cols %}\n      {% set col_value = col %}\n      {% set col_type = ns.col_types[loop.index-1] %}\n      {% if col_type is defined %}\n        {% set col_value = \"CAST(\" ~ col_value ~ \" as \" ~ col_type ~ \")\" %}\n      {% endif %}\n      {% set col_value = col_value ~ \" as \" ~ ns.col_names[loop.index-1] %}\n      {% set ns.col_values = ns.col_values + [col_value] %}\n    {% endfor %}\n\n    {% set col_values = ns.col_values | join(\",\") %}\n    {% set sql_row = \"select \" ~ col_values %}\n    {% set ns.row_values = ns.row_values + [sql_row] %}\n  {% endfor %}\n\n  {% set sql = ns.row_values | join(\"\\n union all\\n\") %}\n\n  {{ return (sql) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.750558, "supported_languages": null}, "macro.dbt_unit_testing.build_model_complete_sql": {"name": "build_model_complete_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_model_complete_sql", "macro_sql": "{% macro build_model_complete_sql(model_node, mocks=[], options={}) %}\n  {% set mock_ids = mocks | rejectattr(\"options.include_missing_columns\", \"==\", true) | map(attribute=\"unique_id\") | list %}\n  {% set only_direct_dependencies = options.use_database_models %}\n  {% set model_dependencies = dbt_unit_testing.build_model_dependencies(model_node, mock_ids, only_direct_dependencies) %}\n  -- {# add mocks that are not in model dependencies (to allow for mocking the model itself, when testing incremental models) #}\n  {% set model_dependencies = model_dependencies + mocks | map(attribute=\"unique_id\") | reject('in', model_dependencies) | list %}\n\n  {% set cte_dependencies = [] %}\n  {% for node_id in model_dependencies %}\n    {% set node = dbt_unit_testing.node_by_id(node_id) %}\n    {% set existing_mock = mocks | selectattr(\"unique_id\", \"==\", node_id) | first %}\n    {% set cte_sql = existing_mock.input_values if existing_mock else dbt_unit_testing.build_node_sql(node, options.use_database_models) %}\n    {% set cte_name = dbt_unit_testing.cte_name(existing_mock if existing_mock else node) %}\n    {% set cte = dbt_unit_testing.quote_identifier(cte_name) ~ \" as (\" ~ cte_sql ~ \")\" %}\n    {% set cte_dependencies = cte_dependencies.append(cte) %}\n  {%- endfor -%}\n\n  {% set rendered_node = dbt_unit_testing.render_node_for_model_being_tested(model_node) %}\n  {%- set model_complete_sql -%}\n    {% if cte_dependencies %}\n      with\n      {{ cte_dependencies | join(\",\\n\") }}\n    {%- endif -%}\n    {{ \"\\n\" }}\n    select * from ({{ rendered_node }} {{ \"\\n\" }} ) as t\n  {%- endset -%}\n\n  {{ return(model_complete_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.build_model_dependencies", "macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.build_node_sql", "macro.dbt_unit_testing.cte_name", "macro.dbt_unit_testing.quote_identifier", "macro.dbt_unit_testing.render_node_for_model_being_tested"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.756276, "supported_languages": null}, "macro.dbt_unit_testing.cte_name": {"name": "cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.cte_name", "macro_sql": "{% macro cte_name(node) %}\n  {% if node.resource_type in ('source') %}\n    {{ return (dbt_unit_testing.source_cte_name(node)) }}\n  {% else %}\n    {{ return (dbt_unit_testing.ref_cte_name(node)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.source_cte_name", "macro.dbt_unit_testing.ref_cte_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.756562, "supported_languages": null}, "macro.dbt_unit_testing.ref_cte_name": {"name": "ref_cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.ref_cte_name", "macro_sql": "{% macro ref_cte_name(node) %}\n  {% set node = dbt_unit_testing.model_node(node) %}\n  {% set parts = [\"DBT_CTE\", node.name] %}\n  {% if node.package_name != model.package_name %}\n    {% set parts = [node.package_name] + parts %}\n  {% endif %}\n  {% if dbt_unit_testing.has_value(node.version)%}\n    {% set parts = parts + [node.version] %}\n  {% endif %}\n  {{ return (dbt_unit_testing.quote_identifier(parts | join(\"__\"))) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.model_node", "macro.dbt_unit_testing.has_value", "macro.dbt_unit_testing.quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.757072, "supported_languages": null}, "macro.dbt_unit_testing.source_cte_name": {"name": "source_cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.source_cte_name", "macro_sql": "{% macro source_cte_name(node) %}\n  {%- set cte_name -%}\n    {%- if dbt_unit_testing.config_is_true(\"use_qualified_sources\") -%}\n      {%- set source_node = dbt_unit_testing.source_node(node) -%}\n      {{ [source_node.source_name, source_node.name] | join(\"__\") }}\n    {%- else -%}\n      {{ node.name }}\n    {%- endif -%}\n  {%- endset -%}\n  {{ return (dbt_unit_testing.quote_identifier(cte_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true", "macro.dbt_unit_testing.source_node", "macro.dbt_unit_testing.quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7574332, "supported_languages": null}, "macro.dbt_unit_testing.build_model_dependencies": {"name": "build_model_dependencies", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_model_dependencies", "macro_sql": "{% macro build_model_dependencies(node, stop_recursion_at_these_dependencies, only_direct_dependencies=False) %}\n  {% set model_dependencies = [] %}\n  {% for node_id in node.depends_on.nodes %}\n    {% set node = dbt_unit_testing.node_by_id(node_id) %}\n    {% if node.resource_type in ('model','snapshot') and node.unique_id not in stop_recursion_at_these_dependencies and not only_direct_dependencies%}\n      {% set child_model_dependencies = dbt_unit_testing.build_model_dependencies(node, stop_recursion_at_these_dependencies, only_direct_dependencies) %}\n      {% for dependency_node_id in child_model_dependencies %}\n        {{ model_dependencies.append(dependency_node_id) }}\n      {% endfor %}\n    {% endif %}\n    {{ model_dependencies.append(node_id) }}\n  {% endfor %}\n\n  {{ return (model_dependencies | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.build_model_dependencies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.758056, "supported_languages": null}, "macro.dbt_unit_testing.build_node_sql": {"name": "build_node_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_node_sql", "macro_sql": "{% macro build_node_sql(node, use_database_models=false, complete=false) %}\n  {%- if use_database_models or node.resource_type in ('source', 'seed') -%}\n    {%- if node.resource_type == \"source\" %}\n      {% set name = node.identifier %}\n    {%- elif node.resource_type == \"snapshot\" %}\n      {%- if dbt_unit_testing.has_value(node.config.alias) %}\n        {% set name = node.config.alias %}\n      {%- else %}\n        {% set name = node.name %}\n      {%- endif %}\n    {%- else %}\n      {% set name = node.name %}\n    {%- endif %}\n\n    {% set name_parts = dbt_unit_testing.map([node.database, node.schema, name], dbt_unit_testing.quote_identifier) %}\n    select * from {{ name_parts | join('.') }} where 1 = 0\n  {%- else -%}\n    {% if complete %}\n      {{ dbt_unit_testing.build_model_complete_sql(node) }}\n    {%- else -%}\n      {{ dbt_unit_testing.render_node(node) ~ \"\\n\"}}\n    {%- endif -%}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.has_value", "macro.dbt_unit_testing.map", "macro.dbt_unit_testing.build_model_complete_sql", "macro.dbt_unit_testing.render_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.75897, "supported_languages": null}, "macro.dbt_unit_testing.render_node": {"name": "render_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.render_node", "macro_sql": "{% macro render_node(node) %}\n  {% set model_sql = node.raw_sql if node.raw_sql is defined else node.raw_code %}\n  {{ return (render(model_sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.759181, "supported_languages": null}, "macro.dbt_unit_testing.render_node_for_model_being_tested": {"name": "render_node_for_model_being_tested", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.render_node_for_model_being_tested", "macro_sql": "{% macro render_node_for_model_being_tested(node) %}\n  {% set model_sql = node.raw_sql if node.raw_sql is defined else node.raw_code %}\n  {% set model_name = dbt_unit_testing.cte_name(node) %}\n  {% set this_name = this | string %}\n  -- {# If the model contains a 'this' property, we will replace its result with the name of the model being tested #}\n  -- {# but first we mask previous occurrences that could be there before the render (very unlikely to happen) #}\n  -- {# This way we 'ensure' that we only replace stuff produced after the render #}\n  {% set replace_mask = '######################' %}\n  {% set model_sql = model_sql.replace(this_name, replace_mask) %}\n  {{ dbt_unit_testing.set_test_context(\"model_being_rendered\", model_name) }}\n  {% set rendered_sql = render(model_sql) %}\n  {{ dbt_unit_testing.set_test_context(\"model_being_rendered\", \"\") }}\n  {% set rendered_sql = rendered_sql.replace(this_name, model_name) %}\n  {% set rendered_sql = rendered_sql.replace(replace_mask, this_name) %}\n  {{ return (rendered_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.cte_name", "macro.dbt.replace", "macro.dbt_unit_testing.set_test_context"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.759876, "supported_languages": null}, "macro.dbt_unit_testing.mock_ref": {"name": "mock_ref", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.mock_ref", "macro_sql": "{% macro mock_ref(project_or_package, model_name, options={}) %}\n  {% if model_name is mapping %}\n    {% set options = model_name %}\n    {% set model_name = project_or_package %}\n    {% set project_or_package = model.package_name %}\n    {{ dbt_unit_testing.print_warning(\"Use keyword 'options' when passing options to mock_ref\" ~ \" (in \" ~ model_name ~ \")\") }}\n  {% else %}\n    {% set project_or_package, model_name = dbt_unit_testing.setup_project_and_model_name(project_or_package, model_name) %}\n  {% endif %}\n  {% if model_name is undefined %}\n    {{ dbt_unit_testing.raise_error('model_name must be provided for mock_ref') }}\n  {% endif %}\n  {% set node_version = kwargs[\"version\"] | default(kwargs[\"v\"]) | default(none) %}\n  {% set mock = {\n     \"type\": 'mock',\n     \"resource_type\": 'model',\n     \"name\": model_name,\n     \"package_name\": project_or_package,\n     \"version\": node_version,\n     \"options\": options,\n     \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(mock)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.print_warning", "macro.dbt_unit_testing.setup_project_and_model_name", "macro.dbt_unit_testing.raise_error", "macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.763318, "supported_languages": null}, "macro.dbt_unit_testing.mock_source": {"name": "mock_source", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.mock_source", "macro_sql": "{% macro mock_source(source_name, table_name, options={}) %}\n  {% if source_name is undefined %}\n    {{ dbt_unit_testing.raise_error('source_name must be provided for mock_source') }}\n  {% endif %}\n  {% if table_name is undefined %}\n    {{ dbt_unit_testing.raise_error('table_name must be provided for mock_source') }}\n  {% endif %}\n  {% set mock = {\n     \"type\": 'mock',\n     \"resource_type\": 'source',\n     \"name\": table_name,\n     \"source_name\": source_name,\n     \"options\": options,\n     \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(mock)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.raise_error", "macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.763834, "supported_languages": null}, "macro.dbt_unit_testing.expect": {"name": "expect", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.expect", "macro_sql": "{% macro expect(options={}) %}\n  {% set expectations = {\n      \"type\": \"expectations\",\n      \"options\": options,\n      \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(expectations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7640908, "supported_languages": null}, "macro.dbt_unit_testing.expect_no_rows": {"name": "expect_no_rows", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.expect_no_rows", "macro_sql": "{% macro expect_no_rows(options={}) %}\n  {% set dummy = caller() %}\n  {% set expectations = {\n      \"type\": \"expectations\",\n      \"options\": options,\n      \"input_values\": \"select * from (select 1) as t where 1 = 0\",\n      \"no_rows\": true,\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(expectations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.764405, "supported_languages": null}, "macro.dbt_unit_testing.append_json": {"name": "append_json", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.append_json", "macro_sql": "{% macro append_json(json) %}\n  {{ return (json | tojson() ~ '####_JSON_LINE_DELIMITER_####') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7645388, "supported_languages": null}, "macro.dbt_unit_testing.split_json_str": {"name": "split_json_str", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.split_json_str", "macro_sql": "{% macro split_json_str(json_str) %}\n  {% set lines = json_str.split('####_JSON_LINE_DELIMITER_####') | map('trim') | reject('==', '') | list %}\n  {{ return (dbt_unit_testing.map(lines, fromjson)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.map"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7647989, "supported_languages": null}, "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns": {"name": "enrich_mock_sql_with_missing_columns", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns", "macro_sql": "{% macro enrich_mock_sql_with_missing_columns(mock, options) %}\n  {% set model_node = dbt_unit_testing.node_by_id(mock.unique_id) %}\n  {% set model_name = model_node.name %}\n  {% set input_values_sql = mock.input_values %}\n\n  {% set model_columns = dbt_unit_testing.get_from_cache(\"COLUMNS\", model_node.name) %}\n  {% if not model_columns %}\n    {% set model_sql = dbt_unit_testing.build_node_sql(model_node, options.use_database_models, complete=true) %}\n    {% set model_columns = dbt_unit_testing.extract_columns_list(model_sql) %}\n    {{ dbt_unit_testing.cache(\"COLUMNS\", model_node.name, model_columns)}}\n  {% else %}\n    {{ dbt_unit_testing.verbose(\"CACHE HIT for \" ~ model_node.name ~ \" COLUMNS\") }}\n  {% endif %}\n  \n  {% set input_columns = dbt_unit_testing.extract_columns_list(input_values_sql) %}\n  {% set missing_columns = dbt_unit_testing.extract_columns_difference(model_columns, input_columns) %}\n\n  {%- if missing_columns -%}\n    {% set input_values_sql %}\n      {% set node_sql = dbt_unit_testing.build_node_sql(model_node, options.use_database_models) %}\n        select * from ({{ input_values_sql }}) as m1\n        left join (select {{ dbt_unit_testing.quote_and_join_columns(missing_columns)}}\n                  from ({{ node_sql }}) as m2) as m3 on false\n    {%- endset -%}\n  {%- endif -%}\n  {% do mock.update({\"input_values\": input_values_sql}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.get_from_cache", "macro.dbt_unit_testing.build_node_sql", "macro.dbt_unit_testing.extract_columns_list", "macro.dbt_unit_testing.cache", "macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.extract_columns_difference", "macro.dbt_unit_testing.quote_and_join_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.766025, "supported_languages": null}, "macro.dbt_unit_testing.ref": {"name": "ref", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/overrides.sql", "original_file_path": "macros/overrides.sql", "unique_id": "macro.dbt_unit_testing.ref", "macro_sql": "{% macro ref(project_or_package, model_name) %}\n  {% if dbt_unit_testing.running_unit_test() %}\n    {% set project_or_package, model_name = dbt_unit_testing.setup_project_and_model_name(project_or_package, model_name) %}\n    {% set node_version = kwargs[\"version\"] | default (kwargs[\"v\"]) %}\n    {% set node = {\"package_name\": project_or_package, \"name\": model_name, \"version\": node_version} %}\n    {{ return (dbt_unit_testing.ref_cte_name(node)) }}\n  {% else %}\n    {% if model_name is undefined %}\n      {{ return (builtins.ref(project_or_package, **kwargs)) }}\n    {% else %}\n      {{ return (builtins.ref(project_or_package, model_name, **kwargs)) }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.running_unit_test", "macro.dbt_unit_testing.setup_project_and_model_name", "macro.dbt_unit_testing.ref_cte_name", "macro.dbt_unit_testing.ref"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.767852, "supported_languages": null}, "macro.dbt_unit_testing.source": {"name": "source", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/overrides.sql", "original_file_path": "macros/overrides.sql", "unique_id": "macro.dbt_unit_testing.source", "macro_sql": "{% macro source(source, table_name) %}\n  {% if dbt_unit_testing.running_unit_test() %}\n      {{ return (dbt_unit_testing.source_cte_name({\"source_name\": source, \"name\": table_name})) }}\n  {% else %}\n      {{ return (builtins.source(source, table_name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.running_unit_test", "macro.dbt_unit_testing.source_cte_name", "macro.dbt_unit_testing.source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.768203, "supported_languages": null}, "macro.dbt_unit_testing.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/overrides.sql", "original_file_path": "macros/overrides.sql", "unique_id": "macro.dbt_unit_testing.is_incremental", "macro_sql": "{% macro is_incremental() %}\n  {% if dbt_unit_testing.running_unit_test() %}\n      {% set options = dbt_unit_testing.get_test_context(\"options\", {}) %}\n      {% set is_incremental_should_be_true_for_this_model = dbt_unit_testing.get_test_context(\"is_incremental_should_be_true_for_this_model\", \"\") %}\n      {% set model_being_rendered = dbt_unit_testing.get_test_context(\"model_being_rendered\", \"\") %}\n      {{ return (options.get(\"run_as_incremental\", False) and model_being_rendered == is_incremental_should_be_true_for_this_model and model_being_rendered != \"\") }}\n  {% else %}\n      {{ return (dbt.is_incremental())}}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.running_unit_test", "macro.dbt_unit_testing.get_test_context", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7687309, "supported_languages": null}, "macro.dbt_unit_testing.running_unit_test": {"name": "running_unit_test", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/overrides.sql", "original_file_path": "macros/overrides.sql", "unique_id": "macro.dbt_unit_testing.running_unit_test", "macro_sql": "{% macro running_unit_test() %}\n  {{ return ('unit-test' in config.get('tags', {})) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.768897, "supported_languages": null}, "macro.dbt_unit_testing.setup_project_and_model_name": {"name": "setup_project_and_model_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/overrides.sql", "original_file_path": "macros/overrides.sql", "unique_id": "macro.dbt_unit_testing.setup_project_and_model_name", "macro_sql": "{% macro setup_project_and_model_name(project_or_package, model_name) %}\n  {% set updated_project_or_package = project_or_package if model_name is defined else model.package_name %}\n  {% set updated_model_name = model_name if model_name is defined else project_or_package %}\n  {{ return((updated_project_or_package, updated_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7691798, "supported_languages": null}, "macro.dbt_unit_testing.test": {"name": "test", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.test", "macro_sql": "{% macro test(model_name, test_description='(no description)', options={}) %}\n  {{ dbt_unit_testing.ref_tested_model(model_name) }}\n\n  {% if execute %}\n    {% if flags.WHICH in ('test', 'build') %}\n      {{ dbt_unit_testing.set_test_context(\"is_incremental_should_be_true_for_this_model\", \"\") }}\n      {% set mocks_and_expectations_json_str = caller() %}\n      {% set model_version = kwargs[\"version\"] | default(kwargs[\"v\"]) | default(none) %}\n      {% set model_node = {\"package_name\": model.package_name, \"name\": model_name, \"version\": model_version} %}\n      {% set test_configuration, test_queries = dbt_unit_testing.build_configuration_and_test_queries(model_node, test_description, options, mocks_and_expectations_json_str) %}\n      {% set test_report = dbt_unit_testing.build_test_report(test_configuration, test_queries) %}\n\n      {% if not test_report.succeeded %}\n        {{ dbt_unit_testing.show_test_report(test_configuration, test_report) }}\n      {% endif %}\n      \n      select * from (select 1) as t where {{ not test_report.succeeded }}    \n      {{ dbt_unit_testing.clear_test_context() }}\n    {% else %}\n      select * from (select 1) as t where 1 = 0\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.ref_tested_model", "macro.dbt_unit_testing.set_test_context", "macro.dbt_unit_testing.build_configuration_and_test_queries", "macro.dbt_unit_testing.build_test_report", "macro.dbt_unit_testing.show_test_report", "macro.dbt_unit_testing.clear_test_context"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.782607, "supported_languages": null}, "macro.dbt_unit_testing.build_configuration_and_test_queries": {"name": "build_configuration_and_test_queries", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_configuration_and_test_queries", "macro_sql": "{% macro build_configuration_and_test_queries(model_node, test_description, options, mocks_and_expectations_json_str) %}\n  {% set model_name = model_node.name %}\n  {% do options.update({\"column_transformations\": {model_name: options.get(\"column_transformations\", {})}}) %}\n  {% set test_configuration = {\n    \"model_name\": model_node.name, \n    \"description\": test_description, \n    \"model_node\": model_node,\n    \"options\": dbt_unit_testing.merge_configs([options])} \n  %}\n  {{ dbt_unit_testing.set_test_context(\"options\", test_configuration.options) }}\n\n  {{ dbt_unit_testing.verbose(\"CONFIG: \" ~ test_configuration) }}\n  \n  {% do test_configuration.update (dbt_unit_testing.build_mocks_and_expectations(test_configuration, mocks_and_expectations_json_str)) %}\n  {{ dbt_unit_testing.set_test_context(\"is_incremental_should_be_true_for_this_model\", dbt_unit_testing.ref_cte_name(model_node)) }}\n  {% set test_queries = dbt_unit_testing.build_test_queries(test_configuration) %}\n\n  {{ return ((test_configuration, test_queries)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.merge_configs", "macro.dbt_unit_testing.set_test_context", "macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.build_mocks_and_expectations", "macro.dbt_unit_testing.ref_cte_name", "macro.dbt_unit_testing.build_test_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.78349, "supported_languages": null}, "macro.dbt_unit_testing.build_mocks_and_expectations": {"name": "build_mocks_and_expectations", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_mocks_and_expectations", "macro_sql": "{% macro build_mocks_and_expectations(test_configuration, mocks_and_expectations_json_str) %}\n    {% set mocks_and_expectations = dbt_unit_testing.split_json_str(mocks_and_expectations_json_str) %}\n\n    {% for mock_or_expectation in mocks_and_expectations %}\n      {% do mock_or_expectation.update( {\"options\": dbt_unit_testing.merge_configs([test_configuration.options, mock_or_expectation.options])}) %}\n      {% set input_values = dbt_unit_testing.build_input_values_sql(mock_or_expectation.input_values, mock_or_expectation.options) %}\n      {% do mock_or_expectation.update({\"input_values\": input_values}) %}\n    {% endfor %}\n\n    {% set mocks = mocks_and_expectations | selectattr(\"type\", \"==\", \"mock\") | list %}\n    {% set expectations = mocks_and_expectations | selectattr(\"type\", \"==\", \"expectations\") | first %}\n\n    {% for mock in mocks %}\n      {% do mock.update({\"unique_id\": dbt_unit_testing.graph_node(mock).unique_id}) %}\n      {% if mock.options.include_missing_columns %}\n        {% do dbt_unit_testing.enrich_mock_sql_with_missing_columns(mock, test_configuration.options) %}\n      {% endif %}\n    {% endfor %}\n\n    {% set mocks_and_expectations_json = {\n      \"mocks\": mocks,\n      \"expectations\": expectations\n      }\n    %}\n\n    {{ return (mocks_and_expectations_json) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.split_json_str", "macro.dbt_unit_testing.merge_configs", "macro.dbt_unit_testing.build_input_values_sql", "macro.dbt_unit_testing.graph_node", "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.784678, "supported_languages": null}, "macro.dbt_unit_testing.build_test_report": {"name": "build_test_report", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_test_report", "macro_sql": "{% macro build_test_report(test_configuration, test_queries) %}\n\n  {% set test_report = dbt_unit_testing.run_test_query(test_configuration, test_queries) %}\n\n  {{ dbt_unit_testing.verbose(\"-------------------- \" ~ test_configuration.model_name ~ \" --------------------\" ) }}\n  {{ dbt_unit_testing.verbose(test_queries.test_query) }}\n  {{ dbt_unit_testing.verbose(\"----------------------------------------\" ) }}\n\n  {{ return (test_report) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_test_query", "macro.dbt_unit_testing.verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.785147, "supported_languages": null}, "macro.dbt_unit_testing.build_test_queries": {"name": "build_test_queries", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_test_queries", "macro_sql": "{% macro build_test_queries(test_configuration) %}\n  {% set expectations = test_configuration.expectations %}\n  {% set model_node = dbt_unit_testing.model_node(test_configuration.model_node) %}\n  {%- set model_complete_sql = dbt_unit_testing.build_model_complete_sql(model_node, test_configuration.mocks, test_configuration.options) -%}\n\n  {% if expectations.no_rows %}\n    {% set expectations_sql = \"select * from (\" ~ model_complete_sql ~ \") as t where 1 = 0\" %}\n  {% else %}\n    {% set expectations_sql = expectations.input_values %}\n  {% endif %}\n\n  {% set column_transformations = test_configuration.options.column_transformations[test_configuration.model_name] | default({}) %}\n  {% set columns_list = dbt_unit_testing.extract_columns_list(expectations_sql) %}\n  {% set columns_list_str = dbt_unit_testing.quote_and_join_columns(columns_list) %}\n  {% set transformed_columns_list_str = dbt_unit_testing.apply_transformations_to_columns(columns_list, column_transformations, use_alias=true) | join(\", \") %}\n  {% set transformed_columns_list_for_grouping_str = dbt_unit_testing.apply_transformations_to_columns(columns_list, column_transformations, use_alias=false) | join(\", \")  %}\n\n  {% set diff_column = test_configuration.options.diff_column | default(\"diff\") %}\n  {% set count_column = test_configuration.options.count_column | default(\"count\") %}\n\n  {%- set actual_query -%}\n    select count(1) as {{ count_column }}, {{ transformed_columns_list_str }} from ( {{ model_complete_sql }} ) as s group by {{ transformed_columns_list_for_grouping_str }}\n  {% endset %}\n\n  {%- set expectations_query -%}\n    select count(1) as {{ count_column }}, {{ transformed_columns_list_str }} from ({{ expectations_sql }}) as s group by {{ transformed_columns_list_for_grouping_str }}\n  {% endset %}\n\n  {%- set test_query -%}\n    with expectations as (\n      {{ expectations_query }}\n    ),\n    actual as (\n      {{ actual_query }}\n    ),\n\n    extra_entries as (\n    select '+' as {{ diff_column }}, {{ count_column }}, {{ columns_list_str }} from actual\n    {{ except() }}\n    select '+' as {{ diff_column }}, {{ count_column }}, {{ columns_list_str }} from expectations),\n\n    missing_entries as (\n    select '-' as {{ diff_column }}, {{ count_column }}, {{ columns_list_str }} from expectations\n    {{ except() }}\n    select '-' as {{ diff_column }}, {{ count_column }}, {{ columns_list_str }} from actual)\n    \n    select * from extra_entries\n    UNION ALL\n    select * from missing_entries\n\n    {% set sort_field = test_configuration.options.get(\"output_sort_field\") %}\n    {% if sort_field %}\n    ORDER BY {{ sort_field }}\n    {% endif %}\n  {%- endset -%}\n\n  {% set test_queries = {\n    \"model_query\": model_complete_sql,\n    \"actual_query\": actual_query,\n    \"expectations_query\": expectations_query,\n    \"test_query\": test_query\n  } %}\n\n  {{ return (test_queries) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.model_node", "macro.dbt_unit_testing.build_model_complete_sql", "macro.dbt_unit_testing.extract_columns_list", "macro.dbt_unit_testing.quote_and_join_columns", "macro.dbt_unit_testing.apply_transformations_to_columns", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.786964, "supported_languages": null}, "macro.dbt_unit_testing.show_test_report": {"name": "show_test_report", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.show_test_report", "macro_sql": "{% macro show_test_report(test_configuration, test_report) %}\n  {% set model_name = test_configuration.model_name %}\n  {% set test_description = test_configuration.description %}\n\n  {{ dbt_unit_testing.println('{RED}MODEL: {YELLOW}' ~ model_name) }}\n  {{ dbt_unit_testing.println('{RED}TEST:  {YELLOW}' ~ test_description) }}\n  {% if test_report.expectations_row_count != test_report.actual_row_count %}\n    {{ dbt_unit_testing.println('{RED}ERROR: {YELLOW}Number of Rows do not match! (Expected: ' ~ test_report.expectations_row_count ~ ', Actual: ' ~ test_report.actual_row_count ~ ')') }}\n  {% endif %}\n  {% if test_report.different_rows_count > 0 %}\n    {{ dbt_unit_testing.println('{RED}ERROR: {YELLOW}Rows mismatch:') }}\n    {{ dbt_unit_testing.print_table(test_report.test_differences, options=test_configuration.options) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.println", "macro.dbt_unit_testing.print_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.78755, "supported_languages": null}, "macro.dbt_unit_testing.run_test_query": {"name": "run_test_query", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.run_test_query", "macro_sql": "{% macro run_test_query(test_configuration, test_queries) %}\n  {% set model_name = test_configuration.model_name %}\n  {% set test_description = test_configuration.description %}\n  {% set actual_query = test_queries.actual_query %}\n  {% set expectations_query = test_queries.expectations_query %}\n  {% set test_query = test_queries.test_query %}\n\n  {%- set count_query -%}\n    select * FROM \n      (select count(1) as expectation_count from (\n        {{ expectations_query }}\n      ) as exp) as exp_count,\n      (select count(1) as actual_count from (\n        {{ actual_query }}\n      ) as act) as act_count\n  {%- endset -%}\n  {% set r1 = dbt_unit_testing.run_query(count_query) %}\n  {% set expectations_row_count = r1.columns[0].values() | first %}\n  {% set actual_row_count = r1.columns[1].values() | first %}\n\n  {% set test_differences = dbt_unit_testing.run_query(test_query) %}\n  {% set different_rows_count = test_differences.rows | length %}\n  {% set succeeded = different_rows_count == 0 and (expectations_row_count == actual_row_count) %}\n\n  {% set test_report = {\n    \"expectations_row_count\": expectations_row_count,\n    \"actual_row_count\": actual_row_count,\n    \"different_rows_count\": different_rows_count,\n    \"test_differences\": test_differences,\n    \"succeeded\": succeeded,\n  } %}\n  {{ return (test_report) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7884579, "supported_languages": null}, "macro.dbt_unit_testing.ref_tested_model": {"name": "ref_tested_model", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.ref_tested_model", "macro_sql": "{% macro ref_tested_model(model_name) %}\n  {% set ref_tested_model %}\n    -- We add an (unused) reference to the tested model,\n    -- so that DBT includes the model as a dependency of the test in the DAG\n    select * from {{ ref(model_name) }}\n  {% endset %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.7886121, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas", "macro.dbt_spark.spark__list_relations_without_caching", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.793385, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.793979, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.794698, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.795292, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.795883, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.796609, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.796764, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.796858, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.79915, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8056462, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.805771, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.805836, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8063061, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.807627, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.807907, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.808136, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.808363, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.808635, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8087978, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.808971, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_sql_complexity": {"name": "calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.calculate_sql_complexity", "macro_sql": "{% macro calculate_sql_complexity(node) %}\n    {{ return(adapter.dispatch('calculate_sql_complexity', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_sql_complexity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8093948, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_sql_complexity": {"name": "default__calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_sql_complexity", "macro_sql": "{% macro default__calculate_sql_complexity(node) %}\n\n    {% if node.resource_type == 'model' and node.language == 'sql' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {%- set re = modules.re -%}\n        {%- set ns = namespace(complexity = 0) -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {%- for token, token_cost in var('token_costs').items() -%}\n\n            {# this is not 100% perfect but it checks more or less if the token exists as a word by itself or followed by \"(\"\" like for least()/greatest() #}\n            {%- set token_with_boundaries = \"\\\\b\" ~ token ~ \"[\\\\t\\\\r\\\\n (]\" -%}\n            {%- set all_regex_matches = re.findall(token_with_boundaries, model_raw_sql_no_comments, re.IGNORECASE) -%}\n            {%- set ns.complexity = ns.complexity + token_cost * (all_regex_matches | length) -%}\n\n        {%- endfor -%}\n\n        {{ return(ns.complexity) }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.810518, "supported_languages": null}, "macro.dbt_project_evaluator.check_model_is_table": {"name": "check_model_is_table", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/check_model_is_table.sql", "original_file_path": "macros/check_model_is_table.sql", "unique_id": "macro.dbt_project_evaluator.check_model_is_table", "macro_sql": "{%- macro check_model_is_table(model) -%}\n    {%- if model.config.materialized != 'table' -%}\n        {%- do exceptions.raise_compiler_error(\n            \"Model must use the table materialization. Please check any model overrides.\"\n        ) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.810922, "supported_languages": null}, "macro.dbt_project_evaluator.recursive_dag": {"name": "recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.recursive_dag", "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.spark__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8151722, "supported_languages": null}, "macro.dbt_project_evaluator.default__recursive_dag": {"name": "default__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.default__recursive_dag", "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        {{ dbt.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    {% if var('max_depth_dag') | int > 0 %}\n        {% if var('max_depth_dag') | int < 2 or var('max_depth_dag') | int < var('chained_views_threshold') | int %}\n            {% do exceptions.raise_compiler_error(\n                'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n                ) %}\n        {% else %}\n        where distance <= {{ var('max_depth_dag')}}\n        {% endif %}\n    {% endif %}\n\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8164742, "supported_languages": null}, "macro.dbt_project_evaluator.bigquery__recursive_dag": {"name": "bigquery__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag", "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag') | int %}\n{% if max_depth < 2 or max_depth < var('chained_views_threshold') | int %}\n    {% do exceptions.raise_compiler_error(\n        'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n        ) %}\n{% endif %}\n\nwith direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select\n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_{{i - 1}}.distance+1 as distance,\n        {{ dbt.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        cast(all_relationships_unioned.distance as {{ dbt.type_int() }}) as distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.817834, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__recursive_dag": {"name": "clickhouse__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__recursive_dag", "macro_sql": "{% macro clickhouse__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.817984, "supported_languages": null}, "macro.dbt_project_evaluator.spark__recursive_dag": {"name": "spark__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.spark__recursive_dag", "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8181188, "supported_languages": null}, "macro.dbt_project_evaluator.trino__recursive_dag": {"name": "trino__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.trino__recursive_dag", "macro_sql": "{% macro trino__recursive_dag() %}\n{#-- Although Trino supports a recursive WITH-queries,\n-- it is less performant than creating CTEs with loops and union them --#}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.818238, "supported_languages": null}, "macro.dbt_project_evaluator.athena__recursive_dag": {"name": "athena__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.athena__recursive_dag", "macro_sql": "{% macro athena__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.818353, "supported_languages": null}, "macro.dbt_project_evaluator.wrap_string_with_quotes": {"name": "wrap_string_with_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {% if str is none %}\n    {{ return('cast(NULL as ' ~ dbt_project_evaluator.type_string_dpe() ~ ')') }}\n  {% else %}\n    {{ dbt.string_literal(str) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.818708, "supported_languages": null}, "macro.dbt_project_evaluator.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "unique_id": "macro.dbt_project_evaluator.bigquery__string_literal", "macro_sql": "{% macro bigquery__string_literal(value) -%}\n  '''{{ value }}'''\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8188071, "supported_languages": null}, "macro.dbt_project_evaluator.loop_vars": {"name": "loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.loop_vars", "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__loop_vars"]}, "description": "A macro that loops through variables and returns them as a SQL query to be used in a model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml", "arguments": [{"name": "vars", "type": "list|string", "description": "A list of variables from dbt_project.yml"}], "created_at": 1733395225.0337942, "supported_languages": null}, "macro.dbt_project_evaluator.default__loop_vars": {"name": "default__loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.default__loop_vars", "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8200362, "supported_languages": null}, "macro.dbt_project_evaluator.set_is_excluded": {"name": "set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.set_is_excluded", "macro_sql": "{% macro set_is_excluded(resource, resource_type) %}\n    {{ return(adapter.dispatch('set_is_excluded', 'dbt_project_evaluator')(resource, resource_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__set_is_excluded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.82063, "supported_languages": null}, "macro.dbt_project_evaluator.default__set_is_excluded": {"name": "default__set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.default__set_is_excluded", "macro_sql": "{% macro default__set_is_excluded(resource, resource_type) %}\n\n    {% set re = modules.re %}\n    {%- set ns = namespace(exclude=false) -%}\n\n    {% if resource_type == 'node' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") -%}\n    {% elif resource_type == 'source' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") ~ \":\" ~ resource.fqn[-2] ~ \".\" ~ resource.fqn[-1] -%}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\n            \"`set_is_excluded()` macro does not support resource type: \" ~ resource_type\n        ) }}\n    {% endif %}\n    \n\n    {#- we duplicate the exclusion list to account for windows directory patterns -#}\n    {%- set exclude_all_os_paths_from_project = [] -%}\n\n    {%- for exclude_paths_pattern in var('exclude_paths_from_project',[]) -%}\n        {%- set windows_path_pattern = exclude_paths_pattern | replace(\"/\", \"\\\\\\\\\\\\\\\\\") -%}\n        {%- do exclude_all_os_paths_from_project.extend([exclude_paths_pattern, windows_path_pattern]) -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if it is from the current project and matches the pattern -#}\n    {%- for exclude_paths_pattern in exclude_all_os_paths_from_project -%}\n        {%- set matched_path = re.search(exclude_paths_pattern, resource_path, re.IGNORECASE) -%}\n        {%- if matched_path and resource.package_name == project_name %}\n            {% set ns.exclude = true %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if the package if it is listed in `exclude_packages` or if it is \"all\" -#}\n    {%- if (\n        resource.package_name != project_name) \n        and (resource.package_name in  var('exclude_packages',[]) or 'all' in var('exclude_packages',[])) \n    -%}\n        {% set ns.exclude = true %}\n    {%- endif -%}\n\n    {{ return(ns.exclude) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.821961, "supported_languages": null}, "macro.dbt_project_evaluator.find_all_hard_coded_references": {"name": "find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.find_all_hard_coded_references", "macro_sql": "{% macro find_all_hard_coded_references(node) %}\n    {{ return(adapter.dispatch('find_all_hard_coded_references', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__find_all_hard_coded_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8232262, "supported_languages": null}, "macro.dbt_project_evaluator.default__find_all_hard_coded_references": {"name": "default__find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.default__find_all_hard_coded_references", "macro_sql": "{% macro default__find_all_hard_coded_references(node) %}\n\n    {%- set all_hard_coded_references_list = [] -%}\n\n    {% if node.resource_type == 'model' and node.language == \"sql\" %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set re = modules.re -%}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {#-\n            REGEX Explanations\n            \n            # from_var_1\n            - matches (from or join) followed by some spaces and then {{var(<something>)}}\n            \n            # from_var_2\n            - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n            \n            # from_table_1\n            - matches (from or join) followed by some spaces and then <something>.<something_else>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_2\n            - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_3\n            - matches (from or join) followed by some spaces and then <something>\n              where <something> is enclosed by (` or [ or \" or ')\n\n            # notes\n            - all regex matches exclude text that immediately follows \"distinct \"\n\n        -#}\n\n        {%- set re = modules.re -%}\n\n        {%- set from_hard_coded_references = {\n            'from_var_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark\n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}\n                (\\)\\s*}})\n\n                ',\n            'from_var_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a comma\n                (,)\n\n                # sixth matching group\n                # 0 or more whitespace character(s), 1 or 0 quotation mark            \n                (\\s*[\\'\\\"]?)\n\n                # seventh matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # eighth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n                ([\\'\\\"]?\\s*)\n\n                # ninth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n                (\\)\\s*}})\n\n                ',\n            'from_table_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character            \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # ninth matching group\n                # a period\n                (\\.)\n\n                # tenth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # eleventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # twelfth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) followed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_3':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\'])\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n                \n                # fourth matching group\n                # 1 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\'])(?=\\s|$)\n\n                '\n        } -%}\n\n        {%- for regex_name, regex_pattern in from_hard_coded_references.items() -%}\n\n            {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql_no_comments) -%}\n                \n                {%- for match in all_regex_matches -%}\n\n                    {%- set raw_reference = match[1:]|join()|trim -%}\n\n                    {%- do all_hard_coded_references_list.append(raw_reference) -%}\n\n                {%- endfor -%}\n        \n        {%- endfor -%}\n\n    {% endif %}\n    \n    {% set all_hard_coded_references = set(all_hard_coded_references_list)|sort|join(', ')|trim %}\n\n    {{ return(all_hard_coded_references) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8246121, "supported_languages": null}, "macro.dbt_project_evaluator.filter_exceptions": {"name": "filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.filter_exceptions", "macro_sql": "{% macro filter_exceptions() -%}\n    {{ return(adapter.dispatch('filter_exceptions', 'dbt_project_evaluator')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__filter_exceptions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8251169, "supported_languages": null}, "macro.dbt_project_evaluator.default__filter_exceptions": {"name": "default__filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.default__filter_exceptions", "macro_sql": "{% macro default__filter_exceptions() %}\n\n    {% set query_filters %}\n    select\n        column_name,\n        id_to_exclude\n    from {{ ref('dbt_project_evaluator_exceptions') }}\n    where fct_name = '{{ model.name }}'\n    {% endset %}\n\n    {% if execute %}\n    {% set is_default_seed = 'dbt_project_evaluator' in graph.nodes.values() | \n        selectattr('resource_type', 'equalto', 'seed') | \n        selectattr('name', 'equalto', 'dbt_project_evaluator_exceptions') | \n        map(attribute = 'package_name') | list %}\n\n    {% if not is_default_seed %}\n    \n        {% if flags.WHICH not in ['compile'] %}\n            where 1 = 1\n            {% for row_filter in run_query(query_filters) %}\n                and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n            {% endfor %}\n        {% endif %}\n    \n    {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.825792, "supported_languages": null}, "macro.dbt_project_evaluator.is_os_mac_or_linux": {"name": "is_os_mac_or_linux", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.is_os_mac_or_linux", "macro_sql": "{% macro is_os_mac_or_linux() %}\n  {% for val in graph.nodes.values() %}\n    {{ return(\"\\\\\" not in val.get(\"original_file_path\",\"\")) }}\n  {% endfor %}\n  {{ return(true) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.826561, "supported_languages": null}, "macro.dbt_project_evaluator.get_directory_pattern": {"name": "get_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_directory_pattern", "macro_sql": "{% macro get_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ return(\"/\") }}\n    {% else %}\n      {{ return(\"\\\\\\\\\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.826833, "supported_languages": null}, "macro.dbt_project_evaluator.get_regexp_directory_pattern": {"name": "get_regexp_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro_sql": "{% macro get_regexp_directory_pattern() %}\n  {% set regexp_escaped = get_directory_pattern() | replace(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") %}\n  {% do return(regexp_escaped) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.827032, "supported_languages": null}, "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern": {"name": "get_dbtreplace_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro_sql": "{% macro get_dbtreplace_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }}\n    {% else %}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*\\\\\\\\\\\\\\\\','')\", \"''\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8273668, "supported_languages": null}, "macro.dbt_project_evaluator.is_not_empty_string": {"name": "is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.is_not_empty_string", "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.827622, "supported_languages": null}, "macro.dbt_project_evaluator.default__is_not_empty_string": {"name": "default__is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string", "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.827866, "supported_languages": null}, "macro.dbt_project_evaluator.insert_resources_from_graph": {"name": "insert_resources_from_graph", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/insert_resources_from_graph.sql", "original_file_path": "macros/insert_resources_from_graph.sql", "unique_id": "macro.dbt_project_evaluator.insert_resources_from_graph", "macro_sql": "{% macro insert_resources_from_graph(relation, resource_type='nodes', relationships=False, columns=False, batch_size=var('insert_batch_size') | int) %}\n  {%- set values = get_resource_values(resource_type, relationships, columns) -%}\n  {%- set values_length = values | length -%}\n  {%- set loop_count = (values_length / batch_size) | round(0, 'ceil') | int -%}\n  \n    {%- for loop_number in range(loop_count) -%}\n        {%- set lower_bound = loop.index0 * batch_size -%}\n        {%- set upper_bound = loop.index * batch_size -%}\n        {%- set values_subset = values[lower_bound : upper_bound] %}\n        {%- set values_list_of_strings = [] -%}\n        {%- for indiv_values in values_subset %}\n            {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n        {%- endfor -%}\n        {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' %}\n        {%- set insert_statement = \"insert into \" ~ relation ~ \" values \\n\" ~  values_string ~ \";\"%}\n        {% call statement('insert') -%}\n            {{ insert_statement }}\n        {%- endcall %}\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_resource_values", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8291368, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_number_lines": {"name": "calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.calculate_number_lines", "macro_sql": "{% macro calculate_number_lines(node) %}\n    {{ return(adapter.dispatch('calculate_number_lines', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_number_lines"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.829472, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_number_lines": {"name": "default__calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_number_lines", "macro_sql": "{% macro default__calculate_number_lines(node) %}\n\n    {% if node.resource_type == 'model' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {{ return(model_raw_sql.count(\"\\n\")) + 1 }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.829851, "supported_languages": null}, "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues": {"name": "print_dbt_project_evaluator_issues", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "original_file_path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "unique_id": "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues", "macro_sql": "{% macro print_dbt_project_evaluator_issues(format='table', quote=\"\") %}\n\n  {%- if flags.WHICH in [\"build\",\"test\"] -%}\n    {{ print(\"\\n### List of issues raised by dbt_project_evaluator ###\") }}\n\n    {#-\n      if you create custom dbt_project_evaluator rules on your package using the test `dbt_project_evaluator.is_empty`,\n      the test name should start with the same name as the default.\n    -#}\n    {% set test_name_prefix_of_custom_rules = var(\n      \"test_name_prefix_of_custom_rules\",\n      default=\"dbt_project_evaluator_is_empty_\",\n    ) %}\n\n    {% for result in results | selectattr('failures') | selectattr('failures', '>', 0) %}\n      \n      {% set is_test = result.node.config.materialized == \"test\" %}\n      {% set package_name = result.node.package_name %}\n      {% set resource_name = result.node.name %}\n      {% if is_test and (\n        package_name == \"dbt_project_evaluator\"\n        or resource_name.startswith(test_name_prefix_of_custom_rules)\n      ) %}\n        \n        {{ print(\"\\n-- \" ~ result.node.fqn | join(\".\") ~ \" --\") }}\n\n        {% set unique_id_model_checked = result.node.depends_on.nodes[0] %}\n\n        {% set model_details = graph[\"nodes\"][unique_id_model_checked] %}\n        {% set name_model_checked = model_details.alias %}\n        {% set model_schema = quote ~ model_details.schema ~ quote %}\n        {% set model_database = quote ~ model_details.database ~ quote if model_details.database  else None %}\n        {% set db_schema = model_database ~ \".\" ~ model_schema if model_database else model_schema %}\n\n        {% set sql_statement %}\n        select * from {{db_schema}}.{{name_model_checked}}\n        {% endset %}\n\n        {% set query_results = run_query(sql_statement) %}\n        {% if format == 'table' %}\n          {{ print(query_results.print_table(max_column_width=80, max_rows=1000) or \"\") }}\n        {% elif format == 'csv' %}  \n          {{ print(query_results.print_csv() or \"\") }}\n        {% else %}\n            {%- do exceptions.raise_compiler_error(\"format can only be 'table' or 'csv'\") -%}\n        {% endif %}\n\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ print(\"\\n\") }}\n  {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query", "macro.dbt_unit_testing.print_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.832147, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_string": {"name": "clickhouse__type_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_string", "macro_sql": "{%- macro clickhouse__type_string() -%}\n  {{ 'Nullable(String)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8333771, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_int": {"name": "clickhouse__type_int", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_int", "macro_sql": "\n\n{%- macro clickhouse__type_int() -%}\n  {{ 'Nullable(Int32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.833456, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_float": {"name": "clickhouse__type_float", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_float", "macro_sql": "\n\n{%- macro clickhouse__type_float() -%}\n  {{ 'Nullable(Float32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8335328, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_boolean": {"name": "clickhouse__type_boolean", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_boolean", "macro_sql": "\n\n{%- macro clickhouse__type_boolean() -%}\n  {{ 'Nullable(Bool)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.833608, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(string_text, pattern, replacement) -%}\n    replaceAll(assumeNotNull({{string_text}}), {{pattern}}, {{replacement}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.833738, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) -%}\n    splitByChar({{delimiter_text}}, assumeNotNull({{string_text}}))[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8338711, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if order_by_clause and ' by ' in order_by_clause -%}\n      {% set order_by_field = order_by_clause.split(' by ')[1] %}\n      {% set arr = \"arrayMap(x -> x.1, arrayReverseSort(x -> x.2, arrayZip(array_agg({}), array_agg({}))))\".format(arr, order_by_field) %}\n    {% else -%}\n      {% set arr = \"array_agg({})\".format(measure) %}\n    {%- endif %}\n\n    {% if limit_num -%}\n      arrayStringConcat(arraySlice({{ arr }}, 1, {{ limit_num }}), {{delimiter_text}})\n    {% else -%}\n      arrayStringConcat({{ arr }}, {{delimiter_text}})\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.834353, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% if data_sql %}\n    {% set sql -%}\n      insert into {{ this.render() }} ({{ cols_sql }})\n      {{ adapter.get_model_query_settings(model) }}\n      format CSV\n      {{ data_sql }}\n    {%- endset %}\n\n    {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.834819, "supported_languages": null}, "macro.dbt_project_evaluator.type_large_string": {"name": "type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.type_large_string", "macro_sql": "{%- macro type_large_string() -%}\n    {{ return(adapter.dispatch('type_large_string', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_large_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8350441, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_large_string": {"name": "default__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_large_string", "macro_sql": "{%- macro default__type_large_string() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8351529, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_large_string": {"name": "redshift__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_large_string", "macro_sql": "{%- macro redshift__type_large_string() -%}\n    varchar(5000)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.835217, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) -%}\n    str_split({{string_text}}, {{delimiter_text}})[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.835495, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on DuckDB but it allows tests to pass/fail for this package\n        - order_by_clause does not work, so we need to sort the CTE before calling listagg\n        - support for limit_num was not added\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on DuckDB doesn't support limit_num\") -%}\n    {%- endif %}\n\n    string_agg(\n        {{ measure }}\n        , {{ delimiter_text }}\n        {{ order_by_clause }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8357298, "supported_languages": null}, "macro.dbt_project_evaluator.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/spark_shims.sql", "original_file_path": "macros/cross_db_shim/spark_shims.sql", "unique_id": "macro.dbt_project_evaluator.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n    {{ expression | replace(\"'\",\"\\\\'\") }}  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.835885, "supported_languages": null}, "macro.dbt_project_evaluator.type_string_dpe": {"name": "type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.type_string_dpe", "macro_sql": "{%- macro type_string_dpe() -%}\n    {{ return(adapter.dispatch('type_string_dpe', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.836168, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_string_dpe": {"name": "default__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_string_dpe", "macro_sql": "{%- macro default__type_string_dpe() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.836278, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_string_dpe": {"name": "redshift__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_string_dpe", "macro_sql": "{%- macro redshift__type_string_dpe() -%}\n    {{ return(api.Column.string_type(600)) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.836399, "supported_languages": null}, "macro.dbt_project_evaluator.get_node_values": {"name": "get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.get_node_values", "macro_sql": "{%- macro get_node_values() -%}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.837599, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_node_values": {"name": "default__get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_node_values", "macro_sql": "{%- macro default__get_node_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set hard_coded_references = dbt_project_evaluator.find_all_hard_coded_references(node) -%}\n        {%- set number_lines = dbt_project_evaluator.calculate_number_lines(node) -%}\n        {%- set sql_complexity = dbt_project_evaluator.calculate_sql_complexity(node) -%}\n        {%- set contract = node.contract.enforced if node.contract else false -%}\n        {%- set exclude_node = dbt_project_evaluator.set_is_excluded(node, resource_type=\"node\") -%}\n\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.group),\n                wrap_string_with_quotes(node.access),\n                wrap_string_with_quotes(node.latest_version),\n                wrap_string_with_quotes(node.version),\n                wrap_string_with_quotes(node.deprecation_date),\n                \"cast(\" ~ contract | trim  ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                node.columns.values() | list | length,\n                node.columns.values() | list | selectattr('description') | list | length,\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson),\n                wrap_string_with_quotes(dbt.escape_single_quotes(hard_coded_references)),\n                number_lines,\n                sql_complexity,\n                wrap_string_with_quotes(node.get('depends_on',{}).get('macros',[]) | tojson),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.test_metadata) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"cast(\" ~ exclude_node ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.find_all_hard_coded_references", "macro.dbt_project_evaluator.calculate_number_lines", "macro.dbt_project_evaluator.calculate_sql_complexity", "macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.839553, "supported_languages": null}, "macro.dbt_project_evaluator.get_metric_values": {"name": "get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.get_metric_values", "macro_sql": "{%- macro get_metric_values() -%}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_metric_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.840105, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_metric_values": {"name": "default__get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_metric_values", "macro_sql": "{%- macro default__get_metric_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n   \n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(dbt.escape_single_quotes(node.label)),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(dbt.escape_single_quotes(tojson(node.filter))),\n            wrap_string_with_quotes(node.type_params.measure.name),\n            wrap_string_with_quotes(node.type_params.measure.alias),\n            wrap_string_with_quotes(node.type_params.numerator | tojson),\n            wrap_string_with_quotes(node.type_params.denominator | tojson),\n            wrap_string_with_quotes(node.type_params.expr),\n            wrap_string_with_quotes(node.type_params.window | tojson),\n            wrap_string_with_quotes(node.type_params.grain_to_date),\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.841247, "supported_languages": null}, "macro.dbt_project_evaluator.get_resource_values": {"name": "get_resource_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_resource_values.sql", "original_file_path": "macros/unpack/get_resource_values.sql", "unique_id": "macro.dbt_project_evaluator.get_resource_values", "macro_sql": "{% macro get_resource_values(resource=None, relationships=None, columns=None) %}\n  {% if relationships %}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif columns %}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif resource == 'exposures' %}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'sources' %}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'metrics' %}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'nodes' %}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationship_values", "macro.dbt_project_evaluator.default__get_relationship_values", "macro.dbt_project_evaluator.get_column_values", "macro.dbt_project_evaluator.default__get_column_values", "macro.dbt_project_evaluator.get_exposure_values", "macro.dbt_project_evaluator.default__get_exposure_values", "macro.dbt_project_evaluator.get_source_values", "macro.dbt_project_evaluator.default__get_source_values", "macro.dbt_project_evaluator.get_metric_values", "macro.dbt_project_evaluator.default__get_metric_values", "macro.dbt_project_evaluator.get_node_values", "macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.84228, "supported_languages": null}, "macro.dbt_project_evaluator.get_relationship_values": {"name": "get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.get_relationship_values", "macro_sql": "{%- macro get_relationship_values(node_type) -%}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_relationship_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8437178, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_relationship_values": {"name": "default__get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_relationship_values", "macro_sql": "{%- macro default__get_relationship_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.get('depends_on',{}).get('nodes',[]) |length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"cast(NULL as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.get('depends_on',{}).get('nodes',[]) -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"\" ~ loop.last ~ \"\" if node.unique_id.split('.')[0] == 'test' else \"FALSE\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.845083, "supported_languages": null}, "macro.dbt_project_evaluator.get_exposure_values": {"name": "get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.get_exposure_values", "macro_sql": "{%- macro get_exposure_values() -%}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_exposure_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.845593, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_exposure_values": {"name": "default__get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_exposure_values", "macro_sql": "{%- macro default__get_exposure_values() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.name)),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.email)),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.84648, "supported_languages": null}, "macro.dbt_project_evaluator.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.get_column_values", "macro_sql": "{%- macro get_column_values(node_type) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.84738, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_column_values", "macro_sql": "{%- macro default__get_column_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'sources' -%}\n            {% set nodes_list = graph.sources.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes or sources, got \" ~ node_type) }}\n        {% endif -%}\n\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n            {%- for column in node.columns.values() -%}\n\n                {%- set values_line  = \n                    [\n                        wrap_string_with_quotes(node.unique_id),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.name)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.description)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.data_type)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(tojson(column.constraints))),\n                        column.constraints | selectattr('type', 'equalto', 'not_null') | list | length > 0,\n                        column.constraints | length,\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.quote))\n                    ]\n                %}\n\n                {%- do values.append(values_line) -%}\n\n            {%- endfor -%}\n        {%- endfor -%}\n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.848452, "supported_languages": null}, "macro.dbt_project_evaluator.get_source_values": {"name": "get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.get_source_values", "macro_sql": "{%- macro get_source_values() -%}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_source_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.849199, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_source_values": {"name": "default__get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_source_values", "macro_sql": "{%- macro default__get_source_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set exclude_source = dbt_project_evaluator.set_is_excluded(node, resource_type=\"source\") -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ node.config.enabled ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              \"cast(\" ~ ((node.freshness != None) and (dbt_project_evaluator.is_not_empty_string(node.freshness.warn_after.count) \n                or dbt_project_evaluator.is_not_empty_string(node.freshness.error_after.count))) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson),\n              \"cast(\" ~ exclude_source ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(values) }}\n \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.8506, "supported_languages": null}, "macro.dbt_project_evaluator.test_is_empty": {"name": "test_is_empty", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "tests/generic/test_is_empty.sql", "original_file_path": "tests/generic/test_is_empty.sql", "unique_id": "macro.dbt_project_evaluator.test_is_empty", "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1733395223.850849, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_demo.diamonds_list_colors": ["model.dbt_demo.diamonds_four_cs"], "model.dbt_demo.diamonds_prices": [], "model.dbt_demo.diamonds_four_cs": ["source.dbt_demo.raw.diamonds"], "model.dbt_demo.zzz_game_details": [], "model.dbt_demo.zzz_win_loss_records": ["model.dbt_demo.zzz_game_details"], "model.dbt_demo.second_dbt_model": ["model.dbt_demo.first_dbt_model"], "model.dbt_demo.first_dbt_model": [], "model.dbt_demo.my_python_model": ["model.dbt_demo.diamonds_four_cs"], "test.dbt_demo.zzz_game_details_check_scores": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.zzz_game_details_check_dates": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.zzz_win_loss_records_check_records": ["model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.my_python_model_test": ["model.dbt_demo.my_python_model"], "test.dbt_demo.diamonds_list_colors_test": ["model.dbt_demo.diamonds_list_colors"], "model.dbt_project_evaluator.stg_columns": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"], "model.dbt_project_evaluator.stg_nodes": [], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.base_exposure_relationships"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.base_node_relationships"], "model.dbt_project_evaluator.stg_sources": [], "model.dbt_project_evaluator.stg_exposures": [], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.base_metric_relationships"], "model.dbt_project_evaluator.stg_metrics": [], "model.dbt_project_evaluator.base_node_relationships": [], "model.dbt_project_evaluator.base_source_columns": [], "model.dbt_project_evaluator.base_node_columns": [], "model.dbt_project_evaluator.base_exposure_relationships": [], "model.dbt_project_evaluator.base_metric_relationships": [], "model.dbt_project_evaluator.stg_naming_convention_folders": [], "model.dbt_project_evaluator.stg_naming_convention_prefixes": [], "model.dbt_project_evaluator.fct_undocumented_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_documentation_coverage": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships", "model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_sources"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_root_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_unused_sources": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_duplicate_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_source_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_too_many_joins": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_hard_coded_references": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_coverage": ["model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_directories": ["model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [], "test.dbt_demo.unique_zzz_game_details_game_id.80431e7218": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_game_id.3b5747f905": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_home.a99d25edd5": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle.3771faef40": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_visitor.990a91372e": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle.f0c81c502d": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_home_score.8c55a8fe39": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_visitor_score.f31e89be7f": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_winner.7f08e737be": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle.344bd88c4c": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.not_null_zzz_game_details_date.a9f3a56f68": ["model.dbt_demo.zzz_game_details"], "test.dbt_demo.unique_zzz_win_loss_records_team.b989062105": ["model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.not_null_zzz_win_loss_records_team.9a18f33f86": ["model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06": ["model.dbt_demo.zzz_game_details", "model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.not_null_zzz_win_loss_records_wins.f6815357fe": ["model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.not_null_zzz_win_loss_records_losses.82bf4ea601": ["model.dbt_demo.zzz_win_loss_records"], "test.dbt_demo.not_null_my_python_model_carat.f3907157f1": ["model.dbt_demo.my_python_model"], "test.dbt_demo.unique_first_dbt_model_id.9dda05743e": ["model.dbt_demo.first_dbt_model"], "test.dbt_demo.not_null_first_dbt_model_id.bd8d25d061": ["model.dbt_demo.first_dbt_model"], "test.dbt_demo.unique_second_dbt_model_id.3d7f6966a4": ["model.dbt_demo.second_dbt_model"], "test.dbt_demo.not_null_second_dbt_model_id.c791c712a2": ["model.dbt_demo.second_dbt_model"], "test.dbt_demo.not_null_second_dbt_model_amount_usd.28ae55e16f": ["model.dbt_demo.second_dbt_model"], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": ["model.dbt_project_evaluator.fct_documentation_coverage"], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": ["model.dbt_project_evaluator.fct_undocumented_models"], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": ["model.dbt_project_evaluator.fct_undocumented_source_tables"], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": ["model.dbt_project_evaluator.fct_undocumented_sources"], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": ["model.dbt_project_evaluator.fct_direct_join_to_source"], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": ["model.dbt_project_evaluator.fct_duplicate_sources"], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": ["model.dbt_project_evaluator.fct_model_fanout"], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": ["model.dbt_project_evaluator.fct_multiple_sources_joined"], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": ["model.dbt_project_evaluator.fct_root_models"], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": ["model.dbt_project_evaluator.fct_source_fanout"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": ["model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": ["model.dbt_project_evaluator.fct_hard_coded_references"], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": ["model.dbt_project_evaluator.fct_too_many_joins"], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": ["model.dbt_project_evaluator.fct_test_coverage"], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": ["model.dbt_project_evaluator.fct_sources_without_freshness"], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": ["model.dbt_project_evaluator.fct_public_models_without_contract"], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": ["model.dbt_project_evaluator.fct_undocumented_public_models"], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": ["model.dbt_project_evaluator.fct_chained_views_dependencies"], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": ["model.dbt_project_evaluator.fct_model_directories"], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": ["model.dbt_project_evaluator.fct_model_naming_conventions"], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": ["model.dbt_project_evaluator.fct_source_directories"], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": ["model.dbt_project_evaluator.fct_test_directories"], "source.dbt_demo.raw.diamonds": [], "unit_test.dbt_demo.diamonds_list_colors.test_get_distinct_colors": ["model.dbt_demo.diamonds_list_colors"]}, "child_map": {"model.dbt_demo.diamonds_list_colors": ["test.dbt_demo.diamonds_list_colors_test", "unit_test.dbt_demo.diamonds_list_colors.test_get_distinct_colors"], "model.dbt_demo.diamonds_prices": [], "model.dbt_demo.diamonds_four_cs": ["model.dbt_demo.diamonds_list_colors", "model.dbt_demo.my_python_model"], "model.dbt_demo.zzz_game_details": ["model.dbt_demo.zzz_win_loss_records", "test.dbt_demo.accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle.3771faef40", "test.dbt_demo.accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle.f0c81c502d", "test.dbt_demo.accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle.344bd88c4c", "test.dbt_demo.not_null_zzz_game_details_date.a9f3a56f68", "test.dbt_demo.not_null_zzz_game_details_game_id.3b5747f905", "test.dbt_demo.not_null_zzz_game_details_home.a99d25edd5", "test.dbt_demo.not_null_zzz_game_details_home_score.8c55a8fe39", "test.dbt_demo.not_null_zzz_game_details_visitor.990a91372e", "test.dbt_demo.not_null_zzz_game_details_visitor_score.f31e89be7f", "test.dbt_demo.not_null_zzz_game_details_winner.7f08e737be", "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06", "test.dbt_demo.unique_zzz_game_details_game_id.80431e7218", "test.dbt_demo.zzz_game_details_check_dates", "test.dbt_demo.zzz_game_details_check_scores"], "model.dbt_demo.zzz_win_loss_records": ["test.dbt_demo.not_null_zzz_win_loss_records_losses.82bf4ea601", "test.dbt_demo.not_null_zzz_win_loss_records_team.9a18f33f86", "test.dbt_demo.not_null_zzz_win_loss_records_wins.f6815357fe", "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06", "test.dbt_demo.unique_zzz_win_loss_records_team.b989062105", "test.dbt_demo.zzz_win_loss_records_check_records"], "model.dbt_demo.second_dbt_model": ["test.dbt_demo.not_null_second_dbt_model_amount_usd.28ae55e16f", "test.dbt_demo.not_null_second_dbt_model_id.c791c712a2", "test.dbt_demo.unique_second_dbt_model_id.3d7f6966a4"], "model.dbt_demo.first_dbt_model": ["model.dbt_demo.second_dbt_model", "test.dbt_demo.not_null_first_dbt_model_id.bd8d25d061", "test.dbt_demo.unique_first_dbt_model_id.9dda05743e"], "model.dbt_demo.my_python_model": ["test.dbt_demo.my_python_model_test", "test.dbt_demo.not_null_my_python_model_carat.f3907157f1"], "test.dbt_demo.zzz_game_details_check_scores": [], "test.dbt_demo.zzz_game_details_check_dates": [], "test.dbt_demo.zzz_win_loss_records_check_records": [], "test.dbt_demo.my_python_model_test": [], "test.dbt_demo.diamonds_list_colors_test": [], "model.dbt_project_evaluator.stg_columns": [], "model.dbt_project_evaluator.stg_nodes": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposures": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_metrics": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.base_node_relationships": ["model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.base_source_columns": ["model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_node_columns": ["model.dbt_project_evaluator.int_model_test_summary", "model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_exposure_relationships": ["model.dbt_project_evaluator.stg_exposure_relationships"], "model.dbt_project_evaluator.base_metric_relationships": ["model.dbt_project_evaluator.stg_metric_relationships"], "model.dbt_project_evaluator.stg_naming_convention_folders": ["model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_prefixes": ["model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"], "model.dbt_project_evaluator.fct_documentation_coverage": ["test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7"], "model.dbt_project_evaluator.fct_undocumented_sources": ["test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_unused_sources"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.fct_documentation_coverage", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"], "model.dbt_project_evaluator.fct_root_models": ["test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"], "model.dbt_project_evaluator.fct_model_fanout": ["test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"], "model.dbt_project_evaluator.fct_unused_sources": ["test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"], "model.dbt_project_evaluator.fct_duplicate_sources": ["test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31"], "model.dbt_project_evaluator.fct_source_fanout": ["test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"], "model.dbt_project_evaluator.fct_too_many_joins": ["test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"], "model.dbt_project_evaluator.fct_hard_coded_references": ["test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283"], "model.dbt_project_evaluator.fct_test_coverage": ["test.dbt_project_evaluator.valid_test_coverage.df03f31e09"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_test_coverage"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33"], "model.dbt_project_evaluator.fct_source_directories": ["test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"], "model.dbt_project_evaluator.fct_test_directories": ["test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"], "model.dbt_project_evaluator.fct_model_directories": ["test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_demo.unique_zzz_game_details_game_id.80431e7218": [], "test.dbt_demo.not_null_zzz_game_details_game_id.3b5747f905": [], "test.dbt_demo.not_null_zzz_game_details_home.a99d25edd5": [], "test.dbt_demo.accepted_values_zzz_game_details_home__Amsterdam__San_Francisco__Seattle.3771faef40": [], "test.dbt_demo.not_null_zzz_game_details_visitor.990a91372e": [], "test.dbt_demo.accepted_values_zzz_game_details_visitor__Amsterdam__San_Francisco__Seattle.f0c81c502d": [], "test.dbt_demo.not_null_zzz_game_details_home_score.8c55a8fe39": [], "test.dbt_demo.not_null_zzz_game_details_visitor_score.f31e89be7f": [], "test.dbt_demo.not_null_zzz_game_details_winner.7f08e737be": [], "test.dbt_demo.accepted_values_zzz_game_details_winner__Amsterdam__San_Francisco__Seattle.344bd88c4c": [], "test.dbt_demo.not_null_zzz_game_details_date.a9f3a56f68": [], "test.dbt_demo.unique_zzz_win_loss_records_team.b989062105": [], "test.dbt_demo.not_null_zzz_win_loss_records_team.9a18f33f86": [], "test.dbt_demo.relationships_zzz_win_loss_records_team__home__ref_zzz_game_details_.0336bcfb06": [], "test.dbt_demo.not_null_zzz_win_loss_records_wins.f6815357fe": [], "test.dbt_demo.not_null_zzz_win_loss_records_losses.82bf4ea601": [], "test.dbt_demo.not_null_my_python_model_carat.f3907157f1": [], "test.dbt_demo.unique_first_dbt_model_id.9dda05743e": [], "test.dbt_demo.not_null_first_dbt_model_id.bd8d25d061": [], "test.dbt_demo.unique_second_dbt_model_id.3d7f6966a4": [], "test.dbt_demo.not_null_second_dbt_model_id.c791c712a2": [], "test.dbt_demo.not_null_second_dbt_model_amount_usd.28ae55e16f": [], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": [], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [], "source.dbt_demo.raw.diamonds": ["model.dbt_demo.diamonds_four_cs"], "unit_test.dbt_demo.diamonds_list_colors.test_get_distinct_colors": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {"unit_test.dbt_demo.diamonds_list_colors.test_get_distinct_colors": {"model": "diamonds_list_colors", "given": [{"input": "ref('diamonds_four_cs')", "rows": [{"carat": 0.23, "cut": "Ideal", "color": "E", "clarity": "SI2"}, {"carat": 0.3, "cut": "Premium", "color": "E", "clarity": "SI2"}, {"carat": 0.3, "cut": "Premium", "color": "K", "clarity": "SI2"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"color": "E"}, {"color": "K"}], "format": "dict", "fixture": null}, "name": "test_get_distinct_colors", "resource_type": "unit_test", "package_name": "dbt_demo", "path": "sql_model1/test_get_distinct_colors.yml", "original_file_path": "src/models/sql_model1/test_get_distinct_colors.yml", "unique_id": "unit_test.dbt_demo.diamonds_list_colors.test_get_distinct_colors", "fqn": ["dbt_demo", "models", "sql_model1", "diamonds_list_colors", "test_get_distinct_colors"], "description": "Check a distinct list of colors is returned.", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.dbt_demo.diamonds_list_colors"]}, "config": {"tags": [], "meta": {}}, "checksum": "483c13eb849bf29c60173f6b4583def3c4a3b8c20e674a28c0db2c3e81834bb1", "schema": "dbt_dev", "created_at": 1733395224.913204, "versions": null, "version": null}}}